{"version":3,"sources":["App.module.css","components/Header.module.css","components/Example.module.css","components/Header.js","components/Footer.js","components/SEO.js","pages/Home/index.js","constants.js","components/Html.js","components/Example.js","pages/MerkleTree/index.js","routes.js","pages/HelloWorld/index.js","pages/HelloWorld/index.html.js","pages/StateVariables/index.js","pages/StateVariables/index.html.js","pages/Import/index.js","pages/Import/index.html.js","pages/Events/index.js","pages/Events/index.html.js","pages/Error/index.js","pages/Error/index.html.js","pages/SendingEther/index.js","pages/SendingEther/index.html.js","pages/Payable/index.js","pages/Payable/index.html.js","pages/Fallback/index.js","pages/Fallback/index.html.js","pages/ReEntrancy/index.js","pages/ReEntrancy/index.html.js","pages/SelfDestruct/index.js","pages/SelfDestruct/index.html.js","pages/Function/index.js","pages/Function/index.html.js","pages/FunctionModifier/index.js","pages/FunctionModifier/index.html.js","pages/ViewAndPureFunctions/index.js","pages/ViewAndPureFunctions/index.html.js","pages/Inheritance/index.js","pages/Inheritance/index.html.js","pages/Shadow/index.js","pages/Shadow/index.html.js","pages/Constructor/index.js","pages/Constructor/index.html.js","pages/Super/index.js","pages/Super/index.html.js","pages/Visibility/index.js","pages/Visibility/index.html.js","pages/Loop/index.js","pages/Loop/index.html.js","pages/Enum/index.js","pages/Enum/index.html.js","pages/Mapping/index.js","pages/Mapping/index.html.js","pages/Array/index.js","pages/Array/index.html.js","pages/Structs/index.js","pages/Structs/index.html.js","pages/NewContract/index.js","pages/NewContract/index.html.js","pages/CallingContract/index.js","pages/CallingContract/index.html.js","pages/Call/index.js","pages/Call/index.html.js","pages/Delegatecall/index.js","pages/Delegatecall/index.html.js","pages/Library/index.js","pages/Library/index.html.js","pages/EtherUnits/index.js","pages/EtherUnits/index.html.js","pages/Gas/index.js","pages/Gas/index.html.js","pages/Keccak256/index.js","pages/Keccak256/index.html.js","pages/Signature/index.js","pages/Signature/index.html.js","pages/MultiSigWallet/index.js","pages/MultiSigWallet/index.html.js","pages/Dividend/index.js","pages/Dividend/index.html.js","pages/PaymentChannel/index.js","pages/PaymentChannel/index.html.js","pages/MerkleTree/index.html.js","App.js","serviceWorker.js","index.js","components/logo.svg","components/Footer.module.css","pages/Home/index.module.css"],"names":["module","exports","Header","props","className","styles","component","href","src","logo","alt","Footer","Component","SEO","title","description","name","content","Home","header","main","list","Html","hljsDefineSolidity","hljs","initHighlightingOnLoad","dangerouslySetInnerHTML","__html","this","html","Example","target","MerkleTree","routes","path","App","basename","process","map","route","key","footer","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.faadedd9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"App_component__1dd61\",\"main\":\"App_main__3ZkGI\",\"footer\":\"App_footer__29Fsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Header_component__1tkkW\",\"logo\":\"Header_logo__2ins2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Example_component__mzuGC\",\"content\":\"Example_content__3-AiU\"};","import React from \"react\"\nimport styles from \"./Header.module.css\"\nimport logo from \"./logo.svg\"\n\nfunction Header(props) {\n  return (\n    <div className={styles.component}>\n      <a href=\"/\">\n        <img src={logo} alt=\"logo\" className={styles.logo} />\n      </a>\n\n      <h3>\n        <a href=\"/\">\n          <div>Solidity by Example</div>\n          <div>version 0.5.16</div>\n        </a>\n      </h3>\n    </div>\n  )\n}\n\nexport default Header\n","import React, { Component } from \"react\"\nimport styles from \"./Footer.module.css\"\n\nclass Footer extends Component {\n  render() {\n    return (\n      <p className={styles.component}>\n        <a href=\"mailto:contact@solidity-by-example.org\">\n          contact@solidity-by-example.org\n        </a>{\" \"}\n        |{\" \"}\n        <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io\">\n          source\n        </a>{\" \"}\n        |{\" \"}\n        <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io/tree/gh-pages#license\">\n          license\n        </a>\n      </p>\n    )\n  }\n}\n\nexport default Footer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nfunction SEO({ title, description }) {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"Description\" content={description} />\n    </Helmet>\n  )\n}\n\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport SEO from \"../../components/SEO\"\nimport { SOL_VERSION } from \"../../constants\"\nimport styles from \"./index.module.css\"\n\nfunction Home() {\n  return (\n    <div className={styles.component}>\n      <SEO\n        title={`Solidity by Example | ${SOL_VERSION}`}\n        description=\"Learn smart contract programming using Solidity\"\n      />\n      <h1 className={styles.header}>\n        <a href=\"/\">Solidity by Example</a>\n      </h1>\n      <div className={styles.main}>\n        <p>\n          an introduction to{\" \"}\n          <a href=\"https://solidity.readthedocs.io\">Solidity</a> with simple\n          examples\n        </p>\n\n        <ul className={styles.list}>\n          <li>\n            <a href=\"/hello-world\">Hello World</a>\n          </li>\n          <li>\n            <a href=\"/state-variables\">State Variables</a>\n          </li>\n          <li>\n            <a href=\"/ether-units\">Ether and Wei</a>\n          </li>\n          <li>\n            <a href=\"/gas\">Gas and Gas Price</a>\n          </li>\n          <li>\n            <a href=\"/function\">Function</a>\n          </li>\n          <li>\n            <a href=\"/view-and-pure-functions\">View and Pure Functions</a>\n          </li>\n          <li>\n            <a href=\"/function-modifier\">Function Modifier</a>\n          </li>\n          <li>\n            <a href=\"/constructor\">Constructor</a>\n          </li>\n          <li>\n            <a href=\"/inheritance\">Inheritance</a>\n          </li>\n          <li>\n            <a href=\"/super\">Calling Parent Contracts</a>\n          </li>\n          <li>\n            <a href=\"/shadowing-inherited-state-variables\">\n              Shadowing Inherited State Variables\n            </a>\n          </li>\n          <li>\n            <a href=\"/visibility\">Visibility</a>\n          </li>\n          <li>\n            <a href=\"/events\">Events</a>\n          </li>\n          <li>\n            <a href=\"/error\">Error</a>\n          </li>\n          <li>\n            <a href=\"/loop\">Loop</a>\n          </li>\n          <li>\n            <a href=\"/array\">Array</a>\n          </li>\n          <li>\n            <a href=\"/mapping\">Mapping</a>\n          </li>\n          <li>\n            <a href=\"/enum\">Enum</a>\n          </li>\n          <li>\n            <a href=\"/structs\">Structs</a>\n          </li>\n          <li>\n            <a href=\"/payable\">Payable</a>\n          </li>\n          <li>\n            <a href=\"/sending-ether\">Sending Ether</a>\n          </li>\n          <li>\n            <a href=\"/fallback\">Fallback</a>\n          </li>\n          <li>\n            <a href=\"/call\">Call</a>\n          </li>\n          <li>\n            <a href=\"/delegatecall\">Delegatecall</a>\n          </li>\n          <li>\n            <a href=\"/calling-contract\">Calling Other Contract</a>\n          </li>\n          <li>\n            <a href=\"/new-contract\">Creating Contracts from a Contract</a>\n          </li>\n          <li>\n            <a href=\"/import\">Import</a>\n          </li>\n          <li>\n            <a href=\"/Library\">Library</a>\n          </li>\n          <li>\n            <a href=\"/hashing\">Hashing with Keccak256</a>\n          </li>\n          <li>\n            <a href=\"/signature\">Verifying Signature</a>\n          </li>\n        </ul>\n\n        <h3>Applications</h3>\n        <ul>\n          <li>\n            <a href=\"/multi-sig-wallet\">Multi-Sig Wallet</a>\n          </li>\n          <li>\n            <a href=\"/dividend\">Dividend</a>\n          </li>\n          <li>\n            <a href=\"/payment-channel\">Payment Channel</a>\n          </li>\n          <li>\n            <a href=\"/merkle-tree\">Merkle Tree</a>\n          </li>\n        </ul>\n\n        <h3>Hacks</h3>\n        <ul>\n          <li>\n            <a href=\"/re-entrancy\">Re-Entrancy</a>\n          </li>\n          <li>\n            <a href=\"/self-destruct\">Self Destruct</a>\n          </li>\n        </ul>\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","export const SOL_VERSION = \"0.5.16\"\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/foundation.css'\nimport hljsDefineSolidity from 'highlightjs-solidity'\n\nclass Html extends Component {\n  componentDidMount() {\n    hljsDefineSolidity(hljs)\n    hljs.initHighlightingOnLoad()\n  }\n\n  render() {\n    return (\n      <div dangerouslySetInnerHTML={{__html: this.props.html}}>\n      </div>\n    )\n  }\n}\n\nHtml.propTypes = {\n  html: PropTypes.string.isRequired\n}\n\nexport default Html\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { SOL_VERSION } from \"../constants\"\nimport SEO from \"./SEO\"\nimport Html from \"./Html\"\nimport styles from \"./Example.module.css\"\n\nfunction Example(props) {\n  const { title } = props\n\n  return (\n    <div className={styles.component}>\n      <SEO\n        {...props}\n        title={`${title} | Solidity by Example | ${SOL_VERSION}`}\n      />\n      <div className={styles.content}>\n        <h2>{title}</h2>\n\n        <Html html={props.html} />\n\n        <p>\n          Try on{\" \"}\n          <a href=\"https://remix.ethereum.org\" target=\"__blank\">\n            Remix\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nExample.propTypes = {\n  title: PropTypes.string.isRequired,\n  html: PropTypes.string.isRequired,\n}\n\nexport default Example\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction MerkleTree(props) {\n  return (\n    <Example\n      title=\"Merkle Tree\"\n      description=\"Learn about Merkle tree in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default MerkleTree\n","import HelloWorld from \"./pages/HelloWorld\"\nimport StateVariables from \"./pages/StateVariables\"\nimport Payable from \"./pages/Payable\"\nimport SendingEther from \"./pages/SendingEther\"\nimport Fallback from \"./pages/Fallback\"\nimport ReEntrancy from \"./pages/ReEntrancy\"\nimport SelfDestruct from \"./pages/SelfDestruct\"\nimport Events from \"./pages/Events\"\nimport Error from \"./pages/Error\"\nimport Import from \"./pages/Import\"\nimport Function from \"./pages/Function\"\nimport FunctionModifier from \"./pages/FunctionModifier\"\nimport ViewAndPureFunctions from \"./pages/ViewAndPureFunctions\"\nimport Inheritance from \"./pages/Inheritance\"\nimport Shadow from \"./pages/Shadow\"\nimport Constructor from \"./pages/Constructor\"\nimport Super from \"./pages/Super\"\nimport Visibility from \"./pages/Visibility\"\nimport Loop from \"./pages/Loop\"\nimport Enum from \"./pages/Enum\"\nimport Mapping from \"./pages/Mapping\"\nimport Array from \"./pages/Array\"\nimport Structs from \"./pages/Structs\"\nimport NewContract from \"./pages/NewContract\"\nimport CallingContract from \"./pages/CallingContract\"\nimport Call from \"./pages/Call\"\nimport Delegatecall from \"./pages/Delegatecall\"\nimport Library from \"./pages/Library\"\nimport EtherUnits from \"./pages/EtherUnits\"\nimport Gas from \"./pages/Gas\"\nimport Keccak256 from \"./pages/Keccak256\"\nimport Signature from \"./pages/Signature\"\nimport MultiSigWallet from \"./pages/MultiSigWallet\"\nimport Dividend from \"./pages/Dividend\"\nimport PaymentChannel from \"./pages/PaymentChannel\"\nimport MerkleTree from \"./pages/MerkleTree\"\n\nconst routes = [\n  {\n    path: \"/hello-world\",\n    component: HelloWorld,\n  },\n  {\n    path: \"/state-variables\",\n    component: StateVariables,\n  },\n  {\n    path: \"/import\",\n    component: Import,\n  },\n  {\n    path: \"/events\",\n    component: Events,\n  },\n  {\n    path: \"/error\",\n    component: Error,\n  },\n  {\n    path: \"/sending-ether\",\n    component: SendingEther,\n  },\n  {\n    path: \"/payable\",\n    component: Payable,\n  },\n  {\n    path: \"/fallback\",\n    component: Fallback,\n  },\n  {\n    path: \"/re-entrancy\",\n    component: ReEntrancy,\n  },\n  {\n    path: \"/self-destruct\",\n    component: SelfDestruct,\n  },\n  {\n    path: \"/function\",\n    component: Function,\n  },\n  {\n    path: \"/function-modifier\",\n    component: FunctionModifier,\n  },\n  {\n    path: \"/view-and-pure-functions\",\n    component: ViewAndPureFunctions,\n  },\n  {\n    path: \"/inheritance\",\n    component: Inheritance,\n  },\n  {\n    path: \"/shadowing-inherited-state-variables\",\n    component: Shadow,\n  },\n  {\n    path: \"/constructor\",\n    component: Constructor,\n  },\n  {\n    path: \"/super\",\n    component: Super,\n  },\n  {\n    path: \"/visibility\",\n    component: Visibility,\n  },\n  {\n    path: \"/loop\",\n    component: Loop,\n  },\n  {\n    path: \"/enum\",\n    component: Enum,\n  },\n  {\n    path: \"/mapping\",\n    component: Mapping,\n  },\n  {\n    path: \"/array\",\n    component: Array,\n  },\n  {\n    path: \"/structs\",\n    component: Structs,\n  },\n  {\n    path: \"/new-contract\",\n    component: NewContract,\n  },\n  {\n    path: \"/calling-contract\",\n    component: CallingContract,\n  },\n  {\n    path: \"/call\",\n    component: Call,\n  },\n  {\n    path: \"/delegatecall\",\n    component: Delegatecall,\n  },\n  {\n    path: \"/library\",\n    component: Library,\n  },\n  {\n    path: \"/ether-units\",\n    component: EtherUnits,\n  },\n  {\n    path: \"/gas\",\n    component: Gas,\n  },\n  {\n    path: \"/hashing\",\n    component: Keccak256,\n  },\n  {\n    path: \"/signature\",\n    component: Signature,\n  },\n  {\n    path: \"/multi-sig-wallet\",\n    component: MultiSigWallet,\n  },\n  {\n    path: \"/dividend\",\n    component: Dividend,\n  },\n  {\n    path: \"/payment-channel\",\n    component: PaymentChannel,\n  },\n  {\n    path: \"/merkle-tree\",\n    component: MerkleTree,\n  },\n]\n\nexport default routes\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Hello World\"\n      description=\"Hello World in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>pragma</code> specifies the compiler version of Solidity.</p>\n<pre><code class=\"language-solidity\">// compiler version must be greater than or equal to 0.5.16 and less than 0.6.0\npragma solidity ^0.5.16;\n\ncontract HelloWorld {\n  string public greet = \"Hello World!\";\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"State Variables\"\n      description=\"An example of how to get and set state variables in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Variables stored on the blockchain are called <code>state variables</code>.</p>\n<p><code>State variables</code> are declared inside a contract, but outside functions.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract SimpleStorage {\n    // These varaibles will be stored on the blockchain.\n    string public text = \"Hello\";\n    uint public i = 123;\n\n    function doSomething() public {\n        // These variables will not be stored on the blockchain.\n        string memory text = \"Test\";\n        uint i = 456;\n    }\n\n    // Function to set text.\n    function set(string memory _text) public {\n        text = _text;\n    }\n\n    // Function to get text.\n    // Actually we don&#39;t need this function. The compiler automatically\n    // creates getter functions for all public variables.\n    function get() public view returns (string memory) {\n        return text;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Events(props) {\n  return (\n    <Example\n      title=\"Import\"\n      description=\"Learn how to import other Solidity files\"\n      html={html}\n    />\n  )\n}\n\nexport default Events\n","const html = `<p>You can import local and external files in Solidity.</p>\n<h3 id=\"local\">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>├── Import.sol\n└── Foo.sol</code></pre><p>Foo.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Foo {\n    string public name = \"Foo\";\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// import Foo.sol from current directory\nimport \"./Foo.sol\";\n\ncontract Import {\n    // Initialize Foo.sol\n    Foo public foo = new Foo();\n\n    // Test Foo.sol by getting it&#39;s name.\n    function getFooName() public view returns (string memory) {\n        return foo.name();\n    }\n}\n</code></pre>\n<h3 id=\"external\">External</h3>\n<p>You can also import from <a href=\"https://github.com\">GitHub</a> by simply dropping the <code>https://</code> from the url</p>\n<pre><code class=\"language-solidity\">// https://github.com/owner/repo/blob/branch/path/to/Contract.sol\nimport \"github.com/owner/repo/blob/branch/path/to/Contract.sol\";\n\n// Example import ECDSA.sol from openzeppelin-contract repo, release-v2.5.0 branch\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/cryptography/ECDSA.sol\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/cryptography/ECDSA.sol\";</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Events(props) {\n  return (\n    <Example\n      title=\"Events\"\n      description=\"Example of how to emit events in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Events\n","const html = `<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cass for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Event {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, \"Hello World!\");\n        emit Log(msg.sender, \"Hello EVM!\");\n        emit AnotherLog();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Error(props) {\n  return (\n    <Example\n      title=\"Error\"\n      description=\"Example of how to throw errors in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Error\n","const html = `<p>You can throw an error by calling <code>assert</code>, <code>require</code> or <code>revert</code>.</p>\n<p>An error will undo all changes made to the state during a transaction.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Account {\n    uint public balance;\n    uint public constant MAX_UINT = 2 ** 256 - 1;\n\n    function deposit(uint _amount) public {\n        uint oldBalance = balance;\n        uint newBalance = balance + _amount;\n\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        // balance + _amount does not overflow if balance + _amount &gt;= balance\n        require(newBalance &gt;= oldBalance, \"Overflow\");\n\n        balance = newBalance;\n\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n        assert(balance &gt;= oldBalance);\n    }\n\n    function withdraw(uint _amount) public {\n        uint oldBalance = balance;\n\n        // balance - _amount does not underflow if balance &gt;= _amount\n        require(balance &gt;= _amount, \"Underflow\");\n\n        // Revert can be used to throw an error.\n        if (balance &lt; _amount) {\n            revert(\"Underflow\");\n        }\n\n        balance -= _amount;\n\n        assert(balance &lt;= oldBalance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction SendingEther(props) {\n  return (\n    <Example\n      title=\"Sending Ether (send, transfer, call)\"\n      description=\"An example of sending Ether in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default SendingEther\n","const html = `<p>You can send Ether to other contracts by <code>send</code>, <code>transfer</code>, or <code>call</code></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n/*\n3 ways to send ether from a contract to another contract\n- transfer (2300 gas, throws error)\n- send     (2300 gas, returns bool)\n- call     (forward all gas or set gas, returns bool)\n\nNOTE: recommended method after 2019 Dec (use call and guard against re-entrancy)\n      guard against re-entrancy by\n      - making all state changes before calling other contracts\n      - using re-entrancy guard modifier\n*/\n\ncontract ReceiveEther {\n    // This is a special function called the fallback.\n    // The fallback function declared payable enables other contracts to\n    // send Ether by send, transfer, or call.\n    function () external payable {}\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract SendEther {\n    function sendViaTransfer(address payable _to) public payable {\n        // This function is no longer recommended for sending Ether.\n        _to.transfer(msg.value);\n    }\n\n    function sendViaSend(address payable _to) public payable {\n        // Send returns a boolean value indicating success or failure.\n        // This function is not recommended for sending Ether.\n        bool sent = _to.send(msg.value);\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function sendViaCall(address payable _to) public payable {\n        // Call returns a boolean value indicating success or failure.\n        (bool sent, bytes memory data) = _to.call.value(msg.value)(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Payable(props) {\n  return (\n    <Example\n      title=\"Payable\"\n      description=\"An example of how to use the keyword payable in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Payable\n","const html = `<p>Functions and addresses declared <code>payable</code> can receive <code>ether</code> into the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Wallet {\n    event Deposit(address sender, uint amount, uint balance);\n    event Withdraw(uint amount, uint balance);\n    event Transfer(address to, uint amount, uint balance);\n\n    // Payable address can receive Ether\n    address payable public owner;\n\n    constructor() public payable {\n        owner = msg.sender;\n    }\n\n    // Try calling this function along with some ether.\n    // The balance of this contract will be automatically updated.\n    function deposit() public payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    // Try calling this function along with some ether.\n    // The function would throw an error since this function is not payable.\n    function notPayable() public {\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        _;\n    }\n\n    function withdraw(uint _amount) public onlyOwner {\n        owner.transfer(_amount);\n        emit Withdraw(_amount, address(this).balance);\n    }\n\n    function transfer(address payable _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n        emit Transfer(_to, _amount, address(this).balance);\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Fallback(props) {\n  return (\n    <Example\n      title=\"Fallback\"\n      description=\"Example of how to use fallback in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Fallback\n","const html = `<p>A <code>fallback function</code> is an anonymous function that does not take any arguments and does not return anything.</p>\n<p>Fallback functions are executed when</p>\n<ul>\n<li>calling a function that does not exist</li>\n<li>sending Ether directly to a contract</li>\n</ul>\n<p><code>Fallback</code> functions have a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Fallback {\n    event Log(uint gas);\n\n    // Fallback function must be declared as external.\n    function () external payable {\n        // send / transfer (forwards 2300 gas to this fallback function)\n        // call (forwards all of the gas)\n        emit Log(gasleft());\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract SendToFallback {\n    function transferToFallback(address payable _to) public payable {\n        _to.transfer(msg.value);\n    }\n\n    function callFallback(address payable _to) public payable {\n        (bool sent,) = _to.call.value(msg.value)(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Reentrancy(props) {\n  return (\n    <Example\n      title=\"Re-Entrancy\"\n      description=\"An example of re-entrancy attack in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Reentrancy\n","const html = `<p>Here is the setup. Contract <code>A</code> calls contract <code>B</code>.</p>\n<p>The <code>re-entracy</code> exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes\nit&#39;s execution.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// Bank is a contract vulnerable to re-entrancy attack. Let&#39;s see why.\n// To illustrate this attack, we will use 2 accounts.\n// First account - Innocent user\n// Second account - Attacker\n\ncontract Bank {\n    mapping(address =&gt; uint) public balances;\n\n    // Using the first account, deposit 1 Ether in to this contract\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint amount) public {\n        if(balances[msg.sender] &gt;= amount) {\n            // Send Ether\n            (bool sent, ) = msg.sender.call.value(amount)(\"\");\n            // Throw an error if send fails.\n            require(sent, \"Failed to send ether\");\n\n            balances[msg.sender] -= amount;\n        }\n    }\n\n    // Helper function to check the total Ether stored in this contract\n    function getTotalBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Hack {\n    Bank public bank;\n\n    constructor(Bank _bank) public {\n        bank = _bank;\n    }\n\n    // This fallback is called when the Bank contract sends Ether to this contract.\n    function () external payable {\n        if (address(bank).balance &gt;= msg.value) {\n            bank.withdraw(msg.value);\n        }\n    }\n\n    // Try:\n    // Using the second account, call this function sending 1 Ether.\n    function attack() public payable {\n        bank.deposit.value(msg.value)();\n        bank.withdraw(msg.value);\n        // This contract should now have 2 Ethers:\n        // 1 Ether stolen from the first account and\n        // 1 Ether returned to this contract.\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction SelfDestruct(props) {\n  return (\n    <Example\n      title=\"Self Destruct\"\n      description=\"An example of how to delete your smart contract by calling seldestruct in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default SelfDestruct\n","const html = `<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remainig Ether stored in the contract to an\ndesignated address.</p>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// To demonstrate how to force sending Ether to another contract:\n// 1. Deploy the SelfDestruct contract, funding 1 Ether.\n// 2. Deploy the Target contract.\n// 3. Execute kill function in SelfDestruct, passing the address of Target as input.\n// 4. Check the balance of Target contract. It should now have 1 Ether.\n\ncontract SelfDestruct {\n    constructor() public payable {\n    }\n\n    function kill(address payable to) public {\n        selfdestruct(to);\n    }\n}\n\ncontract Target {\n    // Notice this contract does not have a payable fallback,\n    // so we should not be able to send Ether to this contract...\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Function(props) {\n  return (\n    <Example\n      title=\"Function\"\n      description=\"Example of how to write functions in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Function\n","const html = `<p>In Solidity, public functions cannot accept certain data types as inputs or outputs</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Function {\n    // cannot use map for inputs\n    // function mapInput(mapping(uint =&gt; uint) memory map) public {\n    // }\n\n    // can use multi dimensional fixed size array for input\n    function multiDimFixedSizeArrayInput(uint[9][9] memory _arr) public {\n    }\n\n    // cannot use multi dimensional dynamic size array as input\n    // function multiDimDynamicSizeArrayInput(uint[][] memory _arr) public {\n    // }\n\n    // can use array for input\n    function arrayInput(uint[] memory _arr) public {\n    }\n\n    mapping(uint =&gt; uint) map;\n    uint[] arr;\n    uint[9][9] arr2DFixed;\n    uint[][] arr2D;\n\n    // cannot return map for outputs\n    // function mapOutput() public returns (mapping(uint =&gt; uint) memory) {\n    //     return map;\n    // }\n\n    // can use multi dimensional fixed size array for output\n    function multiDimFixedSizeArrayOutput() public view returns (uint[9][9] memory) {\n        return arr2DFixed;\n    }\n\n    // cannot use multi dimensional dynamic size array as output\n    // function multiDimDynamicSizeArrayOutput() public returns (uint[][] memory) {\n    //     return arr2D;\n    // }\n\n    // can use array for output\n    function arrayOutput() public view returns (uint[] memory) {\n        return arr;\n    }\n\n    // Functions can return multiple values.\n    function returnMultipleVals() public pure returns (uint, bool, uint) {\n        return (1, true, 2);\n    }\n\n    // Return values can be named. This is useful when a contract\n    // interacts with web3.js where you can access the returned\n    // values by name instead of the returned order.\n    function named() public pure returns (uint x, bool b, uint y) {\n        return (1, true, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted;\n    function assigned() public pure returns (uint x, bool b, uint y) {\n        x = 1;\n        b = true;\n        y = 2;\n    }\n\n    // Use destructing assignment when calling another\n    // function that returns multiple values.\n    function destructingAssigments() public pure returns (uint, bool, uint, uint, uint) {\n        (uint i, bool b, uint j) =  returnMultipleVals();\n\n        // Values can be left out.\n        (uint x, , uint y) = (4, 5, 6);\n\n        return (i, b, j, x, y);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction FunctionModifier(props) {\n  return (\n    <Example\n      title=\"Function Modifier\"\n      description=\"Example of function modifiers in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default FunctionModifier\n","const html = `<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Restrict access</li>\n<li>Validate inputs</li>\n<li>Guard against reentrancy hack</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract FunctionModifier {\n    // We will use these variables to demonstrate how to use\n    // modifiers.\n    address public owner;\n    uint public x = 10;\n    bool public locked;\n\n    constructor() public {\n        // Set the transaction sender as the owner of the contract.\n        owner = msg.sender;\n    }\n\n    // Modifier to check that the caller is the owner of\n    // the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        // Underscore is a special character only used inside\n        // a function modifier and it tells Solidity to\n        // execute the rest of the code.\n        _;\n    }\n\n    // Modifiers can take inputs. This modifier checks that the\n    // address passed in is not the zero address.\n    modifier validAddress(address _addr) {\n        require(_addr != address(0), \"Not valid address\");\n        _;\n    }\n\n    function changeOwner(address _newOwner)\n        public\n        onlyOwner\n        validAddress(_newOwner)\n    {\n        owner = _newOwner;\n    }\n\n    // Modifiers can be called before and / or after a function.\n    // This modifier prevents a function from being called while\n    // it is still executing.\n    modifier noReentrancy() {\n        require(!locked, \"No reentrancy\");\n\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function decrement(uint i) public noReentrancy {\n        x -= i;\n\n        if (i &gt; 1) {\n            decrement(i - 1);\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"View and Pure Functions\"\n      description=\"An example of view and pure functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be changed or read.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function addToX(uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Promise not to modify or read from the state.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Inheritance(props) {\n  return (\n    <Example\n      title=\"Inheritance\"\n      description=\"Example of inheritance in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Inheritance\n","const html = `<p>Solidity supports multiple inheritance.</p>\n<p>Order of inheritance is important</p>\n<p>You have to list the parent contracts in the order from “most base-like” to “most derived”.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract A {\n    function foo() public pure returns (string memory) {\n        return \"A\";\n    }\n}\n\n// Contracts can inherit other contracts by using the keyword &#39;is&#39;.\ncontract B is A {\n    // Override A.foo()\n    function foo() public pure returns (string memory) {\n        return \"B\";\n    }\n}\n\ncontract C is A {\n    // Override A.foo()\n    function foo() public pure returns (string memory) {\n        return \"C\";\n    }\n}\n\n// Contracts can inherit from multiple parent contracts.\n// When a function is called that is defined multiple times in\n// different contracts, parent contracts are searched from\n// right to left, and in depth-first manner.\n\ncontract D is B, C {\n    // D.foo() returns \"C\"\n    // since C is the right most parent contract with function foo()\n}\n\ncontract E is C, B {\n    // E.foo() returns \"B\"\n    // since B is the right most parent contract with function foo()\n}\n\n// Inheritance must be ordered from “most base-like” to “most derived”.\n// Swapping the order of A and B will throw a compilation error.\ncontract F is A, B {\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Shadow(props) {\n  return (\n    <Example\n      title=\"Shadowing Inherited State Variables\"\n      description=\"An example of shadowing state variables by inheritance\"\n      html={html}\n    />\n  )\n}\n\nexport default Shadow\n","const html = `<p>Unlike functions, state variables cannot be overridden by re-declaring it\nin the child contract.</p>\n<p>Let&#39;s learn how to correctly override inherited state variables.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract A {\n    string public name = \"Contract A\";\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n}\n\ncontract B is A {\n    // This is the incorrect way to override inherited state variables.\n    string public name = \"Contract B\";\n\n    // B.getName returns \"Contract A\"\n\n    // Functions defined in contract A that use the &#39;name&#39; state variable\n    // will access A.name. Functions defined in B that uses &#39;name&#39; will\n    // access B.name.\n}\n\ncontract C is A {\n    // This is the correct way to override inherited state variables.\n    constructor() public {\n        name = \"Contract C\";\n    }\n\n    // C.getName returns \"Contract C\"\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Constructor(props) {\n  return (\n    <Example\n      title=\"Constructor\"\n      description=\"Learn how to initialize smart contracts in Solidity using a constructor\"\n      html={html}\n    />\n  )\n}\n\nexport default Constructor\n","const html = `<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to parent <code>constructors</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// Base contract X\ncontract X {\n    string public name;\n\n    constructor(string memory _name) public {\n        name = _name;\n    }\n}\n\n// Base contract Y\ncontract Y {\n    string public text;\n\n    constructor(string memory _text) public {\n        text = _text;\n    }\n}\n\n// There are 2 ways to initialize parent contract with parameters.\n// 1. Pass parameters when declaring the inheritance\n// 2. Pass parameters next to the constructor of the child contract\n\n// Pass the parameters here in the inheritance list.\ncontract B is X(\"Input to X\"), Y(\"Input to Y\") {\n}\n\ncontract C is X, Y {\n    // Pass the parameters here in the constructor, similar to modifiers.\n    constructor(string memory _name, string memory _text) X(_name) Y(_text) public {\n    }\n}\n\n// Parent constructors are always called in the order of inheritance\n// regardless of the order of parent contracts listed in the\n// constructor of the child contract\n\n// Constructors are called in the following order:\n// 1. Y\n// 2. X\n// 3. E\ncontract E is X, Y {\n    constructor() X(\"X was called\") Y(\"Y was called\") public {\n    }\n}\n\n// Constructors are still called in the following order:\n// 1. Y\n// 2. X\n// 3. E\ncontract F is X, Y {\n    constructor() Y(\"Y was called\") X(\"X was called\") public {\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Calling Parent Contracts\"\n      description=\"An example of calling parent contracts in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.</p>\n<p>By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract A {\n    // This is called an event. You can emit events from your function\n    // and they are logged into the transaction log.\n    // In our case, this will be useful for tracing function calls.\n    event Log(string message);\n\n    function foo() public {\n        emit Log(\"A.foo called\");\n    }\n\n    function bar() public {\n        emit Log(\"A.bar called\");\n    }\n}\n\ncontract B is A {\n    function foo() public {\n        emit Log(\"B.foo called\");\n        A.foo();\n    }\n    function bar() public {\n        emit Log(\"B.bar called\");\n        super.bar();\n    }\n}\n\ncontract C is A {\n    function foo() public {\n        emit Log(\"C.foo called\");\n        A.foo();\n    }\n\n    function bar() public {\n        emit Log(\"C.bar called\");\n        super.bar();\n    }\n}\n\ncontract D is B, C {\n    // Try:\n    // - Call D.foo and check the transaction logs.\n    //   Although D inherits A, B and C, it only called C and then A.\n    // - Call D.bar and check the transaction logs\n    //   D called C, then B, and finally A.\n    //   Although super was called twice (by B and C) it only called A once. \n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Visibility\"\n      description=\"An example of external, internal, private and public functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Functions and state variables have to specify whether they can be accessed by other contracts.</p>\n<p>Fucntions can be declared as <code>public</code>, <code>private</code>, <code>internal</code> or <code>external</code>.</p>\n<p>State variables can be declared as <code>public</code>, <code>private</code>, or <code>internal</code> but not <code>external</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Base {\n    // Private function can only be called\n    // - inside this contract\n    // Contracts that inherit this contract cannot call this function.\n    function privateFunc() private pure returns (string memory) {\n        return \"private function called\";\n    }\n\n    function testPrivateFunc() public pure returns (string memory) {\n        return privateFunc();\n    }\n\n    // Internal function can be called\n    // - inside this contract\n    // - inside contracts that inherit this contract\n    function internalFunc() internal pure returns (string memory) {\n        return \"internal function called\";\n    }\n\n    function testInternalFunc() public pure returns (string memory) {\n        return internalFunc();\n    }\n\n    // Public functions can be called\n    // - inside this contract\n    // - inside contracts that inherit this contract\n    // - by other contracts and accounts\n    function publicFunc() public pure returns (string memory) {\n        return \"public function called\";\n    }\n\n    // External functions can only be called\n    // - by other contracts and accounts\n    function externalFunc() external pure returns (string memory) {\n        return \"external function called\";\n    }\n\n    // This function will not compile since we&#39;re trying to call\n    // an external function here.\n    // function testExternalFunc() public pure returns (string memory) {\n    //     return externalFunc();\n    // }\n\n    // State variables\n    string private privateVar = \"my private variable\";\n    string internal internalVar = \"my internal variable\";\n    string public publicVar = \"my public variable\";\n    // State variables cannot be external so this code won&#39;t compile.\n    // string external externalVar = \"my external variable\";\n}\n\ncontract Child is Base {\n    // Inherited contracts do not have access to private functions\n    // and state variables.\n    // function testPrivateFunc() public pure returns (string memory) {\n    //     return privateFunc();\n    // }\n\n    // Internal function call be called inside child contracts.\n    function testInternalFunc() public pure returns (string memory) {\n        return internalFunc();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Loop(props) {\n  return (\n    <Example\n      title=\"Loop\"\n      description=\"Example of looping in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Loop\n","const html = `<p>Looping in Solidity is tricky.</p>\n<p>The number of iteration in a loop can grow and spend more gas than the\ngas limit, causing your contract to stall.</p>\n<p>There are two gas limits to keep in mind.</p>\n<ul>\n<li>Transcation gas limit, set by the caller.</li>\n<li>Block gas limit</li>\n</ul>\n<p>Try to avoid writing loops that you cannot estimate the gas consumption.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Loop {\n    uint public count;\n\n    // This is a demonstration of transaction gas limit.\n    // Try:\n    // Set the gas limit to 100000 and loop(100).\n    // It should throw an error after spending all the gas.\n    function loop(uint n) public returns (uint) {\n        for (uint i = 0; i &lt; n; i++) {\n            count++;\n        }\n\n        return count;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Enum(props) {\n  return (\n    <Example\n      title=\"Enum\"\n      description=\"Example of enums in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Enum\n","const html = `<p>Solidity supports enumerables and they are useful to keep track of state.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Order {\n    enum Status {\n        Pending,\n        Shipped,\n        Accepted,\n        Rejected,\n        Canceled\n    }\n\n    // Default value of an enum type is the first element listed in\n    // definition of the type, in this case \"Pending\"\n    Status public status;\n\n    // Try:\n    // - execute ship() and then acceptDelivery() or rejectDelivery()\n    // - re-deploy the contract and execute cancel()\n    // Any other order of execution fails.\n\n    function ship() public {\n        require(status == Status.Pending);\n        status = Status.Shipped;\n    }\n\n    function acceptDelivery() public {\n        require(status == Status.Shipped);\n        status = Status.Accepted;\n    }\n\n    function rejectDelivery() public {\n        require(status == Status.Shipped);\n        status = Status.Rejected;\n    }\n\n    function cancel() public {\n        require(status == Status.Pending);\n        status = Status.Canceled;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Mapping(props) {\n  return (\n    <Example\n      title=\"Mapping\"\n      description=\"Example of using mapping in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Mapping\n","const html = `<p>Maps are created with the syntax <code>mapping(keyType =&gt; valueType)</code>.</p>\n<p><code>keyType</code> can be value types such as <code>uint</code>, <code>address</code> or <code>bytes</code>.</p>\n<p><code>valueType</code> can be any type including another mapping or an array.</p>\n<p>Mappings are not iterable.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Mapping {\n    // Mapping from address to uint\n    mapping(address =&gt; uint) public myMap;\n    // Nested mapping (mapping from address to another mapping)\n    mapping(address =&gt; mapping(address =&gt; uint)) public nested;\n\n    function get(address _addr) public view returns (uint) {\n         // Mapping always returns a value.\n         // If the value was never set, it will return the default value.\n        return myMap[_addr];\n    }\n\n    function set(address _addr, uint _i) public {\n        // Update the value at this address\n        myMap[_addr] = _i;\n    }\n\n    function remove(address _addr) public {\n        // Delete resets the value to the default value.\n        delete myMap[_addr];\n    }\n}\n\ncontract NestedMapping {\n    mapping(address =&gt; mapping(address =&gt; uint)) public nested;\n\n    function get(address _addr1, address _addr2) public view returns (uint) {\n         // You can get values from a nested mapping even when it is not\n         // initialized\n        return  nested[_addr1][_addr2];\n    }\n\n    function set(address _addr1, address _addr2, uint _i) public {\n        nested[_addr1][_addr2] = _i;\n    }\n\n    function remove(address _addr1, address _addr2) public {\n        delete nested[_addr1][_addr2];\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Array(props) {\n  return (\n    <Example\n      title=\"Array\"\n      description=\"Learn about arrays in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Array\n","const html = `<p>Array can have a compile-time fixed size or a dynamic size.</p>\n<p>Solidity creates a <code>getter</code> for <code>public</code> arrays.</p>\n<p>Deleting an element creates a gap in the array. One trick to keep the array</p>\n<p>compact is to move the last element into the place to delete.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Array {\n    // Several ways to initialize an array\n    uint[] public myArray;\n    uint[] public myArray2 = [1,2,3];\n    uint[10] public myFixedSizeArray;\n\n    function get(uint i) public view returns (uint) {\n      return myArray[i];\n    }\n\n    function push(uint i) public {\n        myArray.push(i);\n    }\n\n    function pop() public {\n        myArray.pop();\n    }\n\n    function getLength() public view returns (uint) {\n        return myArray.length;\n    }\n\n    function remove(uint index) public {\n        delete myArray[index];\n    }\n}\n\ncontract CompactArray {\n    uint[] public myArray;\n\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        myArray[index] = myArray[myArray.length - 1];\n        // Remove the last element\n        myArray.pop();\n    }\n\n    function test() public {\n        myArray.push(1);\n        myArray.push(2);\n        myArray.push(3);\n        myArray.push(4);\n        // [1, 2, 3, 4]\n\n        remove(1);\n        // [1, 4, 3]\n\n        assert(myArray.length == 3);\n        assert(myArray[0] == 1);\n        assert(myArray[1] == 4);\n        assert(myArray[2] == 3);\n\n        remove(2);\n        // [1, 4]\n\n        assert(myArray.length == 2);\n        assert(myArray[0] == 1);\n        assert(myArray[1] == 4);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Structs\"\n      description=\"An example of how to use structs in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You can define your own type by creating a <code>struct</code>.</p>\n<p>They are useful for grouping togther related data.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Todos {\n    struct Todo {\n        string text;\n        bool completed;\n    }\n\n    // An array of &#39;Todo&#39; structs\n    Todo[] public todos;\n\n    function create(string memory _text) public {\n        // 3 ways to initialize a struct\n        // - calling it like a function\n        todos.push(Todo(_text, false));\n\n        // key value mapping\n        todos.push(Todo({\n            text: _text,\n            completed: false\n        }));\n\n        // initialize an emoty struct and then update it\n        Todo memory todo;\n        todo.text = _text;\n        // todo.completed initialized to false\n\n        todos.push(todo);\n    }\n\n    // Solidity automatically created a getter for&#39; todos&#39; so\n    // you don&#39;t actually need this function.\n    function get(uint _index) public view\n        returns (string memory text, bool completed)\n    {\n        Todo storage todo = todos[_index];\n        return (todo.text, todo.completed);\n    }\n\n    // update text\n    function update(uint _index, string memory _text) public {\n        Todo storage todo = todos[_index];\n        todo.text = _text;\n    }\n    // update completed\n    function toggleCompleted(uint _index) public {\n        Todo storage todo = todos[_index];\n        todo.completed = !todo.completed;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction NewContract(props) {\n  return (\n    <Example\n      title=\"Contract that Create other Contracts\"\n      description=\"Learn how to create new contract from inside a contract with Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default NewContract\n","const html = `<p>Contracts can be created by other contracts using the <code>new</code> keyword.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Car {\n    address public owner;\n    string public model;\n\n    constructor(address _owner, string memory _model) public payable {\n        owner = _owner;\n        model = _model;\n    }\n}\n\ncontract CarFactory {\n    Car[] public cars;\n\n    function create(address _owner, string memory _model) public {\n        Car car = new Car(_owner, _model);\n        cars.push(car);\n    }\n\n    function createAndSendEther(address _owner, string memory _model)\n        public\n        payable\n    {\n        Car car = (new Car).value(msg.value)(_owner, _model);\n        cars.push(car);\n    }\n\n    function getCar(uint _index)\n        public\n        view\n        returns (address owner, string memory model, uint balance)\n    {\n        Car car = cars[_index];\n\n        return (car.owner(), car.model(), address(car).balance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction CallingContract(props) {\n  return (\n    <Example\n      title=\"Calling Other Contract\"\n      description=\"In Solidity, contract can call other contracts in several ways.\"\n      html={html}\n    />\n  )\n}\n\nexport default CallingContract\n","const html = `<p>Contract can call other contracts in 2 ways.</p>\n<p>The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.</p>\n<p>Another way to call other contracts is to use the low-level <code>call</code>.</p>\n<p>This method is not recommended.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Callee {\n    uint public x;\n    uint public value;\n\n    function setX(uint _x) public returns (uint) {\n        x = _x;\n        return x;\n    }\n\n    function setXandSendEther(uint _x) public payable returns (uint, uint) {\n        x = _x;\n        value = msg.value;\n\n        return (x, value);\n    }\n}\n\ncontract Caller {\n    function setX(Callee _callee, uint _x) public {\n        uint x = _callee.setX(_x);\n    }\n\n    function setXFromAddress(address _addr, uint _x) public {\n        Callee callee = Callee(_addr);\n        callee.setX(_x);\n    }\n\n    function setXandSendEther(Callee _callee, uint _x) public payable {\n        (uint x, uint value) = _callee.setXandSendEther.value(msg.value)(_x);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Call(props) {\n  return (\n    <Example\n      title=\"Call\"\n      description=\"In Solidity call is a low level function to interact with other contracts.\"\n      html={html}\n    />\n  )\n}\n\nexport default Call\n","const html = `<p><code>call</code> is a low level function to interact with other contracts.</p>\n<p>This is not the recommend way, but this might be the only way if your contract</p>\n<p>does not have the ABI for the other contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Receiver {\n    event Received(address caller, uint amount, string message);\n\n    function () external payable {\n        emit Received(msg.sender, msg.value, \"Fallback was called\");\n    }\n\n    function foo(string memory _message, uint _x) public payable returns (uint) {\n        emit Received(msg.sender, msg.value, _message);\n\n        return _x + 1;\n    }\n}\n\ncontract Caller {\n    event Response(bool success, bytes data);\n\n    // Let&#39;s imagine that contract B does not have the source code for\n    // contract A, but we do know the address of A and the function to call.\n    function testCallFoo(address payable _addr) public payable {\n        // You can send ether and specify a custom gas amount\n        (bool success, bytes memory data) = _addr.call.value(msg.value).gas(5000)(\n            abi.encodeWithSignature(\"foo(string,uint256)\", \"call foo\", 123)\n        );\n\n        emit Response(success, data);\n    }\n\n    // Calling a function that does not exist triggers the fallback function.\n    function testCallDoesNotExist(address _addr) public {\n        (bool success, bytes memory data) = _addr.call(\n            abi.encodeWithSignature(\"doesNotExist()\")\n        );\n\n        emit Response(success, data);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Delegatecall(props) {\n  return (\n    <Example\n      title=\"Delegatecall\"\n      description=\"Example of how to use deletegatecall in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Delegatecall\n","const html = `<p><code>delegatecall</code> is a low level function similar to <code>call</code>.</p>\n<p>When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>&#39;s code is excuted</p>\n<p>with contract <code>A</code>&#39;s storage, <code>msg.sender</code> and <code>msg.value</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// NOTE: Firts deploy this contract\ncontract B {\n    // NOTE: storage layout must be the same as contract A\n    uint public num;\n    address public sender;\n    uint public value;\n\n    function setVars(uint _num) public payable {\n        num = _num;\n        sender = msg.sender;\n        value = msg.value;\n    }\n}\n\ncontract A {\n    uint public num;\n    address public sender;\n    uint public value;\n\n    function setVars(address _contract, uint _num) public payable {\n        // A&#39;s storage is set, B is not modified.\n        (bool success, bytes memory data) = _contract.delegatecall(\n            abi.encodeWithSignature(\"setVars(uint256)\", _num)\n        );\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Library(props) {\n  return (\n    <Example\n      title=\"Library\"\n      description=\"Example of how to write and use libraries in your Solidity code\"\n      html={html}\n    />\n  )\n}\n\nexport default Library\n","const html = `<p>Libraries are similar to contracts, but you can&#39;t declare any state variable and\nyou can&#39;t send ether.</p>\n<p>A library is embedded into the contract if all library functions are internal.</p>\n<p>Otherwise the library must be deployed and then linked before the contract is deployed.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint) {\n        uint z = x + y;\n        require(z &gt;= x, \"uint overflow\");\n\n        return z;\n    }\n}\n\ncontract TestSafeMath {\n    using SafeMath for uint;\n\n    uint public MAX_UINT = 2 ** 256 - 1;\n\n    function testAdd(uint x, uint y) public pure returns (uint) {\n        return x.add(y);\n    }\n}\n\n// Array function to delete element at index and re-organize the array\n// so that their are no gaps between the elements.\nlibrary Array {\n    function remove(uint[] storage arr, uint index) public {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n        arr.pop();\n    }\n}\n\ncontract TestArray {\n    using Array for uint[];\n\n    uint[] public arr;\n\n    function testArrayRemove() public {\n        for (uint i = 0; i &lt; 3; i++) {\n            arr.push(i);\n        }\n\n        arr.remove(1);\n\n        assert(arr.length == 2);\n        assert(arr[0] == 0);\n        assert(arr[1] == 2);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Ether and Wei\"\n      description=\"An example of Ether and Wei in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>One dollar is equal to 100 cent.</p>\n<p>Similarly, one <code>Ether</code> is equal to 10^18 <code>Wei</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract EtherUnits {\n  uint public oneWei = 1 wei;\n  uint public oneEther = 1 ether;\n\n  function testOneWei() public pure returns (bool) {\n    return 1 wei == 1;\n  }\n\n  function testOneEther() public pure returns (bool) {\n    return 1 ether == 1e18 wei;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Gas and Gas Price\"\n      description=\"An example of gas and gas limit in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Transactions run on <code>gas</code>. You pay <code>gas price * gas</code> in Ether.</p>\n<p>You specify the gas price.</p>\n<p>Transactions with higher gas price will be processed faster.</p>\n<p>Unspent gas will be refunded.</p>\n<p>There are 2 upper bounds to the amount of gas you can spend</p>\n<ul>\n<li><code>gas limit</code> (max amount of gas your willing to use for your transaction, set by you)</li>\n<li><code>block gas limit</code> (max amount of gas allowed in a block, set by the network)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Gas {\n  // Transactions spend gas even if it does nothing.\n  function doNothing() public {}\n\n  // Getter functions cost no gas when called by either\n  // - an external account\n  // - other getter functions inside this contract\n  // - other getter functions from another contract\n  function getNothing() public pure {}\n\n  // In a transaction, you pay for the total gas used by the function.\n  // If a function calls two other functions,\n  // - a getter function and\n  // - a function to create a transaction,\n  // then you pay for the total gas used by the two functions.\n  function getNothingAndDoNothing() public {\n    getNothing();\n    doNothing();\n  }\n\n  // Transaction costs in ether = gas price * gas used\n  // Unspent gas are refunded.\n  function testGasRefund() public returns (uint) {\n    return tx.gasprice;\n  }\n\n  // Using up all the gas causes an error and reverts state changes.\n  // Gas spent are not refunded.\n  uint public i = 0;\n\n  function forever() public {\n    while(true) {\n      i += 1;\n    }\n  }\n\n  // Block gas limit\n  function getBlockGasLimit() public view returns (uint) {\n    return block.gaslimit;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Keccak256(props) {\n  return (\n    <Example\n      title=\"Hashing with Keccak256\"\n      description=\"Example of hashing using Keccak256 in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Keccak256\n","const html = `<p><code>keccak256</code> computes the Keccak-256 hash of the input.</p>\n<p>Some use cases are:</p>\n<ul>\n<li>Creating an deterministic unique ID from a input</li>\n<li>Commit-Reveal scheme</li>\n<li>Compact cryptographic signature (by signing the hash instead of a larger input)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract HashFunction {\n    function hash(string memory _text, uint _num, address _addr)\n        public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_text, _num, _addr));\n    }\n\n    // Example of hash collision\n    // Hash collision can occur when you pass more than one dynamic data type\n    // to abi.encodePacked. In such case, you should use abi.encode instead.\n    function collision(string memory _text, string memory _anotherText)\n        public pure returns (bytes32)\n    {\n        // encodePacked(AAA, BBB) -&gt; AAABBB\n        // encodePacked(AA, ABBB) -&gt; AAABBB\n        return keccak256(abi.encodePacked(_text, _anotherText));\n    }\n}\n\ncontract GuessTheMagicWord {\n    bytes32 public answer =\n        0x60298f78cc0b47170ba79c10aa3851d7648bd96f2f8e46a19dbc777c36fb0c00;\n\n    // Magic word is \"Solidity\"\n    function guess(string memory _word) public view returns (bool) {\n        return keccak256(abi.encodePacked(_word)) == answer;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction Signature(props) {\n  return (\n    <Example\n      title=\"Verifying Signature\"\n      description=\"An example of how to verify signatures in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default Signature\n","const html = `<p>Messages can be signed off chain and then verified on chain using a smart contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n/* Signature Verification\n\nHow to Sign and Verify\n# Signing\n1. Create message to sign\n2. Hash the message\n3. Sign the hash (off chain, keep your private key secret)\n\n# Verify\n1. Recreate hash from the original message\n2. Recover signer from signature and hash\n3. Compare recovered signer to claimed signer\n\n*/\n\ncontract VerifySignature {\n    /* 1. Unlock MetaMask account\n    ethereum.enable()\n    */\n\n    /* 2. Get message hash to sign\n    getMessageHash(\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\n        123,\n        \"coffee and donuts\",\n        1\n    )\n\n    hash = 0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd\n    */\n    function getMessageHash(\n        address _to, uint _amount, string memory _message, uint _nonce\n    )\n        public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_to, _amount, _message, _nonce));\n    }\n\n    /* 3. Sign message hash\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\n\n    Signature will be different for different accounts\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\\\x19Ethereum Signed Message\\\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\\\x19Ethereum Signed Message:\\\\n32\", _messageHash));\n    }\n\n    /* 4. Verify signature\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\n    amount = 123\n    message = \"coffee and donuts\"\n    nonce = 1\n    signature =\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function verify(\n        address _signer,\n        address _to, uint _amount, string memory _message, uint _nonce,\n        bytes memory signature\n    )\n        public pure returns (bool)\n    {\n        bytes32 messageHash = getMessageHash(_to, _amount, _message, _nonce);\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\n    }\n\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\n        public pure returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n        public pure returns (bytes32 r, bytes32 s, uint8 v)\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Multi-Sig Wallet\"\n      description=\"An example of multi-sig wallet in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Let&#39;s create an multi-sig wallet. Here are the specifications.</p>\n<p>The wallet owners can</p>\n<ul>\n<li>submit a transaction</li>\n<li>approve and revoke approval of pending transcations</li>\n<li>anyone can execute a transcation after enough owners has approved it.</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract MultiSigWallet {\n    event Deposit(address indexed sender, uint amount, uint balance);\n    event SubmitTransaction(\n        address indexed owner,\n        uint indexed txIndex,\n        address indexed to,\n        uint value,\n        bytes data\n    );\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\n\n    address[] public owners;\n    mapping(address =&gt; bool) public isOwner;\n    uint public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        uint value;\n        bytes data;\n        bool executed;\n        mapping(address =&gt; bool) isConfirmed;\n        uint numConfirmations;\n    }\n\n    Transaction[] public transactions;\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender], \"not owner\");\n        _;\n    }\n\n    modifier txExists(uint _txIndex) {\n        require(_txIndex &lt; transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint _txIndex) {\n        require(!transactions[_txIndex].isConfirmed[msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor(address[] memory _owners, uint _numConfirmationsRequired) public {\n        require(_owners.length &gt; 0, \"owners required\");\n        require(\n            _numConfirmationsRequired &gt; 0 &amp;&amp; _numConfirmationsRequired &lt;= _owners.length,\n            \"invalid number of required confirmations\"\n        );\n\n        for (uint i = 0; i &lt; _owners.length; i++) {\n            address owner = _owners[i];\n\n            require(owner != address(0), \"invalid owner\");\n            require(!isOwner[owner], \"owner not unique\");\n\n            isOwner[owner] = true;\n            owners.push(owner);\n        }\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    function () payable external {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    function submitTransaction(address _to, uint _value, bytes memory _data)\n        public\n        onlyOwner\n    {\n        uint txIndex = transactions.length;\n\n        transactions.push(Transaction({\n            to: _to,\n            value: _value,\n            data: _data,\n            executed: false,\n            numConfirmations: 0\n        }));\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }\n\n    function confirmTransaction(uint _txIndex)\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n        notConfirmed(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        transaction.isConfirmed[msg.sender] = true;\n        transaction.numConfirmations += 1;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n    }\n\n    function executeTransaction(uint _txIndex)\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(\n            transaction.numConfirmations &gt;= numConfirmationsRequired,\n            \"cannot execute tx\"\n        );\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call.value(transaction.value)(transaction.data);\n        require(success, \"tx failed\");\n\n        emit ExecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function revokeConfirmation(uint _txIndex)\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(transaction.isConfirmed[msg.sender], \"tx not confirmed\");\n\n        transaction.isConfirmed[msg.sender] = false;\n        transaction.numConfirmations -= 1;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    function getOwners() public view returns (address[] memory) {\n        return owners;\n    }\n\n    function getTransactionCount() public view returns (uint) {\n        return transactions.length;\n    }\n\n    function getTransaction(uint _txIndex)\n        public\n        view\n        returns (address to, uint value, bytes memory data, bool executed, uint numConfirmations)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.value,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations\n        );\n    }\n\n    function isConfirmed(uint _txIndex, address _owner)\n        public\n        view\n        returns (bool)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return transaction.isConfirmed[_owner];\n    }\n}\n</code></pre>\n<p>Here is a contract to test sending transactions from the multi-sig wallet</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract TestContract {\n    uint public i;\n\n    function callMe(uint j) public {\n        i += j;\n    }\n\n    function getData() public view returns (bytes memory) {\n        return abi.encodeWithSignature(\"callMe(uint256)\", 123);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return <Example title=\"Dividend\" description=\"Dividend\" html={html} />\n}\n","const html = `<p>A contract that pays dividend to shareholders should</p>\n<ul>\n<li>receive payment</li>\n<li>for simplicity, have a fixed distribution of shares</li>\n<li>shareholders can withdraw dividend at any time</li>\n</ul>\n<p>We let the user withdraw their dividend. For more information about <code>Push vs Pull</code> contract design, check out <a href=\"https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls\">here</a></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Dividend {\n    event AddShareholder(address indexed account, uint shares);\n    event Deposit(address indexed sender, uint amount);\n    event Withdraw(address indexed account, uint amount);\n\n    uint public totalShares;\n    mapping(address =&gt; uint) public shares;\n\n    // We keep track of withdrawn amount so that the amount a shareholder can\n    // withdraw can be calculated.\n    uint public totalWithdrawn;\n    mapping(address =&gt; uint) withdrawn;\n\n    constructor(address[] memory _shareholders, uint[] memory _shares) public {\n        require(_shareholders.length &gt; 0, \"Shareholder addresses required\");\n        require(_shareholders.length == _shares.length, \"shareholders.length != shares.length\");\n\n        for (uint i = 0; i &lt; _shareholders.length; i++) {\n            _addShareholder(_shareholders[i], _shares[i]);\n        }\n    }\n\n    function () external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // Warning: For simplicity, we skip checks on arithmetic overflows.\n    function withdraw(address payable account) public {\n        require(shares[account] &gt; 0, \"Not a shareholder\");\n\n        uint totalReceived = address(this).balance + totalWithdrawn;\n\n        uint amount = totalReceived * shares[account] / totalShares - withdrawn[account];\n\n        require(amount &gt; 0, \"Payment amount must be &gt; 0\");\n\n        withdrawn[account] += amount;\n        totalWithdrawn += amount;\n\n        account.transfer(amount);\n\n        emit Withdraw(account, amount);\n    }\n\n    // Helper function to get balance of this contract.\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    // Private function to add shareholder.\n    function _addShareholder(address _account, uint _shares) private {\n        require(_account != address(0), \"Invalid shareholder address\");\n        require(_shares &gt; 0, \"Shares must be &gt; 0\");\n        require(shares[_account] == 0, \"Shareholder already added\");\n\n        shares[_account] = _shares;\n        totalShares += _shares;\n\n        emit AddShareholder(_account, _shares);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nfunction PaymentChannel(props) {\n  return (\n    <Example\n      title=\"Payment Channel\"\n      description=\"An example of payment channels in Solidity\"\n      html={html}\n    />\n  )\n}\n\nexport default PaymentChannel\n","const html = `<p>Payment channels allow participants to repeatedly transfer Ether off chain.</p>\n<p>Here is how this contract is used:</p>\n<ul>\n<li><code>Alice</code> deploys the contract, funding it with some Ether.</li>\n<li><code>Alice</code> authorises a payment by signing a message (off chain) and sends the signed message to <code>Bob</code>.</li>\n<li><code>Bob</code> claims his payment by presenting the signed message to the smart contract.</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract PaymentChannel {\n  address payable public sender;\n  address payable public recipient;\n  uint public expiration;\n\n  constructor(address payable _recipient, uint duration) public payable {\n    sender = msg.sender;\n    recipient = _recipient;\n    expiration = now + duration;\n  }\n\n  function isValidSignature(uint amount, bytes memory signature)\n    internal\n    view\n    returns (bool)\n  {\n    bytes32 message = prefixed(keccak256(abi.encodePacked(this, amount)));\n\n    return recoverSigner(message, signature) == sender;\n  }\n\n  // The recipient can close the channel at any time by presenting a\n  // signed amount from the sender. The recipient will be sent that amount,\n  // and the remainder will go back to the sender\n  function close(uint amount, bytes memory signature) public {\n    require(msg.sender == recipient);\n    require(isValidSignature(amount, signature));\n\n    recipient.transfer(amount);\n    selfdestruct(sender);\n  }\n\n  // Sender can extend the expiration at any time\n  function extend(uint newExpiration) public {\n    require(msg.sender == sender);\n    require(newExpiration &gt; expiration);\n\n    expiration = newExpiration;\n  }\n\n  // If the timeout is reached without the recipient closing the channel,\n  // then the Ether is released back to the sender.\n  function claimTimeout() public {\n    require(now &gt;= expiration);\n    selfdestruct(sender);\n  }\n\n  function recoverSigner(bytes32 message, bytes memory sig)\n    internal\n    pure\n    returns (address)\n  {\n    (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\n\n    // If you are using Remix IDE, you may need to hard code\n    // v = 0x1b, due to a bug\n    return ecrecover(message, v, r, s);\n  }\n\n  /// builds a prefixed hash to mimic the behavior of eth_sign.\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked(\"\\\\x19Ethereum Signed Message:\\\\n32\", hash));\n  }\n\n  function splitSignature(bytes memory sig)\n    internal\n    pure\n    returns (uint8 v, bytes32 r, bytes32 s)\n  {\n    require(sig.length == 65);\n\n    assembly {\n      // first 32 bytes, after the length prefix\n      r := mload(add(sig, 32))\n      // second 32 bytes\n      s := mload(add(sig, 64))\n      // final byte (first byte of the next 32 bytes)\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    return (v, r, s);\n  }\n}\n</code></pre>\n`\n\nexport default html\n","const html = `<p>Merkle tree allows you to cryptographically prove that an element is contained</p>\n<p>in a set without revealing the entire set.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract MerkleProof {\n    function verify(\n        bytes32[] memory proof, bytes32 root, bytes32 leaf, uint index\n    )\n        public pure returns (bool)\n    {\n        bytes32 hash = leaf;\n\n        for (uint i = 0; i &lt; proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (index % 2 == 0) {\n                hash = keccak256(abi.encodePacked(hash, proofElement));\n            } else {\n                hash = keccak256(abi.encodePacked(proofElement, hash));\n            }\n\n            index = index / 2;\n        }\n\n        return hash == root;\n    }\n}\n\ncontract TestMerkleProof is MerkleProof {\n    bytes32[] public hashes;\n\n    constructor() public {\n        string[4] memory transactions = [\n            \"alice -&gt; bob\",\n            \"bob -&gt; dave\",\n            \"carol -&gt; alice\",\n            \"dave -&gt; bob\"\n        ];\n\n        for (uint i = 0; i &lt; transactions.length; i++) {\n            hashes.push(keccak256(abi.encodePacked(transactions[i])));\n        }\n\n        uint n = transactions.length;\n        uint offset = 0;\n\n        while (n &gt; 0) {\n            for (uint i = 0; i &lt; n - 1; i+=2) {\n                hashes.push(\n                    keccak256(abi.encodePacked(\n                        hashes[offset + i],\n                        hashes[offset + i + 1]\n                    ))\n                );\n            }\n            offset += n;\n            n = n / 2;\n        }\n    }\n\n    function getRoot() public view returns (bytes32) {\n        return hashes[hashes.length - 1];\n    }\n\n    /* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport styles from \"./App.module.css\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport Home from \"./pages/Home\"\nimport routes from \"./routes\"\n\nfunction App(props) {\n  return (\n    <div className={styles.component}>\n      <Header />\n      <div className={styles.main}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            {routes.map(route => (\n              <Route\n                key={route.path}\n                path={route.path}\n                component={route.component}\n              />\n            ))}\n            <Route component={Home} />\n          </Switch>\n        </Router>\n      </div>\n      <div className={styles.footer}>\n        <Footer />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.da793b47.svg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Footer_component__2wm-B\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Home_component__3V2hY\",\"header\":\"Home_header__Olcyu\"};"],"sourceRoot":""}