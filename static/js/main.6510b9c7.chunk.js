(this["webpackJsonpsolidity-by-example"]=this["webpackJsonpsolidity-by-example"]||[]).push([[0],{22:function(n,e,t){n.exports=t.p+"static/media/logo.da793b47.svg"},231:function(n,e,t){},234:function(n,e,t){"use strict";t.r(e);var a=t(0),r=t.n(a),i=t(15),o=(t(33),t(25)),c=t(5),s=(t(34),t(35),t(22)),l=t.n(s);var u=function(n){return r.a.createElement("div",{className:"Header"},r.a.createElement("a",{href:"/"},r.a.createElement("img",{src:l.a,alt:"logo",className:"Header-logo"})),r.a.createElement("h3",null,r.a.createElement("a",{href:"/"},r.a.createElement("div",null,"Solidity by Example"),r.a.createElement("div",null,"version 0.5.11"))))},d=t(8),p=t(9),m=t(11),h=t(10),g=t(12),f=(t(36),function(n){function e(){return Object(d.a)(this,e),Object(m.a)(this,Object(h.a)(e).apply(this,arguments))}return Object(g.a)(e,n),Object(p.a)(e,[{key:"render",value:function(){return r.a.createElement("p",{className:"footer"},r.a.createElement("a",{href:"mailto:contact@solidity-by-example.org"},"contact@solidity-by-example.org")," ","|"," ",r.a.createElement("a",{href:"https://github.com/solidity-by-example/solidity-by-example.github.io"},"source")," ","|"," ",r.a.createElement("a",{href:"https://github.com/solidity-by-example/solidity-by-example.github.io/tree/gh-pages#license"},"license"))}}]),e}(a.Component)),b=t(23),y=t.n(b);var v=function(n){var e=n.title,t=n.description;return r.a.createElement(y.a,null,r.a.createElement("title",null,e),r.a.createElement("meta",{name:"Description",content:t}))};t(43);var w=function(){return r.a.createElement("div",{className:"Home"},r.a.createElement(v,{title:"Solidity by Example",description:"Learn smart contract programming using Solidity"}),r.a.createElement("h1",{className:"Home-header"},r.a.createElement("a",{href:"/"},"Solidity by Example")),r.a.createElement("div",{className:"Home-main"},r.a.createElement("p",null,"an introduction to"," ",r.a.createElement("a",{href:"https://solidity.readthedocs.io"},"Solidity")," using examples"),r.a.createElement("ul",{className:"Home-list"},r.a.createElement("li",null,r.a.createElement("a",{href:"/hello-world"},"Hello World")),r.a.createElement("li",null,r.a.createElement("a",{href:"/state-variables"},"State Variables")),r.a.createElement("li",null,r.a.createElement("a",{href:"/ether-units"},"Ether and Wei")),r.a.createElement("li",null,r.a.createElement("a",{href:"/gas"},"Gas and Gas Price")),r.a.createElement("li",null,r.a.createElement("a",{href:"/function"},"Function")),r.a.createElement("li",null,r.a.createElement("a",{href:"/view-and-pure-functions"},"View and Pure Functions")),r.a.createElement("li",null,r.a.createElement("a",{href:"/function-modifier"},"Function Modifier")),r.a.createElement("li",null,r.a.createElement("a",{href:"/constructor"},"Constructor")),r.a.createElement("li",null,r.a.createElement("a",{href:"/inheritance"},"Inheritance")),r.a.createElement("li",null,r.a.createElement("a",{href:"/super"},"Calling Parent Contracts")),r.a.createElement("li",null,r.a.createElement("a",{href:"/shadowing-inherited-state-variables"},"Shadowing Inherited State Variables")),r.a.createElement("li",null,r.a.createElement("a",{href:"/visibility"},"Visibility")),r.a.createElement("li",null,r.a.createElement("a",{href:"/events"},"Events")),r.a.createElement("li",null,r.a.createElement("a",{href:"/error"},"Error")),r.a.createElement("li",null,r.a.createElement("a",{href:"/loop"},"Loop")),r.a.createElement("li",null,r.a.createElement("a",{href:"/array"},"Array")),r.a.createElement("li",null,r.a.createElement("a",{href:"/mapping"},"Mapping")),r.a.createElement("li",null,r.a.createElement("a",{href:"/enum"},"Enum")),r.a.createElement("li",null,r.a.createElement("a",{href:"/structs"},"Structs")),r.a.createElement("li",null,r.a.createElement("a",{href:"/payable"},"Payable")),r.a.createElement("li",null,r.a.createElement("a",{href:"/sending-ether"},"Sending Ether")),r.a.createElement("li",null,r.a.createElement("a",{href:"/fallback"},"Fallback")),r.a.createElement("li",null,r.a.createElement("a",{href:"/call"},"Call")),r.a.createElement("li",null,r.a.createElement("a",{href:"/delegatecall"},"Delegatecall")),r.a.createElement("li",null,r.a.createElement("a",{href:"/Library"},"Library")),r.a.createElement("li",null,r.a.createElement("a",{href:"/new-contract"},"Creating Contract from Other Contract")),r.a.createElement("li",null,r.a.createElement("a",{href:"/calling-contract"},"Calling Other Contract")),r.a.createElement("li",null,r.a.createElement("a",{href:"/self-destruct"},"Self Destruct")),r.a.createElement("li",null,r.a.createElement("a",{href:"/hashing"},"Hashing with Keccak256")),r.a.createElement("li",null,r.a.createElement("a",{href:"/signature"},"Verifying Signature")),r.a.createElement("li",null,r.a.createElement("a",{href:"/import"},"Import")),r.a.createElement("li",null,r.a.createElement("a",{href:"/safe-math"},"Safe Math"))),r.a.createElement("h3",null,"Hacks"),r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement("a",{href:"/re-entrancy"},"Re-Entrancy"))),r.a.createElement("h3",null,"Applications"),r.a.createElement("ul",null,r.a.createElement("li",null,r.a.createElement("a",{href:"/multi-sig-wallet"},"Multi-Sig Wallet")),r.a.createElement("li",null,r.a.createElement("a",{href:"/dividend"},"Dividend")),r.a.createElement("li",null,r.a.createElement("a",{href:"/payment-channel"},"Payment Channel")),r.a.createElement("li",null,r.a.createElement("a",{href:"/merkle-tree"},"Merkle Tree")))))},x=t(16),E=t.n(x),S=(t(230),t(24)),_=t.n(S),k=function(n){function e(){return Object(d.a)(this,e),Object(m.a)(this,Object(h.a)(e).apply(this,arguments))}return Object(g.a)(e,n),Object(p.a)(e,[{key:"componentDidMount",value:function(){_()(E.a),E.a.initHighlightingOnLoad()}},{key:"render",value:function(){return r.a.createElement("div",{dangerouslySetInnerHTML:{__html:this.props.html}})}}]),e}(a.Component);t(231);var A=function(n){var e=n.title;return r.a.createElement("div",{className:"Example"},r.a.createElement(v,Object.assign({},n,{title:"".concat(e," | Learn Solidity by Example")})),r.a.createElement("h2",null,e),r.a.createElement(k,{html:n.html}),r.a.createElement("p",null,"Try on"," ",r.a.createElement("a",{href:"https://remix.ethereum.org",target:"__blank"},"Remix")))},T=function(n){return r.a.createElement(A,{title:"Hello World",description:"Hello World in Solidity",html:'<p><code>pragma</code> specifies the compiler version of Solidity.</p>\n<pre><code class="language-solidity">// compiler version must be greater than or equal to 0.5.11 and less than 0.6.0\npragma solidity ^0.5.11;\n\ncontract HelloWorld {\n  string public greet = "Hello World!";\n}\n</code></pre>\n'})},C=function(n){return r.a.createElement(A,{title:"State Variables",description:"An example of how to get and set state variables in Solidity",html:'<p>Variables stored on the blockchain are called <code>state variables</code>.</p>\n<p><code>State variables</code> are declared inside a contract, but outside functions.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract SimpleStorage {\n    // These varaibles will be stored on the blockchain.\n    string public text = "Hello";\n    uint public i = 123;\n\n    function doSomething() public {\n        // These variables will not be stored on the blockchain.\n        string memory text = "Test";\n        uint i = 456;\n    }\n\n    // Function to set text.\n    function set(string memory _text) public {\n        text = _text;\n    }\n\n    // Function to get text.\n    // Actually we don&#39;t need this function. The compiler automatically\n    // creates getter functions for all public variables.\n    function get() public view returns (string memory) {\n        return text;\n    }\n}\n</code></pre>\n'})};var I=function(n){return r.a.createElement(A,{title:"Safe Math",description:"An example of how to use SafeMath in Solidity",html:'<p>Solidity overflow integers as if nothing is wrong. It would be nice if it threw an error.</p>\n<p>So we use <code>SafeMath</code> library by <a href="https://openzeppelin.org/">OpenZeppelin</a>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n// Import SafeMath library from github (this import only works on Remix).\nimport "https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol";\n\ncontract Math {\n    // Include the SafeMath library inside this contract\n    using SafeMath for uint;\n\n    // uint is aliase for uint256 (unsigned integer ranging from 0 to 2 ** 256 - 1)\n    uint public max = 2**256 - 1;\n    // Variables initialize to their default value, 0 in this case.\n    uint public min;\n\n    // Try:\n    // add(1, 2)\n    // add(0, -1)\n    function add(uint x, uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Arithmetic overflow does not throw any error.\n    function overflow() public view returns (uint) {\n        return max + 1; // returns 0\n    }\n\n    function underflow() public view returns (uint) {\n        return min - 1; // return 2 ** 256 - 1\n    }\n\n    // SafeMath.add throws an error when an integer overflows.\n    // Try:\n    // safeAdd(2 ** 256 - 1, 1)\n    function safeAdd(uint x, uint y) public view returns (uint) {\n        return x.add(y);\n    }\n\n    // SafeMath.sub throws an error when an integer underflows.\n    // Try:\n    // safeSub(0, 1)\n    function safeSub(uint x, uint y) public view returns (uint) {\n        return x.sub(y);\n    }\n}\n</code></pre>\n'})};var F=function(n){return r.a.createElement(A,{title:"Payable",description:"An example of how to use the keyword payable in Solidity",html:'<p>Functions and addresses declared <code>payable</code> can receive <code>ether</code> into the contract.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Wallet {\n    event Deposit(address sender, uint amount, uint balance);\n    event Withdraw(uint amount, uint balance);\n    event Transfer(address to, uint amount, uint balance);\n\n    // Payable address can receive Ether\n    address payable public owner;\n\n    constructor() public payable {\n        owner = msg.sender;\n    }\n\n    // Try calling this function along with some ether.\n    // The balance of this contract will be automatically updated.\n    function deposit() public payable {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    // Try calling this function along with some ether.\n    // The function would throw an error since this function is not payable.\n    function notPayable() public {\n    }\n\n    modifier onlyOwner() {\n        require(msg.sender == owner, "Not owner");\n        _;\n    }\n\n    function withdraw(uint _amount) public onlyOwner {\n        owner.transfer(_amount);\n        emit Withdraw(_amount, address(this).balance);\n    }\n\n    function transfer(address payable _to, uint _amount) public onlyOwner {\n        _to.transfer(_amount);\n        emit Transfer(_to, _amount, address(this).balance);\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n'})};var B=function(n){return r.a.createElement(A,{title:"Sending Ether (send, transfer, call)",description:"An example of sending Ether in Solidity",html:'<p>You can send Ether to other contracts by <code>send</code>, <code>transfer</code>, or <code>call</code></p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n/*\n3 ways to send ether from a contract to another contract\n- transfer (2300 gas, throws error)\n- send     (2300 gas, returns bool)\n- call     (forward all gas or set gas, returns bool)\n\nNOTE: recommended method after 2019 Dec (use call and guard against re-entrancy)\n      guard against re-entrancy by\n      - making all state changes before calling other contracts\n      - using re-entrancy guard modifier\n*/\n\ncontract ReceiveEther {\n    // This is a special function called the fallback.\n    // The fallback function declared payable enables other contracts to\n    // send Ether by send, transfer, or call.\n    function () external payable {}\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract SendEther {\n    function sendViaTransfer(address payable _to) public payable {\n        // This function is no longer recommended for sending Ether.\n        _to.transfer(msg.value);\n    }\n\n    function sendViaSend(address payable _to) public payable {\n        // Send returns a boolean value indicating success or failure.\n        // This function is not recommended for sending Ether.\n        bool sent = _to.send(msg.value);\n        require(sent, "Failed to send Ether");\n    }\n\n    function sendViaCall(address payable _to) public payable {\n        // Call returns a boolean value indicating success or failure.\n        (bool sent, bytes memory data) = _to.call.value(msg.value)("");\n        require(sent, "Failed to send Ether");\n    }\n}\n</code></pre>\n'})};var q=function(n){return r.a.createElement(A,{title:"Fallback",description:"Example of how to use fallback in Solidity",html:'<p>A <code>fallback function</code> is an anonymous function that does not take any arguments and does not return anything.</p>\n<p>Fallback functions are executed when</p>\n<ul>\n<li>calling a function that does not exist</li>\n<li>sending Ether directly to a contract</li>\n</ul>\n<p><code>Fallback</code> functions have a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Fallback {\n    event Log(uint gas);\n\n    // Fallback function must be declared as external.\n    function () external payable {\n        // send / transfer (forwards 2300 gas to this fallback function)\n        // call (forwards all of the gas)\n        emit Log(gasleft());\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract SendToFallback {\n    function transferToFallback(address payable _to) public payable {\n        _to.transfer(msg.value);\n    }\n\n    function callFallback(address payable _to) public payable {\n        (bool sent,) = _to.call.value(msg.value)("");\n        require(sent, "Failed to send Ether");\n    }\n}\n</code></pre>\n'})};var D=function(n){return r.a.createElement(A,{title:"Re-Entrancy",description:"An example of re-entrancy attack in Solidity",html:'<p>Here is the setup. Contract <code>A</code> calls contract <code>B</code>.</p>\n<p>The <code>re-entracy</code> exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes\nit&#39;s execution.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n// Bank is a contract vulnerable to re-entrancy attack. Let&#39;s see why.\n// To illustrate this attack, we will use 2 accounts.\n// First account - Innocent user\n// Second account - Attacker\n\ncontract Bank {\n    mapping(address =&gt; uint) public balances;\n\n    // Using the first account, deposit 1 Ether in to this contract\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint amount) public {\n        if(balances[msg.sender] &gt;= amount) {\n            // Send Ether\n            (bool sent, ) = msg.sender.call.value(amount)("");\n            // Throw an error if send fails.\n            require(sent, "Failed to send ether");\n\n            balances[msg.sender] -= amount;\n        }\n    }\n\n    // Helper function to check the total Ether stored in this contract\n    function getTotalBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Hack {\n    Bank public bank;\n\n    constructor(Bank _bank) public {\n        bank = _bank;\n    }\n\n    // This fallback is called when the Bank contract sends Ether to this contract.\n    function () external payable {\n        if (address(bank).balance &gt;= msg.value) {\n            bank.withdraw(msg.value);\n        }\n    }\n\n    // Try:\n    // Using the second account, call this function sending 1 Ether.\n    function attack() public payable {\n        bank.deposit.value(msg.value)();\n        bank.withdraw(msg.value);\n        // This contract should now have 2 Ethers:\n        // 1 Ether stolen from the first account and\n        // 1 Ether returned to this contract.\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n'})};var M=function(n){return r.a.createElement(A,{title:"Self Destruct",description:"An example of how to delete your smart contract by calling seldestruct in Solidity",html:'<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remainig Ether stored in the contract to an\ndesignated address.</p>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n// To demonstrate how to force sending Ether to another contract:\n// 1. Deploy the SelfDestruct contract, funding 1 Ether.\n// 2. Deploy the Target contract.\n// 3. Execute kill function in SelfDestruct, passing the address of Target as input.\n// 4. Check the balance of Target contract. It should now have 1 Ether.\n\ncontract SelfDestruct {\n    constructor() public payable {\n    }\n\n    function kill(address payable to) public {\n        selfdestruct(to);\n    }\n}\n\ncontract Target {\n    // Notice this contract does not have a payable fallback,\n    // so we should not be able to send Ether to this contract...\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n'})};var O=function(n){return r.a.createElement(A,{title:"Events",description:"Example of how to emit events in Solidity",html:'<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cass for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Event {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, "Hello World!");\n        emit Log(msg.sender, "Hello EVM!");\n        emit AnotherLog();\n    }\n}\n</code></pre>\n'})};var P=function(n){return r.a.createElement(A,{title:"Error",description:"Example of how to throw errors in Solidity",html:'<p>You can throw an error by calling <code>assert</code>, <code>require</code> or <code>revert</code>.</p>\n<p>An error will undo all changes made to the state during a transaction.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Account {\n    uint public balance;\n    uint public constant MAX_UINT = 2 ** 256 - 1;\n\n    function deposit(uint _amount) public {\n        uint oldBalance = balance;\n        uint newBalance = balance + _amount;\n\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        // balance + _amount does not overflow if balance + _amount &gt;= balance\n        require(newBalance &gt;= oldBalance, "Overflow");\n\n        balance = newBalance;\n\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n        assert(balance &gt;= oldBalance);\n    }\n\n    function withdraw(uint _amount) public {\n        uint oldBalance = balance;\n\n        // balance - _amount does not underflow if balance &gt;= _amount\n        require(balance &gt;= _amount, "Underflow");\n\n        // Revert can be used to throw an error.\n        if (balance &lt; _amount) {\n            revert("Underflow");\n        }\n\n        balance -= _amount;\n\n        assert(balance &lt;= oldBalance);\n    }\n}\n</code></pre>\n'})};var L=function(n){return r.a.createElement(A,{title:"Import",description:"Learn how to import other Solidity files",html:'<p>You can import local and external files in Solidity.</p>\n<h3 id="local">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>\u251c\u2500\u2500 Import.sol\n\u2514\u2500\u2500 Foo.sol</code></pre><p>Foo.sol</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Foo {\n    string public name = "Foo";\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n// import Foo.sol from current directory\nimport "./Foo.sol";\n\ncontract Import {\n    // Initialize Foo.sol\n    Foo public foo = new Foo();\n\n    // Test Foo.sol by getting it&#39;s name.\n    function getFooName() public view returns (string memory) {\n        return foo.name();\n    }\n}\n</code></pre>\n<h3 id="external">External</h3>\n<p>You can also import from <a href="https://github.com">GitHub</a>, but you need to drop <code>blob/&lt;branch name&gt;</code> from the URL.</p>\n<pre><code class="language-solidity">// https://github.com/owner/repo/blob/master/path/to/Contract.sol\n\nimport "github.com/owner/repo/path/to/Contract.sol"</code></pre>\n'})};var H=function(n){return r.a.createElement(A,{title:"Function",description:"Example of how to write functions in Solidity",html:'<p>In Solidity, public functions cannot accept certain data types as inputs or outputs</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Function {\n    // cannot use map for inputs\n    // function mapInput(mapping(uint =&gt; uint) memory map) public {\n    // }\n\n    // can use multi dimensional fixed size array for input\n    function multiDimFixedSizeArrayInput(uint[9][9] memory _arr) public {\n    }\n\n    // cannot use multi dimensional dynamic size array as input\n    // function multiDimDynamicSizeArrayInput(uint[][] memory _arr) public {\n    // }\n\n    // can use array for input\n    function arrayInput(uint[] memory _arr) public {\n    }\n\n    mapping(uint =&gt; uint) map;\n    uint[] arr;\n    uint[9][9] arr2DFixed;\n    uint[][] arr2D;\n\n    // cannot return map for outputs\n    // function mapOutput() public returns (mapping(uint =&gt; uint) memory) {\n    //     return map;\n    // }\n\n    // can use multi dimensional fixed size array for output\n    function multiDimFixedSizeArrayOutput() public view returns (uint[9][9] memory) {\n        return arr2DFixed;\n    }\n\n    // cannot use multi dimensional dynamic size array as output\n    // function multiDimDynamicSizeArrayOutput() public returns (uint[][] memory) {\n    //     return arr2D;\n    // }\n\n    // can use array for output\n    function arrayOutput() public view returns (uint[] memory) {\n        return arr;\n    }\n\n    // Functions can return multiple values.\n    function returnMultipleVals() public pure returns (uint, bool, uint) {\n        return (1, true, 2);\n    }\n\n    // Return values can be named. This is useful when a contract\n    // interacts with web3.js where you can access the returned\n    // values by name instead of the returned order.\n    function named() public pure returns (uint x, bool b, uint y) {\n        return (1, true, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted;\n    function assigned() public pure returns (uint x, bool b, uint y) {\n        x = 1;\n        b = true;\n        y = 2;\n    }\n\n    // Use destructing assignment when calling another\n    // function that returns multiple values.\n    function destructingAssigments() public pure returns (uint, bool, uint, uint, uint) {\n        (uint i, bool b, uint j) =  returnMultipleVals();\n\n        // Values can be left out.\n        (uint x, , uint y) = (4, 5, 6);\n\n        return (i, b, j, x, y);\n    }\n}\n</code></pre>\n'})};var R=function(n){return r.a.createElement(A,{title:"Function Modifier",description:"Example of function modifiers in Solidity",html:'<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Restrict access</li>\n<li>Validate inputs</li>\n<li>Guard against reentrancy hack</li>\n</ul>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract FunctionModifier {\n    // We will use these variables to demonstrate how to use\n    // modifiers.\n    address public owner;\n    uint public x = 10;\n    bool public locked;\n\n    constructor() public {\n        // Set the transaction sender as the owner of the contract.\n        owner = msg.sender;\n    }\n\n    // Modifier to check that the caller is the owner of\n    // the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, "Not owner");\n        // Underscore is a special character only used inside\n        // a function modifier and it tells Solidity to\n        // execute the rest of the code.\n        _;\n    }\n\n    // Modifiers can take inputs. This modifier checks that the\n    // address passed in is not the zero address.\n    modifier validAddress(address _addr) {\n        require(_addr != address(0), "Not valid address");\n        _;\n    }\n\n    function changeOwner(address _newOwner)\n        public\n        onlyOwner\n        validAddress(_newOwner)\n    {\n        owner = _newOwner;\n    }\n\n    // Modifiers can be called before and / or after a function.\n    // This modifier prevents a function from being called while\n    // it is still executing.\n    modifier noReentrancy() {\n        require(!locked, "No reentrancy");\n\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function decrement(uint i) public noReentrancy {\n        x -= i;\n\n        if (i &gt; 1) {\n            decrement(i - 1);\n        }\n    }\n}\n</code></pre>\n'})},W=function(n){return r.a.createElement(A,{title:"View and Pure Functions",description:"An example of view and pure functions in Solidity",html:'<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be changed or read.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function addToX(uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Promise not to modify or read from the state.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n}\n</code></pre>\n'})};var N=function(n){return r.a.createElement(A,{title:"Inheritance",description:"Example of inheritance in Solidity",html:'<p>Solidity supports multiple inheritance.</p>\n<p>Order of inheritance is important</p>\n<p>You have to list the parent contracts in the order from \u201cmost base-like\u201d to \u201cmost derived\u201d.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract A {\n    function foo() public pure returns (string memory) {\n        return "A";\n    }\n}\n\n// Contracts can inherit other contracts by using the keyword &#39;is&#39;.\ncontract B is A {\n    // Override A.foo()\n    function foo() public pure returns (string memory) {\n        return "B";\n    }\n}\n\ncontract C is A {\n    // Override A.foo()\n    function foo() public pure returns (string memory) {\n        return "C";\n    }\n}\n\n// Contracts can inherit from multiple parent contracts.\n// When a function is called that is defined multiple times in\n// different contracts, parent contracts are searched from\n// right to left, and in depth-first manner.\n\ncontract D is B, C {\n    // D.foo() returns "C"\n    // since C is the right most parent contract with function foo()\n}\n\ncontract E is C, B {\n    // E.foo() returns "B"\n    // since B is the right most parent contract with function foo()\n}\n\n// Inheritance must be ordered from \u201cmost base-like\u201d to \u201cmost derived\u201d.\n// Swapping the order of A and B will throw a compilation error.\ncontract F is A, B {\n}\n</code></pre>\n'})};var V=function(n){return r.a.createElement(A,{title:"Shadowing Inherited State Variables",description:"An example of shadowing state variables by inheritance",html:'<p>Unlike functions, state variables cannot be overridden by re-declaring it\nin the child contract.</p>\n<p>Let&#39;s learn how to correctly override inherited state variables.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract A {\n    string public name = "Contract A";\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n}\n\ncontract B is A {\n    // This is the incorrect way to override inherited state variables.\n    string public name = "Contract B";\n\n    // B.getName returns "Contract A"\n\n    // Functions defined in contract A that use the &#39;name&#39; state variable\n    // will access A.name. Functions defined in B that uses &#39;name&#39; will\n    // access B.name.\n}\n\ncontract C is A {\n    // This is the correct way to override inherited state variables.\n    constructor() public {\n        name = "Contract C";\n    }\n\n    // C.getName returns "Contract C"\n}\n</code></pre>\n'})};var Y=function(n){return r.a.createElement(A,{title:"Constructor",description:"Learn how to initialize smart contracts in Solidity using a constructor",html:'<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to parent <code>constructors</code>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n// Base contract X\ncontract X {\n    string public name;\n\n    constructor(string memory _name) public {\n        name = _name;\n    }\n}\n\n// Base contract Y\ncontract Y {\n    string public text;\n\n    constructor(string memory _text) public {\n        text = _text;\n    }\n}\n\n// There are 2 ways to initialize parent contract with parameters.\n// 1. Pass parameters when declaring the inheritance\n// 2. Pass parameters next to the constructor of the child contract\n\n// Pass the parameters here in the inheritance list.\ncontract B is X("Input to X"), Y("Input to Y") {\n}\n\ncontract C is X, Y {\n    // Pass the parameters here in the constructor, similar to modifiers.\n    constructor(string memory _name, string memory _text) X(_name) Y(_text) public {\n    }\n}\n\n// Parent constructors are always called in the order of inheritance\n// regardless of the order of parent contracts listed in the\n// constructor of the child contract\n\n// Constructors are called in the following order:\n// 1. Y\n// 2. X\n// 3. E\ncontract E is X, Y {\n    constructor() X("X was called") Y("Y was called") public {\n    }\n}\n\n// Constructors are still called in the following order:\n// 1. Y\n// 2. X\n// 3. E\ncontract F is X, Y {\n    constructor() Y("Y was called") X("X was called") public {\n    }\n}\n</code></pre>\n'})},z=function(n){return r.a.createElement(A,{title:"Calling Parent Contracts",description:"An example of calling parent contracts in Solidity",html:'<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.</p>\n<p>By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract A {\n    // This is called an event. You can emit events from your function\n    // and they are logged into the transaction log.\n    // In our case, this will be useful for tracing function calls.\n    event Log(string message);\n\n    function foo() public {\n        emit Log("A.foo called");\n    }\n\n    function bar() public {\n        emit Log("A.bar called");\n    }\n}\n\ncontract B is A {\n    function foo() public {\n        emit Log("B.foo called");\n        A.foo();\n    }\n    function bar() public {\n        emit Log("B.bar called");\n        super.bar();\n    }\n}\n\ncontract C is A {\n    function foo() public {\n        emit Log("C.foo called");\n        A.foo();\n    }\n\n    function bar() public {\n        emit Log("C.bar called");\n        super.bar();\n    }\n}\n\ncontract D is B, C {\n    // Try:\n    // - Call D.foo and check the transaction logs.\n    //   Although D inherits A, B and C, it only called C and then A.\n    // - Call D.bar and check the transaction logs\n    //   D called C, then B, and finally A.\n    //   Although super was called twice (by B and C) it only called A once. \n}\n</code></pre>\n'})},j=function(n){return r.a.createElement(A,{title:"Visibility",description:"An example of external, internal, private and public functions in Solidity",html:'<p>Functions and state variables have to specify whether they can be accessed by other contracts.</p>\n<p>Fucntions can be declared as <code>public</code>, <code>private</code>, <code>internal</code> or <code>external</code>.</p>\n<p>State variables can be declared as <code>public</code>, <code>private</code>, or <code>internal</code> but not <code>external</code>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Base {\n    // Private function can only be called\n    // - inside this contract\n    // Contracts that inherit this contract cannot call this function.\n    function privateFunc() private pure returns (string memory) {\n        return "private function called";\n    }\n\n    function testPrivateFunc() public pure returns (string memory) {\n        return privateFunc();\n    }\n\n    // Internal function can be called\n    // - inside this contract\n    // - inside contracts that inherit this contract\n    function internalFunc() internal pure returns (string memory) {\n        return "internal function called";\n    }\n\n    function testInternalFunc() public pure returns (string memory) {\n        return internalFunc();\n    }\n\n    // Public functions can be called\n    // - inside this contract\n    // - inside contracts that inherit this contract\n    // - by other contracts and accounts\n    function publicFunc() public pure returns (string memory) {\n        return "public function called";\n    }\n\n    // External functions can only be called\n    // - by other contracts and accounts\n    function externalFunc() external pure returns (string memory) {\n        return "external function called";\n    }\n\n    // This function will not compile since we&#39;re trying to call\n    // an external function here.\n    // function testExternalFunc() public pure returns (string memory) {\n    //     return externalFunc();\n    // }\n\n    // State variables\n    string private privateVar = "my private variable";\n    string internal internalVar = "my internal variable";\n    string public publicVar = "my public variable";\n    // State variables cannot be external so this code won&#39;t compile.\n    // string external externalVar = "my external variable";\n}\n\ncontract Child is Base {\n    // Inherited contracts do not have access to private functions\n    // and state variables.\n    // function testPrivateFunc() public pure returns (string memory) {\n    //     return privateFunc();\n    // }\n\n    // Internal function call be called inside child contracts.\n    function testInternalFunc() public pure returns (string memory) {\n        return internalFunc();\n    }\n}\n</code></pre>\n'})};var X=function(n){return r.a.createElement(A,{title:"Loop",description:"Example of looping in Solidity",html:'<p>Looping in Solidity is tricky.</p>\n<p>The number of iteration in a loop can grow and spend more gas than the\ngas limit, causing your contract to stall.</p>\n<p>There are two gas limits to keep in mind.</p>\n<ul>\n<li>Transcation gas limit, set by the caller.</li>\n<li>Block gas limit</li>\n</ul>\n<p>Try to avoid writing loops that you cannot estimate the gas consumption.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Loop {\n    uint public count;\n\n    // This is a demonstration of transaction gas limit.\n    // Try:\n    // Set the gas limit to 100000 and loop(100).\n    // It should throw an error after spending all the gas.\n    function loop(uint n) public returns (uint) {\n        for (uint i = 0; i &lt; n; i++) {\n            count++;\n        }\n\n        return count;\n    }\n}\n</code></pre>\n'})};var U=function(n){return r.a.createElement(A,{title:"Enum",description:"Example of enums in Solidity",html:'<p>Solidity supports enumerables and they are useful to keep track of state.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Order {\n    enum Status {\n        Pending,\n        Shipped,\n        Accepted,\n        Rejected,\n        Canceled\n    }\n\n    // Default value of an enum type is the first element listed in\n    // definition of the type, in this case "Pending"\n    Status public status;\n\n    // Try:\n    // - execute ship() and then acceptDelivery() or rejectDelivery()\n    // - re-deploy the contract and execute cancel()\n    // Any other order of execution fails.\n\n    function ship() public {\n        require(status == Status.Pending);\n        status = Status.Shipped;\n    }\n\n    function acceptDelivery() public {\n        require(status == Status.Shipped);\n        status = Status.Accepted;\n    }\n\n    function rejectDelivery() public {\n        require(status == Status.Shipped);\n        status = Status.Rejected;\n    }\n\n    function cancel() public {\n        require(status == Status.Pending);\n        status = Status.Canceled;\n    }\n}\n</code></pre>\n'})};var G=function(n){return r.a.createElement(A,{title:"Mapping",description:"Example of using mapping in Solidity",html:'<p>Maps are created with the syntax <code>mapping(keyType =&gt; valueType)</code>.</p>\n<p><code>keyType</code> can be value types such as <code>uint</code>, <code>address</code> or <code>bytes</code>.</p>\n<p><code>valueType</code> can be any type including another mapping or an array.</p>\n<p>Mappings are not iterable.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Mapping {\n    // Mapping from address to uint\n    mapping(address =&gt; uint) public myMap;\n    // Nested mapping (mapping from address to another mapping)\n    mapping(address =&gt; mapping(address =&gt; uint)) public nested;\n\n    function get(address _addr) public view returns (uint) {\n         // Mapping always returns a value.\n         // If the value was never set, it will return the default value.\n        return myMap[_addr];\n    }\n\n    function set(address _addr, uint _i) public {\n        // Update the value at this address\n        myMap[_addr] = _i;\n    }\n\n    function remove(address _addr) public {\n        // Delete resets the value to the default value.\n        delete myMap[_addr];\n    }\n}\n\ncontract NestedMapping {\n    mapping(address =&gt; mapping(address =&gt; uint)) public nested;\n\n    function get(address _addr1, address _addr2) public view returns (uint) {\n         // You can get values from a nested mapping even when it is not\n         // initialized\n        return  nested[_addr1][_addr2];\n    }\n\n    function set(address _addr1, address _addr2, uint _i) public {\n        nested[_addr1][_addr2] = _i;\n    }\n\n    function remove(address _addr1, address _addr2) public {\n        delete nested[_addr1][_addr2];\n    }\n}\n</code></pre>\n'})};var K=function(n){return r.a.createElement(A,{title:"Array",description:"Learn about arrays in Solidity",html:'<p>Array can have a compile-time fixed size or a dynamic size.</p>\n<p>Solidity creates a <code>getter</code> for <code>public</code> arrays.</p>\n<p>Deleting an element creates a gap in the array. One trick to keep the array</p>\n<p>compact is to move the last element into the place to delete.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Array {\n    // Several ways to initialize an array\n    uint[] public myArray;\n    uint[] public myArray2 = [1,2,3];\n    uint[10] public myFixedSizeArray;\n\n    function get(uint i) public view returns (uint) {\n      return myArray[i];\n    }\n\n    function push(uint i) public {\n        myArray.push(i);\n    }\n\n    function pop() public {\n        myArray.pop();\n    }\n\n    function getLength() public view returns (uint) {\n        return myArray.length;\n    }\n\n    function remove(uint index) public {\n        delete myArray[index];\n    }\n}\n\ncontract CompactArray {\n    uint[] public myArray;\n\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        myArray[index] = myArray[myArray.length - 1];\n        // Remove the last element\n        myArray.pop();\n    }\n\n    function test() public {\n        myArray.push(1);\n        myArray.push(2);\n        myArray.push(3);\n        myArray.push(4);\n        // [1, 2, 3, 4]\n\n        remove(1);\n        // [1, 4, 3]\n\n        assert(myArray.length == 3);\n        assert(myArray[0] == 1);\n        assert(myArray[1] == 4);\n        assert(myArray[2] == 3);\n\n        remove(2);\n        // [1, 4]\n\n        assert(myArray.length == 2);\n        assert(myArray[0] == 1);\n        assert(myArray[1] == 4);\n    }\n}\n</code></pre>\n'})},J=function(n){return r.a.createElement(A,{title:"Structs",description:"An example of how to use structs in Solidity",html:'<p>You can define your own type by creating a <code>struct</code>.</p>\n<p>They are useful for grouping togther related data.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Todos {\n    struct Todo {\n        string text;\n        bool completed;\n    }\n\n    // An array of &#39;Todo&#39; structs\n    Todo[] public todos;\n\n    function create(string memory _text) public {\n        // 3 ways to initialize a struct\n        // - calling it like a function\n        todos.push(Todo(_text, false));\n\n        // key value mapping\n        todos.push(Todo({\n            text: _text,\n            completed: false\n        }));\n\n        // initialize an emoty struct and then update it\n        Todo memory todo;\n        todo.text = _text;\n        // todo.completed initialized to false\n\n        todos.push(todo);\n    }\n\n    // Solidity automatically created a getter for&#39; todos&#39; so\n    // you don&#39;t actually need this function.\n    function get(uint _index) public view\n        returns (string memory text, bool completed)\n    {\n        Todo storage todo = todos[_index];\n        return (todo.text, todo.completed);\n    }\n\n    // update text\n    function update(uint _index, string memory _text) public {\n        Todo storage todo = todos[_index];\n        todo.text = _text;\n    }\n    // update completed\n    function toggleCompleted(uint _index) public {\n        Todo storage todo = todos[_index];\n        todo.completed = !todo.completed;\n    }\n}\n</code></pre>\n'})};var Z=function(n){return r.a.createElement(A,{title:"Creating Contract from Other Contract",description:"Learn how to create new contract from inside a contract with Solidity",html:'<p>Contracts can be created by other contracts using the <code>new</code> keyword.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Car {\n    address public owner;\n    string public name;\n\n    constructor(address _owner, string memory _name) public payable {\n        owner = _owner;\n        name = _name;\n    }\n}\n\ncontract CarFactory {\n    Car public car = new Car(msg.sender, "Carol");\n\n    Car[] public cars;\n\n    function create(string memory name) public {\n        Car c = new Car(msg.sender, name);\n        cars.push(c);\n    }\n\n    function createAndSendEther(string memory name) public payable {\n        // Send ether along with the creation\n        Car c = (new Car).value(msg.value)(msg.sender, name);\n        cars.push(c);\n    }\n\n    function getCar(uint index)\n      public\n      view\n      returns (address owner, string memory name, uint balance)\n    {\n        Car c = cars[index];\n\n        return (c.owner(), c.name(), address(c).balance);\n    }\n}\n</code></pre>\n'})};var $=function(n){return r.a.createElement(A,{title:"Calling Other Contract",description:"In Solidity, contract can call other contracts in several ways.",html:'<p>Contract can call other contracts in 2 ways.</p>\n<p>The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.</p>\n<p>Another way to call other contracts is to use the low-level <code>call</code>.</p>\n<p>This method is not recommended.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract A {\n    uint public x;\n\n    function setX(uint _x) public returns (uint) {\n        x = _x;\n        return x;\n    }\n}\n\ncontract B {\n    function setX(A a, uint x) public returns (uint) {\n        return a.setX(x);\n    }\n\n    function getX(A a) public view returns (uint) {\n        return a.x();\n    }\n}\n\ncontract C {\n  function setX(A a, uint x) public returns (bytes memory) {\n    // low-level way to call another contract\n    // This method is useful when you want to call an arbitrary contract.\n    (bool success, bytes memory returnData) = address(a).call(\n      abi.encodeWithSignature("setX(uint256)", x)\n    );\n    require(success);\n\n    return returnData;\n  }\n}\n</code></pre>\n'})};var Q=function(n){return r.a.createElement(A,{title:"Call",description:"In Solidity call is a low level function to interact with other contracts.",html:'<p><code>call</code> is a low level function to interact with other contracts.</p>\n<p>This is not the recommend way, but this might be the only way if your contract</p>\n<p>does not have the ABI for the other contract.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Receiver {\n    event Received(address caller, uint amount, string message);\n\n    function () external payable {\n        emit Received(msg.sender, msg.value, "Fallback was called");\n    }\n\n    function foo(string memory _message, uint _x) public payable returns (uint) {\n        emit Received(msg.sender, msg.value, _message);\n\n        return _x + 1;\n    }\n}\n\ncontract Caller {\n    event Response(bool success, bytes data);\n\n    // Let&#39;s imagine that contract B does not have the source code for\n    // contract A, but we do know the address of A and the function to call.\n    function testCallFoo(address payable _addr) public payable {\n        // You can send ether and specify a custom gas amount\n        (bool success, bytes memory data) = _addr.call.value(msg.value).gas(5000)(\n            abi.encodeWithSignature("foo(string,uint256)", "call foo", 123)\n        );\n\n        emit Response(success, data);\n    }\n\n    // Calling a function that does not exist triggers the fallback function.\n    function testCallDoesNotExist(address _addr) public {\n        (bool success, bytes memory data) = _addr.call(\n            abi.encodeWithSignature("doesNotExist()")\n        );\n\n        emit Response(success, data);\n    }\n}\n</code></pre>\n'})};var nn=function(n){return r.a.createElement(A,{title:"Delegatecall",description:"Example of how to use deletegatecall in Solidity",html:'<p><code>delegatecall</code> is a low level function similar to <code>call</code>.</p>\n<p>When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>&#39;s code is excuted</p>\n<p>with contract <code>A</code>&#39;s storage, <code>msg.sender</code> and <code>msg.value</code>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\n// NOTE: Firts deploy this contract\ncontract B {\n    // NOTE: storage layout must be the same as contract A\n    uint public num;\n    address public sender;\n    uint public value;\n\n    function setVars(uint _num) public payable {\n        num = _num;\n        sender = msg.sender;\n        value = msg.value;\n    }\n}\n\ncontract A {\n    uint public num;\n    address public sender;\n    uint public value;\n\n    function setVars(address _contract, uint _num) public payable {\n        // A&#39;s storage is set, B is not modified.\n        (bool success, bytes memory data) = _contract.delegatecall(\n            abi.encodeWithSignature("setVars(uint256)", _num)\n        );\n    }\n}\n</code></pre>\n'})};var en=function(n){return r.a.createElement(A,{title:"Library",description:"Example of how to write and use libraries in your Solidity code",html:'<p>Libraries are similar to contracts, but they are deployed only once at a</p>\n<p>specific address and their code is reused using the <code>delegatecall</code>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\nlibrary MyLib {\n    function incrementBy(uint i, uint val) public pure returns (uint) {\n        return i + val;\n    }\n\n    // Array function to delete element at index and re-organize the array\n    // so that their are no gaps between the elements.\n    function deleteElement(string[] storage arr, uint index) internal {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n\n        // Remove the last element\n        arr.pop();\n    }\n}\n\ncontract TestMyLib {\n    using MyLib for uint;\n    using MyLib for string[];\n\n    string[] public array = ["foo", "bar"];\n\n    function testIncrementBy() public pure returns (uint) {\n        uint i = 10;\n\n        return i.incrementBy(10);\n    }\n\n    function testDeleteElement() public {\n        array.push("abc");\n        array.deleteElement(1);\n        // array should now be ["foo", "abc"]\n    }\n}\n\n// TODO example MyLib.func()\n</code></pre>\n'})},tn=function(n){return r.a.createElement(A,{title:"Ether and Wei",description:"An example of Ether and Wei in Solidity",html:'<p>One dollar is equal to 100 cent.</p>\n<p>Similarly, one <code>Ether</code> is equal to 10^18 <code>Wei</code>.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract EtherUnits {\n  uint public oneWei = 1 wei;\n  uint public oneEther = 1 ether;\n\n  function testOneWei() public pure returns (bool) {\n    return 1 wei == 1;\n  }\n\n  function testOneEther() public pure returns (bool) {\n    return 1 ether == 1e18 wei;\n  }\n}\n</code></pre>\n'})},an=function(n){return r.a.createElement(A,{title:"Gas and Gas Price",description:"An example of gas and gas limit in Solidity",html:'<p>Transactions run on <code>gas</code>. You pay <code>gas price * gas</code> in Ether.</p>\n<p>You specify the gas price.</p>\n<p>Transactions with higher gas price will be processed faster.</p>\n<p>Unspent gas will be refunded.</p>\n<p>There are 2 upper bounds to the amount of gas you can spend</p>\n<ul>\n<li><code>gas limit</code> (max amount of gas your willing to use for your transaction, set by you)</li>\n<li><code>block gas limit</code> (max amount of gas allowed in a block, set by the network)</li>\n</ul>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Gas {\n  // Transactions spend gas even if it does nothing.\n  function doNothing() public {}\n\n  // Getter functions cost no gas when called by either\n  // - an external account\n  // - other getter functions inside this contract\n  // - other getter functions from another contract\n  function getNothing() public pure {}\n\n  // In a transaction, you pay for the total gas used by the function.\n  // If a function calls two other functions,\n  // - a getter function and\n  // - a function to create a transaction,\n  // then you pay for the total gas used by the two functions.\n  function getNothingAndDoNothing() public {\n    getNothing();\n    doNothing();\n  }\n\n  // Transaction costs in ether = gas price * gas used\n  // Unspent gas are refunded.\n  function testGasRefund() public returns (uint) {\n    return tx.gasprice;\n  }\n\n  // Using up all the gas causes an error and reverts state changes.\n  // Gas spent are not refunded.\n  uint public i = 0;\n\n  function forever() public {\n    while(true) {\n      i += 1;\n    }\n  }\n\n  // Block gas limit\n  function getBlockGasLimit() public view returns (uint) {\n    return block.gaslimit;\n  }\n}\n</code></pre>\n'})};var rn=function(n){return r.a.createElement(A,{title:"Hashing with Keccak256",description:"Example of hashing using Keccak256 in Solidity",html:'<p><code>keccak256</code> computes the Keccak-256 hash of the input.</p>\n<p>Some use cases are:</p>\n<ul>\n<li>Creating an deterministic unique ID from a input</li>\n<li>Commit-Reveal scheme</li>\n<li>Compact cryptographic signature (by signing the hash instead of a larger input)</li>\n</ul>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Keccak256 {\n  struct Todo {\n    string text;\n    uint createdAt;\n  }\n\n  // Example to create an ID using keccak256\n  function getTodoId() public pure returns (uint) {\n    Todo memory todo = Todo({\n      text: "Creawte Todo ID",\n      createdAt:123456\n    });\n\n    return uint(keccak256(abi.encodePacked(todo.text, todo.createdAt)));\n  }\n\n  // Example of commit-reveal scheme\n  // Try:\n  // 1. create a commitment hash by calling getCommitmentHash(your address, "Trump")\n  // 2. commit(hash returned from previous step)\n  // 3. revel(your address, "Trump", your commitment hash) should return true\n  // You have successfully voted without revealing your choice.\n  struct Vote {\n    address voter;\n    string candidate;\n  }\n\n  mapping(bytes32 =&gt; bool) public voted;\n\n  function getCommitmentHash(address voter, string memory candidate)\n    public\n    view\n    returns (bytes32)\n  {\n    Vote memory vote = Vote({\n      voter: voter,\n      candidate: candidate\n    });\n\n    return keccak256(abi.encodePacked(vote.voter, vote.candidate));\n  }\n\n  function commit(bytes32 commitmentHash) public {\n    voted[commitmentHash] = true;\n  }\n\n  function reveal(\n    address voter, string memory candidate, bytes32 commitmentHash\n  )\n    public\n    view\n    returns (bool)\n  {\n    bytes32 hash = getCommitmentHash(voter, candidate);\n\n    require(voted[hash], "Voter has not voted");\n    require(hash == commitmentHash, "Invalid commitment hash");\n\n    return true;\n  }\n}\n</code></pre>\n'})};var on=function(n){return r.a.createElement(A,{title:"Verifying Signature",description:"An example of how to verify signatures in Solidity",html:'<p>Messages can be signed off chain and then verified on chain using a smart contract.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract VerifySignature {\n  // Signature is produced by signing a hash with the following format:\n  // - prefix of "\\x19Ethereum Signed Message\\n"\n  // - length of message\n  // - actual message\n  function getHash() public pure returns (bytes32) {\n    // Here we are computing the hash of "Hello World", which has length 11.\n    return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n11", "Hello World"));\n  }\n\n  // Let&#39;s sign "Hello World" (without quotes) using Remix\n  // You will see a dialog box with the following output\n\n  // hash\n  // 0xa1de988600a42c4b4ab089b619297c17d53cffae5d5120d82d8a92d0bb3b78f2\n  // signature (this will be different depending on the account)\n  // 0x16a16577ba9ac82469ce52db5ea70f622c644006a343649d2b3775ac1470bc49394479b4f97a5baefe82abad836e4648f31c59c564652ea735a8c17d1204f37300\n\n  // Next we recover the signer from the hash and signature.\n  // Execute this function below inputting the hash and your signature.\n\n  // If the signature or hash is valid the function will return\n  // the address of the signer, otherwise a zero address.\n  function recoverSigner(bytes32 _hash, bytes memory _signature)\n    public\n    pure\n    returns (address)\n  {\n    // Splitting the signature. We can ignore the details.\n    (uint8 v, bytes32 r, bytes32 s) = splitSignature(_signature);\n\n    // There is a bug in Remix IDE, so we fix &#39;v&#39; to the expected value,  0x1b\n    // return ecrecover(_hash, v, r, s);\n    return ecrecover(_hash, 0x1b, r, s);\n  }\n\n  function splitSignature(bytes memory sig)\n    public\n    pure\n    returns (uint8 v, bytes32 r, bytes32 s)\n  {\n    require(sig.length == 65);\n\n    assembly {\n      // first 32 bytes, after the length prefix\n      r := mload(add(sig, 32))\n      // second 32 bytes\n      s:= mload(add(sig, 64))\n      // final byte (first byte of the next 32 bytes)\n      v := byte(0, mload(add(sig, 0)))\n    }\n\n    return (v, r, s);\n  }\n}\n</code></pre>\n'})},cn=function(n){return r.a.createElement(A,{title:"Multi-Sig Wallet",description:"An example of multi-sig wallet in Solidity",html:'<p>Let&#39;s create an multi-sig wallet. Here are the specifications.</p>\n<p>The wallet owners can</p>\n<ul>\n<li>create transaction</li>\n<li>sign and unsign pending transcations</li>\n</ul>\n<p>Anyone can process a transcation after enough owners has signed it.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract MultiSigWallet {\n  event Deposit(address indexed sender, uint value);\n  event TxCreated(\n    uint indexed txId,\n    address indexed owner,\n    address indexed to,\n    uint value\n  );\n  event TxSigned(uint indexed txId, address indexed signer);\n  event TxUnsigned(uint indexed txId, address indexed signer);\n  event TxExecuted(uint indexed txId, address indexed caller);\n\n  mapping(address =&gt; bool) public isOwner;\n  address[] public owners;\n  uint public numSigsRequired;\n\n  struct Tx {\n    address payable to;\n    uint value;\n    bytes data;\n  }\n\n  uint public txCount;\n  // mapping from txId to Tx\n  mapping(uint =&gt; Tx) public transactions;\n\n  // mapping from txId -&gt; owner address -&gt; bool\n  // set to true after a owner has signed a transaction\n  mapping(uint =&gt; mapping(address =&gt; bool)) public signed;\n  // mapping from txId to signature count\n  mapping(uint =&gt; uint) public sigCount;\n  // mapping from txId to boolean value set to true after a transaction has\n  // been executed\n  mapping(uint =&gt; bool) public executed;\n\n  constructor(address[] memory _owners, uint _numSigsRequired) public {\n    require(_numSigsRequired &gt; 0, "number of signatures required must be &gt; 0");\n    require(\n      _owners.length &gt;= _numSigsRequired,\n      "owners must be &gt; number of required signatures"\n    );\n\n    for (uint i = 0; i &lt; _owners.length; i++) {\n      require(!isOwner[_owners[i]], "Duplicate owner");\n      require(_owners[i] != address(0), "Invalid owner");\n\n      isOwner[_owners[i]] = true;\n    }\n\n    owners = _owners;\n    numSigsRequired = _numSigsRequired;\n  }\n\n  modifier onlyOwner() {\n    require(isOwner[msg.sender], "Not owner");\n    _;\n  }\n\n  modifier onlyExisting(uint txId) {\n    require(txExists(txId), "Tx does not exist");\n    _;\n  }\n\n  modifier notExecuted(uint txId) {\n    require(!executed[txId], "Tx already executed");\n    _;\n  }\n\n  modifier notSigned(uint txId) {\n    require(!signed[txId][msg.sender], "Tx already signed");\n    _;\n  }\n\n  function () external payable {\n    if (msg.value &gt; 0) {\n      emit Deposit(msg.sender, msg.value);\n    }\n  }\n\n  function createTx(address payable to, uint value, bytes memory data) public onlyOwner {\n    require(to != address(0), "Invalid address");\n\n    require(txCount + 1 &gt; txCount, "txCount uint overflow");\n    txCount += 1;\n\n    transactions[txCount] = Tx({\n      to: to,\n      value: value,\n      data: data\n    });\n\n    emit TxCreated(txCount, msg.sender, to, value);\n  }\n\n  function txExists(uint txId) public view returns (bool) {\n    return transactions[txId].to != address(0);\n  }\n\n  function getTx(uint txId)\n    public\n    view\n    onlyExisting(txId)\n    returns (address to, uint value, bytes memory data)\n  {\n    // &#39;tx&#39; is global variable so we name ours &#39;txn&#39;\n    Tx storage txn = transactions[txId];\n\n    return (txn.to, txn.value, txn.data);\n  }\n\n  function getSigCount(uint txId)\n    public\n    view\n    onlyExisting(txId)\n    returns (uint)\n  {\n    uint count;\n\n    for (uint i = 0; i &lt; owners.length; i++) {\n      if (signed[txId][owners[i]]) {\n        count += 1;\n      }\n    }\n\n    return count;\n  }\n\n  function signTx(uint txId)\n    public\n    onlyOwner\n    onlyExisting(txId)\n    notExecuted(txId)\n    notSigned(txId)\n  {\n    signed[txId][msg.sender] = true;\n    sigCount[txId] += 1;\n\n    emit TxSigned(txId, msg.sender);\n  }\n\n  function unsignTx(uint txId)\n    public\n    onlyOwner\n    onlyExisting(txId)\n    notExecuted(txId)\n  {\n    require(signed[txId][msg.sender], "Tx not signed");\n\n    signed[txId][msg.sender] = false;\n    sigCount[txId] -= 1;\n\n    emit TxUnsigned(txId, msg.sender);\n  }\n\n  function canExecuteTx(uint txId) public view returns (bool) {\n    return sigCount[txId] &gt;= numSigsRequired;\n  }\n\n  function executeTx(uint txId)\n    public\n    onlyExisting(txId)\n    notExecuted(txId)\n  {\n    require(canExecuteTx(txId), "Cannot execute tx yet");\n\n    Tx storage txn = transactions[txId];\n    executed[txId] = true;\n\n    (bool success,) = txn.to.call.value(txn.value)(txn.data);\n    require(success, "Failed to execute transaction");\n\n    emit TxExecuted(txId, msg.sender);\n  }\n}\n</code></pre>\n'})},sn=function(n){return r.a.createElement(A,{title:"Dividend",description:"Dividend",html:'<p>A contract that pays dividend to shareholders should</p>\n<ul>\n<li>receive payment</li>\n<li>for simplicity, have a fixed distribution of shares</li>\n<li>shareholders can withdraw dividend at any time</li>\n</ul>\n<p>We let the user withdraw their dividend. For more information about <code>Push vs Pull</code> contract design, check out <a href="https://consensys.github.io/smart-contract-best-practices/recommendations/#favor-pull-over-push-for-external-calls">here</a></p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract Dividend {\n    event AddShareholder(address indexed account, uint shares);\n    event Deposit(address indexed sender, uint amount);\n    event Withdraw(address indexed account, uint amount);\n\n    uint public totalShares;\n    mapping(address =&gt; uint) public shares;\n\n    // We keep track of withdrawn amount so that the amount a shareholder can\n    // withdraw can be calculated.\n    uint public totalWithdrawn;\n    mapping(address =&gt; uint) withdrawn;\n\n    constructor(address[] memory _shareholders, uint[] memory _shares) public {\n        require(_shareholders.length &gt; 0, "Shareholder addresses required");\n        require(_shareholders.length == _shares.length, "shareholders.length != shares.length");\n\n        for (uint i = 0; i &lt; _shareholders.length; i++) {\n            _addShareholder(_shareholders[i], _shares[i]);\n        }\n    }\n\n    function () external payable {\n        emit Deposit(msg.sender, msg.value);\n    }\n\n    // Warning: For simplicity, we skip checks on arithmetic overflows.\n    function withdraw(address payable account) public {\n        require(shares[account] &gt; 0, "Not a shareholder");\n\n        uint totalReceived = address(this).balance + totalWithdrawn;\n\n        uint amount = totalReceived * shares[account] / totalShares - withdrawn[account];\n\n        require(amount &gt; 0, "Payment amount must be &gt; 0");\n\n        withdrawn[account] += amount;\n        totalWithdrawn += amount;\n\n        account.transfer(amount);\n\n        emit Withdraw(account, amount);\n    }\n\n    // Helper function to get balance of this contract.\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    // Private function to add shareholder.\n    function _addShareholder(address _account, uint _shares) private {\n        require(_account != address(0), "Invalid shareholder address");\n        require(_shares &gt; 0, "Shares must be &gt; 0");\n        require(shares[_account] == 0, "Shareholder already added");\n\n        shares[_account] = _shares;\n        totalShares += _shares;\n\n        emit AddShareholder(_account, _shares);\n    }\n}\n</code></pre>\n'})};var ln=function(n){return r.a.createElement(A,{title:"Payment Channel",description:"An example of payment channels in Solidity",html:'<p>Payment channels allow participants to repeatedly transfer Ether off chain.</p>\n<p>Here is how this contract is used:</p>\n<ul>\n<li><code>Alice</code> deploys the contract, funding it with some Ether.</li>\n<li><code>Alice</code> authorises a payment by signing a message (off chain) and sends the signed message to <code>Bob</code>.</li>\n<li><code>Bob</code> claims his payment by presenting the signed message to the smart contract.</li>\n</ul>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract PaymentChannel {\n  address payable public sender;\n  address payable public recipient;\n  uint public expiration;\n\n  constructor(address payable _recipient, uint duration) public payable {\n    sender = msg.sender;\n    recipient = _recipient;\n    expiration = now + duration;\n  }\n\n  function isValidSignature(uint amount, bytes memory signature)\n    internal\n    view\n    returns (bool)\n  {\n    bytes32 message = prefixed(keccak256(abi.encodePacked(this, amount)));\n\n    return recoverSigner(message, signature) == sender;\n  }\n\n  // The recipient can close the channel at any time by presenting a\n  // signed amount from the sender. The recipient will be sent that amount,\n  // and the remainder will go back to the sender\n  function close(uint amount, bytes memory signature) public {\n    require(msg.sender == recipient);\n    require(isValidSignature(amount, signature));\n\n    recipient.transfer(amount);\n    selfdestruct(sender);\n  }\n\n  // Sender can extend the expiration at any time\n  function extend(uint newExpiration) public {\n    require(msg.sender == sender);\n    require(newExpiration &gt; expiration);\n\n    expiration = newExpiration;\n  }\n\n  // If the timeout is reached without the recipient closing the channel,\n  // then the Ether is released back to the sender.\n  function claimTimeout() public {\n    require(now &gt;= expiration);\n    selfdestruct(sender);\n  }\n\n  function recoverSigner(bytes32 message, bytes memory sig)\n    internal\n    pure\n    returns (address)\n  {\n    (uint8 v, bytes32 r, bytes32 s) = splitSignature(sig);\n\n    // If you are using Remix IDE, you may need to hard code\n    // v = 0x1b, due to a bug\n    return ecrecover(message, v, r, s);\n  }\n\n  /// builds a prefixed hash to mimic the behavior of eth_sign.\n  function prefixed(bytes32 hash) internal pure returns (bytes32) {\n    return keccak256(abi.encodePacked("\\x19Ethereum Signed Message:\\n32", hash));\n  }\n\n  function splitSignature(bytes memory sig)\n    internal\n    pure\n    returns (uint8 v, bytes32 r, bytes32 s)\n  {\n    require(sig.length == 65);\n\n    assembly {\n      // first 32 bytes, after the length prefix\n      r := mload(add(sig, 32))\n      // second 32 bytes\n      s := mload(add(sig, 64))\n      // final byte (first byte of the next 32 bytes)\n      v := byte(0, mload(add(sig, 96)))\n    }\n\n    return (v, r, s);\n  }\n}\n</code></pre>\n'})};var un=function(n){return r.a.createElement(A,{title:"Merkle Tree",description:"Learn about Merkle tree in Solidity",html:'<p>Merkle tree allows you to cryptographically prove that an element is contained</p>\n<p>in a set without revealing the entire set.</p>\n<pre><code class="language-solidity">pragma solidity ^0.5.11;\n\ncontract MerkleProof {\n    function verify(\n        bytes32[] memory proof, bytes32 root, bytes32 leaf, uint index\n    )\n        public pure returns (bool)\n    {\n        bytes32 hash = leaf;\n\n        for (uint i = 0; i &lt; proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (index % 2 == 0) {\n                hash = keccak256(abi.encodePacked(hash, proofElement));\n            } else {\n                hash = keccak256(abi.encodePacked(proofElement, hash));\n            }\n\n            index = index / 2;\n        }\n\n        return hash == root;\n    }\n}\n\ncontract TestMerkleProof is MerkleProof {\n    bytes32[] public hashes;\n\n    constructor() public {\n        string[4] memory transactions = [\n            "alice -&gt; bob",\n            "bob -&gt; dave",\n            "carol -&gt; alice",\n            "dave -&gt; bob"\n        ];\n\n        for (uint i = 0; i &lt; transactions.length; i++) {\n            hashes.push(keccak256(abi.encodePacked(transactions[i])));\n        }\n\n        uint n = transactions.length;\n        uint offset = 0;\n\n        while (n &gt; 0) {\n            for (uint i = 0; i &lt; n - 1; i+=2) {\n                hashes.push(\n                    keccak256(abi.encodePacked(\n                        hashes[offset + i],\n                        hashes[offset + i + 1]\n                    ))\n                );\n            }\n            offset += n;\n            n = n / 2;\n        }\n    }\n\n    function getRoot() public view returns (bytes32) {\n        return hashes[hashes.length - 1];\n    }\n\n    /* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */\n}\n</code></pre>\n'})};var dn=function(n){return r.a.createElement("div",{className:"App"},r.a.createElement(u,null),r.a.createElement("div",{className:"App-main"},r.a.createElement(o.a,{basename:""},r.a.createElement(c.c,null,r.a.createElement(c.a,{path:"/hello-world",component:T}),r.a.createElement(c.a,{path:"/state-variables",component:C}),r.a.createElement(c.a,{path:"/import",component:L}),r.a.createElement(c.a,{path:"/safe-math",component:I}),r.a.createElement(c.a,{path:"/events",component:O}),r.a.createElement(c.a,{path:"/error",component:P}),r.a.createElement(c.a,{path:"/sending-ether",component:B}),r.a.createElement(c.a,{path:"/payable",component:F}),r.a.createElement(c.a,{path:"/fallback",component:q}),r.a.createElement(c.a,{path:"/re-entrancy",component:D}),r.a.createElement(c.a,{path:"/self-destruct",component:M}),r.a.createElement(c.a,{path:"/function",component:H}),r.a.createElement(c.a,{path:"/function-modifier",component:R}),r.a.createElement(c.a,{path:"/view-and-pure-functions",component:W}),r.a.createElement(c.a,{path:"/inheritance",component:N}),r.a.createElement(c.a,{path:"/shadowing-inherited-state-variables",component:V}),r.a.createElement(c.a,{path:"/constructor",component:Y}),r.a.createElement(c.a,{path:"/super",component:z}),r.a.createElement(c.a,{path:"/visibility",component:j}),r.a.createElement(c.a,{path:"/loop",component:X}),r.a.createElement(c.a,{path:"/enum",component:U}),r.a.createElement(c.a,{path:"/mapping",component:G}),r.a.createElement(c.a,{path:"/array",component:K}),r.a.createElement(c.a,{path:"/structs",component:J}),r.a.createElement(c.a,{path:"/new-contract",component:Z}),r.a.createElement(c.a,{path:"/calling-contract",component:$}),r.a.createElement(c.a,{path:"/call",component:Q}),r.a.createElement(c.a,{path:"/delegatecall",component:nn}),r.a.createElement(c.a,{path:"/library",component:en}),r.a.createElement(c.a,{path:"/ether-units",component:tn}),r.a.createElement(c.a,{path:"/gas",component:an}),r.a.createElement(c.a,{path:"/hashing",component:rn}),r.a.createElement(c.a,{path:"/signature",component:on}),r.a.createElement(c.a,{path:"/multi-sig-wallet",component:cn}),r.a.createElement(c.a,{path:"/dividend",component:sn}),r.a.createElement(c.a,{path:"/payment-channel",component:ln}),r.a.createElement(c.a,{path:"/merkle-tree",component:un}),r.a.createElement(c.a,{component:w})))),r.a.createElement("div",{className:"App-footer"},r.a.createElement(f,null)))};Boolean("localhost"===window.location.hostname||"[::1]"===window.location.hostname||window.location.hostname.match(/^127(?:\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));var pn=document.getElementById("root");pn.hasChildNodes()?Object(i.hydrate)(r.a.createElement(dn,null),pn):Object(i.render)(r.a.createElement(dn,null),pn),"serviceWorker"in navigator&&navigator.serviceWorker.ready.then((function(n){n.unregister()}))},28:function(n,e,t){n.exports=t(234)},33:function(n,e,t){},34:function(n,e,t){},35:function(n,e,t){},36:function(n,e,t){},43:function(n,e,t){}},[[28,1,2]]]);
//# sourceMappingURL=main.6510b9c7.chunk.js.map