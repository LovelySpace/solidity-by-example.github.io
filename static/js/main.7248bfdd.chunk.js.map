{"version":3,"sources":["logo.svg","Header.js","Footer.js","Home.js","Html.js","Example.js","examples/HelloWorld/index.js","examples/HelloWorld/index.html.js","examples/SimpleStorage/index.js","examples/SimpleStorage/index.html.js","examples/SafeMath/index.js","examples/SafeMath/index.html.js","examples/Payable/index.js","examples/Payable/index.html.js","examples/SendingEther/index.js","examples/SendingEther/index.html.js","examples/Fallback/index.js","examples/Fallback/index.html.js","examples/FallbackGasLimit/index.js","examples/FallbackGasLimit/index.html.js","examples/ReEntrancy/index.js","examples/ReEntrancy/index.html.js","examples/SelfDestruct/index.js","examples/SelfDestruct/index.html.js","examples/Events/index.js","examples/Events/index.html.js","examples/Error/index.js","examples/Error/index.html.js","examples/Import/index.js","examples/Import/index.html.js","examples/Function/index.js","examples/Function/index.html.js","examples/FunctionModifier/index.js","examples/FunctionModifier/index.html.js","examples/ViewAndPureFunctions/index.js","examples/ViewAndPureFunctions/index.html.js","examples/Inheritance/index.js","examples/Inheritance/index.html.js","examples/Constructor/index.js","examples/Constructor/index.html.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","href","src","logo","alt","Component","Footer","Home","src_Footer_0","Html","hljsDefineSolidity","hljs","initHighlightingOnLoad","dangerouslySetInnerHTML","__html","this","props","html","Example","title","src_Html","target","HelloWorld","src_Example","SimpleStorage","SafeMath","Payable","SendingEther","Fallback","FallbackGasLimit","Reentrancy","SelfDestruct","Events","Error","Function","FunctionModifier","Inheritance","Constructor","App","src_Header_0","BrowserRouter","basename","process","Switch","Route","path","component","Import","ReEntrancy","ViewAndPureFunctions","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","src_App_0","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7248bfdd.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.da793b47.svg\";","import React, { Component } from 'react'\nimport './Header.css'\nimport logo from './logo.svg'\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <a href=\"/\">\n          <img src={logo} alt=\"logo\" className=\"Header-logo\" />\n        </a>\n\n        <h3><a href=\"/\">Solidity by Example</a></h3>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport './Footer.css'\n\nclass Footer extends Component {\n  render() {\n    return (\n      <p className=\"footer\">\n        <a href=\"mailto:soliditybyexample@gmail.com\">soliditybyexample@gmail.com</a> | <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io\">source</a> | <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io#license\">license</a>\n      </p>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from 'react'\nimport './Home.css'\nimport Footer from './Footer'\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <h1 className=\"Home-header\">\n          <a href=\"/\">Solidity by Example</a>\n        </h1>\n        <div className=\"Home-main\">\n          <p>\n            an introduction to <a href=\"https://solidity.readthedocs.io\">Solidity</a> using example programs\n          </p>\n\n          <ul className=\"Home-list\">\n            <li><a href=\"/hello-world\">Hello World</a></li>\n            <li><a href=\"/simple-storage\">Simple Storage</a></li>\n            <li><a href=\"/function\">Function</a></li>\n            <li><a href=\"/function-modifier\">Function Modifier</a></li>\n            <li><a href=\"/view-and-pure-functions\">View and Pure Functions</a></li>\n            <li><a href=\"/inheritance\">Inheritance</a></li>\n            <li><a href=\"/constructor\">Constructor</a></li>\n            <li><a href=\"/events\">Events</a></li>\n            <li><a href=\"/error\">Error</a></li>\n            <li><a href=\"/payable\">Payable</a></li>\n            <li><a href=\"/sending-ether\">Sending Ether</a></li>\n            <li><a href=\"/fallback\">Fallback</a></li>\n            <li><a href=\"/fallback-gas-limit\">Fallback Gas Limit</a></li>\n            <li><a href=\"/re-entrancy\">Re-Entrancy</a></li>\n            <li><a href=\"/self-destruct\">Self Destruct</a></li>\n            <li><a href=\"/import\">Import</a></li>\n            <li><a href=\"/safe-math\">Safe Math</a></li>\n          </ul>\n        </div>\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/foundation.css'\nimport hljsDefineSolidity from 'highlightjs-solidity'\n\nclass Html extends Component {\n  componentDidMount() {\n    hljsDefineSolidity(hljs)\n    hljs.initHighlightingOnLoad()\n  }\n\n  render() {\n    return (\n      <div dangerouslySetInnerHTML={{__html: this.props.html}}>\n      </div>\n    )\n  }\n}\n\nHtml.propTypes = {\n  html: PropTypes.string.isRequired\n}\n\nexport default Html\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Html from './Html'\nimport Footer from './Footer'\n\nclass Example extends Component {\n  render() {\n    return (\n      <div>\n        <h2>{this.props.title}</h2>\n\n        <Html html={this.props.html} />\n\n        <p>Try on <a href=\"https://remix.ethereum.org\" target=\"__blank\">Remix</a></p>\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  title: PropTypes.string.isRequired,\n  html: PropTypes.string.isRequired,\n}\n\nexport default Example\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass HelloWorld extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Hello World\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default HelloWorld\n","const html = `<pre><code class=\"language-solidity\">/*\npragma specifies what versions of Solidity this file can work on.\nThis file will not compile with a compiler earlier than version 0.5.3\nand it will also not work on a compiler starting from version 0.6.0\n*/\npragma solidity ^0.5.3;\n\ncontract HelloWorld {\n    function hello() public returns (string memory) {\n        return \"Hello World!\";\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SimpleStorage extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Simple Storage\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SimpleStorage\n","const html = `<p>State variables are variables which are permanently stored on the blockchain.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract SimpleStorage {\n    // Variables declared here, inside the contract but outside the\n    // functions will be stored on the blockchain.\n    string public text;\n\n    // Function to get text.\n    function get() public view returns (string memory) {\n        return text;\n    }\n    // Actually we don&#39;t need the function above. The compiler automatically\n    // creates getter functions for all public state variables.\n    // The compiler will create a function called text().\n\n    // Function to set text.\n    function set(string memory _text) public {\n        text = _text;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SafeMath extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Safe Math\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SafeMath\n","const html = `<p>Solidity overflow integers as if nothing is wrong. It would be nice if it threw an error.</p>\n<p>So we use <code>SafeMath</code> library by <a href=\"https://openzeppelin.org/\">OpenZeppelin</a>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Import SafeMath library from github (this import only works on Remix).\nimport \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\ncontract Math {\n    // Include the SafeMath library inside this contract\n    using SafeMath for uint;\n\n    // uint is aliase for uint256 (unsigned integer ranging from 0 to 2 ** 256 - 1)\n    uint public max = 2**256 - 1;\n    // Variables initialize to their default value, 0 in this case.\n    uint public min;\n\n    // Try:\n    // add(1, 2)\n    // add(0, -1)\n    function add(uint x, uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Arithmetic overflow does not throw any error.\n    function overflow() public view returns (uint) {\n        return max + 1; // returns 0\n    }\n\n    function underflow() public view returns (uint) {\n        return min - 1; // return 2 ** 256 - 1\n    }\n\n    // SafeMath.add throws an error when an integer overflows.\n    // Try:\n    // safeAdd(2 ** 256 - 1, 1)\n    function safeAdd(uint x, uint y) public view returns (uint) {\n        return x.add(y);\n    }\n\n    // SafeMath.sub throws an error when an integer underflows.\n    // Try:\n    // safeSub(0, 1)\n    function safeSub(uint x, uint y) public view returns (uint) {\n        return x.sub(y);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Payable extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Payable\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Payable\n","const html = `<p>Functions declared <code>payable</code> can receive <code>ether</code> for the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract ReceiveEther {\n    event Received(address sender, uint amount, uint balance);\n\n    // Get the amount of ethers stored in this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    // Try calling this function along with some ether.\n    // The balance of this contract will be automatically updated.\n    function sendEther() public payable {\n        emit Received(msg.sender, msg.value, address(this).balance);\n    }\n\n    // Try calling this function along with some ether.\n    // The function would throw an error since this function is not payable.\n    function notPayable() public {\n    }\n\n    // Delete this contract and refund all ether stored in this contract to msg.sender.\n    function kill() public {\n        selfdestruct(msg.sender);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SendingEther extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Sending Ether (send, transfer, call)\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SendingEther\n","const html = `<p>You can send Ether to other contracts by <code>send</code>, <code>transfer</code>, or <code>call</code></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Contract to receive Ether\ncontract Receiver {\n    // This is a special function called the fallback.\n    // The fallback function declared payable enables other contracts to\n    // send Ether by send, transfer, or call.\n    function () external payable {\n    }\n\n    // Helper function to check balance\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract TestSend {\n    event Log(bool sent);\n\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Send returns a boolean value indicating success or failure.\n        // This function is not recommended for sending Ether.\n        bool sent = addr.send(msg.value);\n\n        // Check the result of send by looking into the transaction logs.\n        emit Log(sent);\n    }\n}\n\ncontract TestTransfer {\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Transfer will throw an error if it fails sending Ether.\n        // This is the safest way (out of send, transfer and call) to send Ether.\n        addr.transfer(msg.value);\n    }\n}\n\ncontract TestCall {\n    event Log(bool sent);\n\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Call returns a boolean value indicating success or failure.\n        // We ignore the second value returned.\n        (bool sent,) = addr.call.value(msg.value)(\"\");\n\n        // Check the result of call by looking into the transaction logs.\n        emit Log(sent);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Fallback extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Fallback\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Fallback\n","const html = `<p>A <code>fallback function</code> is an anonymous function that does not take any arguments and does not return anything.</p>\n<p>Fallback functions are executed when</p>\n<ul>\n<li>calling a function that does not exist</li>\n<li>sending Ether directly to a contract</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Fallback {\n    event EtherReceived(address sender, uint amount);\n\n    // Fallback function must be declared as external.\n    function () external payable {\n        emit EtherReceived(msg.sender, msg.value);\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract TestFallback {\n    // Try calling test(address of the Fallback contract)\n    function test(Fallback fallback) public payable {\n        // Send Ether to the Fallback contract.\n        address(fallback).transfer(address(this).balance);\n\n        // Calling a function that does not exist in Fallback contract\n        address(fallback).call(abi.encodeWithSignature(\"nonExistingFunction()\"));\n\n        // Check the transaction logs. You will see the event \"EtherReceived\" emitted twice.\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass FallbackGasLimit extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Fallback Gas Limit\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default FallbackGasLimit\n","const html = `<p><code>Fallback</code> functions have a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract FallbackGasLimit {\n    event BurnGas(uint gasLeft);\n\n    // Try:\n    // Send ether to this contract from an account. This should succeed.\n    function () external payable {\n        // Use up gas by emitting events, logging the remaining gas\n        // on each iteration.\n        for (uint i = 0; i &lt; 10; i++) {\n            emit BurnGas(gasleft());\n        }\n    }\n}\n\ncontract TestFallbackGasLimit {\n    // Try:\n    // Execute this function. This function will fail since\n    // the fallback function of FallbackGasLimit is only allowed to use 2300 gas.\n    function test(FallbackGasLimit fallback) public {\n        address(fallback).transfer(0 ether);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Reentrancy extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Re-Entrancy\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Reentrancy\n","const html = `<p>Here is the setup. Contract <code>A</code> calls contract <code>B</code>.</p>\n<p>The <code>re-entracy</code> exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes\nit&#39;s execution.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Bank is a contract vulnerable to re-entrancy attack. Let&#39;s see why.\n// To illustrate this attack, we will use 2 accounts.\n// First account - Innocent user\n// Second account - Attacker\n\ncontract Bank {\n    mapping(address =&gt; uint) public balances;\n\n    // Using the first account, deposit 1 Ether in to this contract\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint amount) public {\n        if(balances[msg.sender] &gt;= amount) {\n            // Send Ether\n            (bool sent, ) = msg.sender.call.value(amount)(\"\");\n            // Throw an error if send fails.\n            require(sent, \"Failed to send ether\");\n\n            balances[msg.sender] -= amount;\n        }\n    }\n\n    // Helper function to check the total Ether stored in this contract\n    function getTotalBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Hack {\n    Bank public bank;\n\n    constructor(Bank _bank) public {\n        bank = _bank;\n    }\n\n    // This fallback is called when the Bank contract sends Ether to this contract.\n    function () external payable {\n        if (address(bank).balance &gt;= msg.value) {\n            bank.withdraw(msg.value);\n        }\n    }\n\n    // Try:\n    // Using the second account, call this function sending 1 Ether.\n    function attack() public payable {\n        bank.deposit.value(msg.value)();\n        bank.withdraw(msg.value);\n        // This contract should now have 2 Ethers:\n        // 1 Ether stolen from the first account and\n        // 1 Ether returned to this contract.\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SelfDestruct extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Self Destruct\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SelfDestruct\n","const html = `<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remainig Ether stored in the contract to an\ndesignated address.</p>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// To demonstrate how to force sending Ether to another contract:\n// 1. Deploy the SelfDestruct contract, funding 1 Ether.\n// 2. Deploy the Target contract.\n// 3. Execute kill function in SelfDestruct, passing the address of Target as input.\n// 4. Check the balance of Target contract. It should now have 1 Ether.\n\ncontract SelfDestruct {\n    constructor() public payable {\n    }\n\n    function kill(address payable to) public {\n        selfdestruct(to);\n    }\n}\n\ncontract Target {\n    // Notice this contract does not have a payable fallback,\n    // so we should not be able to send Ether to this contract...\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Events extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Events\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Events\n","const html = `<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cass for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Event {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, \"Hello World!\");\n        emit Log(msg.sender, \"Hello EVM!\");\n        emit AnotherLog();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Error extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Error\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Error\n","const html = `<p>You can throw an error by calling <code>assert</code>, <code>require</code> or <code>revert</code>.</p>\n<p>An error will undo all changes made to the state during a transaction.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Error {\n    uint public i;\n\n    // Require should be used to validate conditions such as:\n    // - inputs\n    // - return values from calls to other functions\n    // - return values from calls to other contracts\n    function testRequire(uint j) public {\n        require(j &gt; 100, \"j must be greater than 100\");\n        i += j;\n    }\n\n    // Assert should only be used to test for internal errors,\n    // and to check invariants.\n    // Try: testAssert(-1)\n    function testAssert(uint j) public {\n        i += j;\n        assert(i &gt;= j);\n    }\n\n    // Revert can be used to throw an error.\n    function testRevert(uint j) public {\n        i += j;\n        revert(\"Undoing state changes\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Events extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Import\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Events\n","const html = `<p>You can import local and external files in Solidity.</p>\n<h3 id=\"local\">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>├── Import.sol\n└── Foo.sol</code></pre><p>Foo.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Foo {\n    string public name = \"Foo\";\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// import Foo.sol from current directory\nimport \"./Foo.sol\";\n\ncontract Import {\n    // Initialize Foo.sol\n    Foo public foo = new Foo();\n\n    // Test Foo.sol by getting it&#39;s name.\n    function getFooName() public view returns (string memory) {\n        return foo.name();\n    }\n}\n</code></pre>\n<h3 id=\"external\">External</h3>\n<p>You can also import from <a href=\"https://github.com\">GitHub</a>, but you need to drop <code>blob/&lt;branch name&gt;</code> from the URL.</p>\n<pre><code class=\"language-solidity\">// https://github.com/owner/repo/blob/master/path/to/Contract.sol\n\nimport \"github.com/owner/repo/path/to/Contract.sol\"</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Function extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Function\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Function\n","const html = `<p>You can interact with a smart contract by calling the functions defined in the contract.</p>\n<p>Functions that change state variables cost Ether.</p>\n<p>Functions that do not change the state is free when it is called by an account.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Function {\n    uint counter;\n\n    // This function costs Ether.\n    function increment(uint i) public {\n        counter += i;\n    }\n\n    // This function is free when it is called from an account.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n\n    // Functions can return multiple values.\n    function returnMultipleVals() public pure returns (uint, uint) {\n        return (1, 2);\n    }\n\n    // Return values can be named. This is useful when a contract\n    // interacts with web3.js where you can access the returned\n    // values by name instead of the returned order.\n    function named() public pure returns (uint x, uint y) {\n        return (1, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted;\n    function assigned() public pure returns (uint x, uint y) {\n        x = 1;\n        y = 2;\n    }\n\n    // Use destructing assignment when calling another\n    // function that returns multiple values.\n    function destructingAssigments() public pure returns (uint) {\n        (uint x, uint y) = (1, 2);\n        // Values can be left out.\n        (uint a, , uint b) = (4, 5, 6);\n        (uint i,) =  returnMultipleVals();\n\n        return x + y + a + b + i;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass FunctionModifier extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Function Modifier\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default FunctionModifier\n","const html = `<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Validate inputs</li>\n<li>Check contract state</li>\n<li>Restrict access</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Modifier {\n    // We will use these variables to demonstrate how to use\n    // modifiers.\n    uint public x;\n    address public owner;\n\n    constructor() public {\n        // Set the owner of the contract.\n        owner = msg.sender;\n    }\n\n    // Modifier to check that the caller is the owner of\n    // the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        // Execute the function if the validation above passes.\n        _;\n    }\n\n    // Modifiers can take inputs. This modifier checks that the\n    // address passed in is not the zero address.\n    modifier validAddress(address addr) {\n        require(addr != address(0), \"Invalid address\");\n        _;\n    }\n\n    // Modifiers can be run before and / or after the function.\n    modifier sandwich() {\n        x += 1;\n        _;\n        x += 1;\n    }\n\n    // You can attach multiple modifiers to a function.\n    // In this case the two modifiers onlyOwner and validAddress\n    // will be executed before this function.\n    // Try:\n    // - call this function from an account that did not create\n    //   this contract\n    // - call this function with the zero address:\n    //   0x0000000000000000000000000000000000000000\n    // Both cases will throw an error.\n    function changeOwner(address newOwner)\n        onlyOwner\n        validAddress(newOwner)\n        public\n    {\n        owner = newOwner;\n    }\n\n    // The modifier &#39;sandwich&#39; executes code before and after\n    // this function. As a result, &#39;x&#39; will be incremented by 3.\n    function callMe() sandwich public {\n        x += 1;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Function extends Component {\n  render() {\n    return (\n      <Example\n        title=\"View and Pure Functions\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Function\n","const html = `<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be read.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function increment(uint a) public view returns (uint) {\n        return x + a;\n    }\n\n    // Promise not to read from or modify the state.\n    function add(uint a, uint b) public pure returns (uint) {\n        return a + b;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Inheritance extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Inheritance\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Inheritance\n","const html = `<p>Solidity supports multiple inheritance. Order of inheritance is important.</p>\n<p>Let&#39;s examine.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    function foo() public view returns (string memory) {\n        return \"A\";\n    }\n}\n\n// Contracts can inherit other contracts by using the keyword &#39;is&#39;.\ncontract B is A {\n    // Override A.foo()\n    function foo() public view returns (string memory) {\n        return \"B\";\n    }\n}\n\ncontract C is A {\n    // Override A.foo()\n    function foo() public view returns (string memory) {\n        return \"C\";\n    }\n}\n\n// Contracts can inherit from multiple parent contracts.\ncontract D is B, C {\n    // When a function is called that is defined multiple times in\n    // different contracts, parent contracts are searched from\n    // right to left.\n\n    // D.foo() returns \"C\"\n}\n\ncontract E is C, B {\n    // E.foo() returns \"B\"\n}\n\n// Inheritance must be ordered from “most base-like” to “most derived”.\n// Swapping the order of A and B will throw a compilation error.\ncontract F is A, B {\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Constructor extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Constructor\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Constructor\n","const html = `<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to parent <code>constructors</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.1;\n\ncontract A {\n    string public name;\n\n    constructor(string memory _name) public {\n        name = _name;\n    }\n}\n\n// There are 2 ways to initialize parent contract with parameters.\n\n// Pass the parameters here in the inheritance list.\ncontract B is A(\"Contract B\") {\n}\n\ncontract C is A {\n    // Pass the parameters here in the constructor, similar to modifiers.\n    constructor(string memory _name) A(_name) public {\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport './App.css'\nimport Header from './Header'\nimport Home from './Home'\nimport HelloWorld from './examples/HelloWorld'\nimport SimpleStorage from './examples/SimpleStorage'\nimport SafeMath from './examples/SafeMath'\nimport Payable from './examples/Payable'\nimport SendingEther from './examples/SendingEther'\nimport Fallback from './examples/Fallback'\nimport FallbackGasLimit from './examples/FallbackGasLimit'\nimport ReEntrancy from './examples/ReEntrancy'\nimport SelfDestruct from './examples/SelfDestruct'\nimport Events from './examples/Events'\nimport Error from './examples/Error'\nimport Import from './examples/Import'\nimport Function from './examples/Function'\nimport FunctionModifier from './examples/FunctionModifier'\nimport ViewAndPureFunctions from './examples/ViewAndPureFunctions'\nimport Inheritance from './examples/Inheritance'\nimport Constructor from './examples/Constructor'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-main\">\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route path=\"/hello-world\" component={HelloWorld} />\n              <Route path=\"/simple-storage\" component={SimpleStorage} />\n              <Route path=\"/import\" component={Import} />\n              <Route path=\"/safe-math\" component={SafeMath} />\n              <Route path=\"/events\" component={Events} />\n              <Route path=\"/error\" component={Error} />\n              <Route path=\"/sending-ether\" component={SendingEther} />\n              <Route path=\"/payable\" component={Payable} />\n              <Route path=\"/fallback\" component={Fallback} />\n              <Route path=\"/fallback-gas-limit\" component={FallbackGasLimit} />\n              <Route path=\"/re-entrancy\" component={ReEntrancy} />\n              <Route path=\"/self-destruct\" component={SelfDestruct} />\n              <Route path=\"/function\" component={Function} />\n              <Route path=\"/function-modifier\" component={FunctionModifier} />\n              <Route path=\"/view-and-pure-functions\" component={ViewAndPureFunctions} />\n              <Route path=\"/inheritance\" component={Inheritance} />\n              <Route path=\"/constructor\" component={Constructor} />\n              <Route component={Home} />\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}