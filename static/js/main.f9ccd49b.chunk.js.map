{"version":3,"sources":["logo.svg","Header.js","Footer.js","Home.js","Html.js","Example.js","examples/HelloWorld/index.js","examples/HelloWorld/index.html.js","examples/StateVariables/index.js","examples/StateVariables/index.html.js","examples/SafeMath/index.js","examples/SafeMath/index.html.js","examples/Payable/index.js","examples/Payable/index.html.js","examples/SendingEther/index.js","examples/SendingEther/index.html.js","examples/Fallback/index.js","examples/Fallback/index.html.js","examples/FallbackGasLimit/index.js","examples/FallbackGasLimit/index.html.js","examples/ReEntrancy/index.js","examples/ReEntrancy/index.html.js","examples/SelfDestruct/index.js","examples/SelfDestruct/index.html.js","examples/Events/index.js","examples/Events/index.html.js","examples/Error/index.js","examples/Error/index.html.js","examples/Import/index.js","examples/Import/index.html.js","examples/Function/index.js","examples/Function/index.html.js","examples/FunctionModifier/index.js","examples/FunctionModifier/index.html.js","examples/ViewAndPureFunctions/index.js","examples/ViewAndPureFunctions/index.html.js","examples/Inheritance/index.js","examples/Inheritance/index.html.js","examples/Shadow/index.js","examples/Shadow/index.html.js","examples/Constructor/index.js","examples/Constructor/index.html.js","examples/Super/index.js","examples/Super/index.html.js","examples/Visibility/index.js","examples/Visibility/index.html.js","examples/Loop/index.js","examples/Loop/index.html.js","examples/Enum/index.js","examples/Enum/index.html.js","examples/Mapping/index.js","examples/Mapping/index.html.js","examples/Array/index.js","examples/Array/index.html.js","examples/Structs/index.js","examples/Structs/index.html.js","examples/NewContract/index.js","examples/NewContract/index.html.js","examples/CallingContract/index.js","examples/CallingContract/index.html.js","examples/Call/index.js","examples/Call/index.html.js","examples/Delegatecall/index.js","examples/Delegatecall/index.html.js","examples/Library/index.js","examples/Library/index.html.js","examples/Wei/index.js","examples/Wei/index.html.js","examples/Gas/index.js","examples/Gas/index.html.js","examples/Keccak256/index.js","examples/Keccak256/index.html.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Header","react_default","a","createElement","className","href","src","logo","alt","Component","Footer","Home","src_Footer_0","Html","hljsDefineSolidity","hljs","initHighlightingOnLoad","dangerouslySetInnerHTML","__html","this","props","html","Example","title","src_Html","target","HelloWorld","src_Example","StateVariables","SafeMath","Payable","SendingEther","Fallback","FallbackGasLimit","Reentrancy","SelfDestruct","Events","Error","Function","FunctionModifier","Inheritance","Shadow","Constructor","Super","Visibility","Loop","Enum","Mapping","Array","Structs","NewContract","CallingContract","Call","Delegatecall","Library","Wei","Gas","Keccak256","App","src_Header_0","BrowserRouter","basename","process","Switch","Route","path","component","Import","ReEntrancy","ViewAndPureFunctions","Boolean","window","location","hostname","match","rootElement","document","getElementById","hasChildNodes","hydrate","src_App_0","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,gPCkBzBC,mLAZX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KACNJ,EAAAC,EAAAC,cAAA,OAAKG,IAAKC,IAAMC,IAAI,OAAOJ,UAAU,iBAGvCH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,gCARSI,aCSNC,gMARX,OACET,EAAAC,EAAAC,cAAA,KAAGC,UAAU,UACXH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sCAAR,+BADF,MACiFJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,wEAAR,UADjF,MAC6KJ,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gFAAR,mBAJ9JI,cC8HNE,mLA3HX,OACEV,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,eACZH,EAAAC,EAAAC,cAAA,KAAGE,KAAK,KAAR,wBAEFJ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,8BACqB,IACnBF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,mCAAR,YAFF,2BAMAJ,EAAAC,EAAAC,cAAA,MAAIC,UAAU,aACZH,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gBAAR,gBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,oBAAR,oBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,QAAR,QAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,aAAR,aAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,sBAAR,sBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,4BAAR,4BAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gBAAR,gBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,wCAAR,wCAIFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gBAAR,gBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,UAAR,6BAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,eAAR,eAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,WAAR,WAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,UAAR,UAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,SAAR,SAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,SAAR,SAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAR,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,UAAR,UAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAR,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iBAAR,0CAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,qBAAR,2BAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,SAAR,SAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,iBAAR,iBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAR,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAR,YAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kBAAR,kBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,aAAR,aAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,uBAAR,uBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,gBAAR,gBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,kBAAR,kBAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,YAAR,2BAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,WAAR,WAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,cAAR,cAEFJ,EAAAC,EAAAC,cAAA,UACEF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,QAAR,oBAKNJ,EAAAC,EAAAC,cAACS,EAAD,cAvHWH,wDCoBJI,8LAhBXC,IAAmBC,KACnBA,IAAKC,0DAIL,OACEf,EAAAC,EAAAC,cAAA,OAAKc,wBAAyB,CAACC,OAAQC,KAAKC,MAAMC,eARrCZ,aCoBJa,mLAnBX,OACErB,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAKgB,KAAKC,MAAMG,OAEhBtB,EAAAC,EAAAC,cAACqB,EAAD,CAAMH,KAAMF,KAAKC,MAAMC,OAEvBpB,EAAAC,EAAAC,cAAA,mBAAUF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,6BAA6BoB,OAAO,WAA5C,UAEVxB,EAAAC,EAAAC,cAACS,EAAD,cAVcH,aCUPiB,mLATX,OACEzB,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,cACNF,KCTE,0aDIeZ,aEMVmB,mLAJX,OAAO3B,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,kBAAkBF,KCNlC,mxBDImBZ,aEWdoB,mLATX,OACE5B,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,YACNF,KCTE,2kDDIaZ,aEWRqB,mLATX,OACE7B,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,UACNF,KCTE,ugCDIYZ,aEWPsB,mLATX,OACE9B,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,uCACNF,KCTE,qnEDIiBZ,aEWZuB,mLATX,OACE/B,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,WACNF,KCTE,qwCDIaZ,aEWRwB,mLATX,OACEhC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,qBACNF,KCTE,04BDIqBZ,aEWhByB,mLATX,OACEjC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,cACNF,KCTE,mnEDIeZ,aEWV0B,mLATX,OACElC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,gBACNF,KCTE,smCDIiBZ,aEWZ2B,mLATX,OACEnC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,SACNF,KCTE,isBDIWZ,aEWN4B,mLATX,OACEpC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,QACNF,KCTE,q/BDIUZ,aEWL2B,mLATX,OACEnC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,SACNF,KCTE,wlCDIWZ,aEWN6B,mLATX,OACErC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,WACNF,KCTE,6+CDIaZ,aEWR8B,mLATX,OACEtC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,oBACNF,KCTE,y7DDIqBZ,aEWhB6B,mLATX,OACErC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,0BACNF,KCTE,spBDIaZ,aEWR+B,mLATX,OACEvC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,cACNF,KCTE,0oCDIgBZ,aEMXgC,mLAJX,OAAOxC,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,sCAAsCF,KCNtD,g+BDIWZ,aEWNiC,mLATX,OACEzC,EAAAC,EAAAC,cAACwB,EAAD,CACEJ,MAAM,cACNF,KCTE,otBDIgBZ,aEMXkC,mLAJX,OAAO1C,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,2BAA2BF,KCN3C,wgDDIUZ,aEMLmC,mLAJX,OAAO3C,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,aAAaF,KCN7B,2qDDIeZ,aEMVoC,mLAJX,OAAO5C,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,OAAOF,KCNvB,8wBDISZ,aEMJqC,mLAJX,OAAO7C,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,OAAOF,KCNvB,q3BDISZ,aEMJsC,mLAJX,OAAO9C,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,UAAUF,KCN1B,0yCDIYZ,aEMPuC,mLAJX,OAAO/C,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,QAAQF,KCNxB,w4CDIUZ,aEMLwC,mLAJX,OAAOhD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,UAAUF,KCN1B,wgCDIYZ,aEMPyC,mLAJX,OAAOjD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,wCAAwCF,KCNxD,6hCDIgBZ,aEMX0C,mLAJX,OAAOlD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,yBAAyBF,KCNzC,qiCDIoBZ,aEMf2C,mLAJX,OAAOnD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,OAAOF,KCNvB,4iDDISZ,aEMJ4C,mLAJX,OAAOpD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,eAAeF,KCN/B,m9BDIiBZ,aEMZ6C,oLAJX,OAAOrD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,UAAUF,KCN1B,2pCDIYZ,aEMP8C,oLAJX,OAAOtD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,gBAAgBF,KCNhC,6UDIQZ,aEMH+C,oLAJX,OAAOvD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,MAAMF,KCNtB,6qCDIQZ,aEMHgD,oLAJX,OAAOxD,EAAAC,EAAAC,cAACwB,EAAD,CAASJ,MAAM,yBAAyBF,KCNzC,23DDIcZ,aE2FTiD,oLAtDX,OACEzD,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAACwD,EAAD,MACA1D,EAAAC,EAAAC,cAAA,OAAKC,UAAU,YACbH,EAAAC,EAAAC,cAACyD,EAAA,EAAD,CAAQC,SAAUC,IAChB7D,EAAAC,EAAAC,cAAC4D,EAAA,EAAD,KACE9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWxC,IACtCzB,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,mBAAmBC,UAAWtC,IAC1C3B,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAWC,IACjClE,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,aAAaC,UAAWrC,IACpC5B,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,UAAUC,UAAW9B,IACjCnC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAW7B,IAChCpC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,UAAWnC,IACxC9B,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWpC,IAClC7B,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAWlC,IACnC/B,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,sBAAsBC,UAAWjC,IAC7ChC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWE,IACtCnE,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,iBAAiBC,UAAW/B,IACxClC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,YAAYC,UAAW5B,IACnCrC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,qBAAqBC,UAAW3B,IAC5CtC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACEC,KAAK,2BACLC,UAAWG,IAEbpE,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAW1B,IACtCvC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CACEC,KAAK,uCACLC,UAAWzB,IAEbxC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,eAAeC,UAAWxB,IACtCzC,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWvB,IAChC1C,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,cAAcC,UAAWtB,IACrC3C,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWrB,IAC/B5C,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWpB,IAC/B7C,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWnB,IAClC9C,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWlB,IAChC/C,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWjB,IAClChD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWhB,IACvCjD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,oBAAoBC,UAAWf,IAC3ClD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWd,IAC/BnD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,gBAAgBC,UAAWb,IACvCpD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWZ,KAClCrD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,OAAOC,UAAWX,KAC9BtD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,OAAOC,UAAWV,KAC9BvD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOC,KAAK,WAAWC,UAAWT,KAClCxD,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAOE,UAAWvD,eA/CdF,aC3BE6D,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZN,IAAMC,GAAcC,SAASC,eAAe,QACxCF,GAAYG,gBACdC,kBAAQ9E,EAAAC,EAAAC,cAAC6E,GAAD,MAASL,IAEjBM,iBAAOhF,EAAAC,EAAAC,cAAC6E,GAAD,MAASL,IDuHZ,kBAAmBO,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.f9ccd49b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.da793b47.svg\";","import React, { Component } from 'react'\nimport './Header.css'\nimport logo from './logo.svg'\n\nclass Header extends Component {\n  render() {\n    return (\n      <div className=\"Header\">\n        <a href=\"/\">\n          <img src={logo} alt=\"logo\" className=\"Header-logo\" />\n        </a>\n\n        <h3><a href=\"/\">Solidity by Example</a></h3>\n      </div>\n    )\n  }\n}\n\nexport default Header\n","import React, { Component } from 'react'\nimport './Footer.css'\n\nclass Footer extends Component {\n  render() {\n    return (\n      <p className=\"footer\">\n        <a href=\"mailto:soliditybyexample@gmail.com\">soliditybyexample@gmail.com</a> | <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io\">source</a> | <a href=\"https://github.com/solidity-by-example/solidity-by-example.github.io#license\">license</a>\n      </p>\n    )\n  }\n}\n\nexport default Footer\n","import React, { Component } from \"react\"\nimport \"./Home.css\"\nimport Footer from \"./Footer\"\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"Home\">\n        <h1 className=\"Home-header\">\n          <a href=\"/\">Solidity by Example</a>\n        </h1>\n        <div className=\"Home-main\">\n          <p>\n            an introduction to{\" \"}\n            <a href=\"https://solidity.readthedocs.io\">Solidity</a> using example\n            programs\n          </p>\n\n          <ul className=\"Home-list\">\n            <li>\n              <a href=\"/hello-world\">Hello World</a>\n            </li>\n            <li>\n              <a href=\"/state-variables\">State Variables</a>\n            </li>\n            <li>\n              <a href=\"/gas\">Gas</a>\n            </li>\n            <li>\n              <a href=\"/function\">Function</a>\n            </li>\n            <li>\n              <a href=\"/function-modifier\">Function Modifier</a>\n            </li>\n            <li>\n              <a href=\"/view-and-pure-functions\">View and Pure Functions</a>\n            </li>\n            <li>\n              <a href=\"/inheritance\">Inheritance</a>\n            </li>\n            <li>\n              <a href=\"/shadowing-inherited-state-variables\">\n                Shadowing Inherited State Variables\n              </a>\n            </li>\n            <li>\n              <a href=\"/constructor\">Constructor</a>\n            </li>\n            <li>\n              <a href=\"/super\">Calling Parent Contracts</a>\n            </li>\n            <li>\n              <a href=\"/visibility\">Visibility</a>\n            </li>\n            <li>\n              <a href=\"/events\">Events</a>\n            </li>\n            <li>\n              <a href=\"/error\">Error</a>\n            </li>\n            <li>\n              <a href=\"/loop\">Loop</a>\n            </li>\n            <li>\n              <a href=\"/enum\">Enum</a>\n            </li>\n            <li>\n              <a href=\"/mapping\">Mapping</a>\n            </li>\n            <li>\n              <a href=\"/array\">Array</a>\n            </li>\n            <li>\n              <a href=\"/structs\">Structs</a>\n            </li>\n            <li>\n              <a href=\"/new-contract\">Creating Contract from Other Contract</a>\n            </li>\n            <li>\n              <a href=\"/calling-contract\">Calling Other Contract</a>\n            </li>\n            <li>\n              <a href=\"/call\">Call</a>\n            </li>\n            <li>\n              <a href=\"/delegatecall\">Delegatecall</a>\n            </li>\n            <li>\n              <a href=\"/Library\">Library</a>\n            </li>\n            <li>\n              <a href=\"/payable\">Payable</a>\n            </li>\n            <li>\n              <a href=\"/sending-ether\">Sending Ether</a>\n            </li>\n            <li>\n              <a href=\"/fallback\">Fallback</a>\n            </li>\n            <li>\n              <a href=\"/fallback-gas-limit\">Fallback Gas Limit</a>\n            </li>\n            <li>\n              <a href=\"/re-entrancy\">Re-Entrancy</a>\n            </li>\n            <li>\n              <a href=\"/self-destruct\">Self Destruct</a>\n            </li>\n            <li>\n              <a href=\"/hashing\">Hashing with Keccak256</a>\n            </li>\n            <li>\n              <a href=\"/import\">Import</a>\n            </li>\n            <li>\n              <a href=\"/safe-math\">Safe Math</a>\n            </li>\n            <li>\n              <a href=\"/wei\">Wei and Ether</a>\n            </li>\n          </ul>\n        </div>\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nexport default Home\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport hljs from 'highlight.js'\nimport 'highlight.js/styles/foundation.css'\nimport hljsDefineSolidity from 'highlightjs-solidity'\n\nclass Html extends Component {\n  componentDidMount() {\n    hljsDefineSolidity(hljs)\n    hljs.initHighlightingOnLoad()\n  }\n\n  render() {\n    return (\n      <div dangerouslySetInnerHTML={{__html: this.props.html}}>\n      </div>\n    )\n  }\n}\n\nHtml.propTypes = {\n  html: PropTypes.string.isRequired\n}\n\nexport default Html\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Html from './Html'\nimport Footer from './Footer'\n\nclass Example extends Component {\n  render() {\n    return (\n      <div>\n        <h2>{this.props.title}</h2>\n\n        <Html html={this.props.html} />\n\n        <p>Try on <a href=\"https://remix.ethereum.org\" target=\"__blank\">Remix</a></p>\n\n        <Footer />\n      </div>\n    )\n  }\n}\n\nExample.propTypes = {\n  title: PropTypes.string.isRequired,\n  html: PropTypes.string.isRequired,\n}\n\nexport default Example\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass HelloWorld extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Hello World\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default HelloWorld\n","const html = `<pre><code class=\"language-solidity\">/*\npragma specifies what versions of Solidity this file can work on.\nThis file will not compile with a compiler earlier than version 0.5.3\nand it will also not work on a compiler starting from version 0.6.0\n*/\npragma solidity ^0.5.3;\n\ncontract HelloWorld {\n    function hello() public returns (string memory) {\n        return \"Hello World!\";\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass StateVariables extends Component {\n  render() {\n    return <Example title=\"State Variables\" html={html} />\n  }\n}\n\nexport default StateVariables\n","const html = `<p>State variables are variables which are permanently stored on the blockchain.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract SimpleStorage {\n    // Variables declared here, inside the contract but outside the\n    // functions will be stored on the blockchain.\n    string public text;\n\n    // Function to get text.\n    function get() public view returns (string memory) {\n        return text;\n    }\n    // Actually we don&#39;t need the function above. The compiler automatically\n    // creates getter functions for all public state variables.\n    // The compiler will create a function called text().\n\n    // Function to set text.\n    function set(string memory _text) public {\n        text = _text;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SafeMath extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Safe Math\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SafeMath\n","const html = `<p>Solidity overflow integers as if nothing is wrong. It would be nice if it threw an error.</p>\n<p>So we use <code>SafeMath</code> library by <a href=\"https://openzeppelin.org/\">OpenZeppelin</a>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Import SafeMath library from github (this import only works on Remix).\nimport \"https://github.com/OpenZeppelin/openzeppelin-solidity/contracts/math/SafeMath.sol\";\n\ncontract Math {\n    // Include the SafeMath library inside this contract\n    using SafeMath for uint;\n\n    // uint is aliase for uint256 (unsigned integer ranging from 0 to 2 ** 256 - 1)\n    uint public max = 2**256 - 1;\n    // Variables initialize to their default value, 0 in this case.\n    uint public min;\n\n    // Try:\n    // add(1, 2)\n    // add(0, -1)\n    function add(uint x, uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Arithmetic overflow does not throw any error.\n    function overflow() public view returns (uint) {\n        return max + 1; // returns 0\n    }\n\n    function underflow() public view returns (uint) {\n        return min - 1; // return 2 ** 256 - 1\n    }\n\n    // SafeMath.add throws an error when an integer overflows.\n    // Try:\n    // safeAdd(2 ** 256 - 1, 1)\n    function safeAdd(uint x, uint y) public view returns (uint) {\n        return x.add(y);\n    }\n\n    // SafeMath.sub throws an error when an integer underflows.\n    // Try:\n    // safeSub(0, 1)\n    function safeSub(uint x, uint y) public view returns (uint) {\n        return x.sub(y);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Payable extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Payable\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Payable\n","const html = `<p>Functions declared <code>payable</code> can receive <code>ether</code> for the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract ReceiveEther {\n    event Received(address sender, uint amount, uint balance);\n\n    // Get the amount of ethers stored in this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n\n    // Try calling this function along with some ether.\n    // The balance of this contract will be automatically updated.\n    function sendEther() public payable {\n        emit Received(msg.sender, msg.value, address(this).balance);\n    }\n\n    // Try calling this function along with some ether.\n    // The function would throw an error since this function is not payable.\n    function notPayable() public {\n    }\n\n    // Delete this contract and refund all ether stored in this contract to msg.sender.\n    function kill() public {\n        selfdestruct(msg.sender);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SendingEther extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Sending Ether (send, transfer, call)\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SendingEther\n","const html = `<p>You can send Ether to other contracts by <code>send</code>, <code>transfer</code>, or <code>call</code></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Contract to receive Ether\ncontract Receiver {\n    // This is a special function called the fallback.\n    // The fallback function declared payable enables other contracts to\n    // send Ether by send, transfer, or call.\n    function () external payable {\n    }\n\n    // Helper function to check balance\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract TestSend {\n    event Log(bool sent);\n\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Send returns a boolean value indicating success or failure.\n        // This function is not recommended for sending Ether.\n        bool sent = addr.send(msg.value);\n\n        // Check the result of send by looking into the transaction logs.\n        emit Log(sent);\n    }\n}\n\ncontract TestTransfer {\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Transfer will throw an error if it fails sending Ether.\n        // This is the safest way (out of send, transfer and call) to send Ether.\n        addr.transfer(msg.value);\n    }\n}\n\ncontract TestCall {\n    event Log(bool sent);\n\n    // Try:\n    // Call this function with the address of the Receiver contract as input.\n    // Also send some Ether when calling this function.\n    function sendEther(address payable addr) public payable {\n        // Call returns a boolean value indicating success or failure.\n        // We ignore the second value returned.\n        (bool sent,) = addr.call.value(msg.value)(\"\");\n\n        // Check the result of call by looking into the transaction logs.\n        emit Log(sent);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Fallback extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Fallback\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Fallback\n","const html = `<p>A <code>fallback function</code> is an anonymous function that does not take any arguments and does not return anything.</p>\n<p>Fallback functions are executed when</p>\n<ul>\n<li>calling a function that does not exist</li>\n<li>sending Ether directly to a contract</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Fallback {\n    event EtherReceived(address sender, uint amount);\n\n    // Fallback function must be declared as external.\n    function () external payable {\n        emit EtherReceived(msg.sender, msg.value);\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract TestFallback {\n    // Try calling test(address of the Fallback contract)\n    function test(Fallback fallback) public payable {\n        // Send Ether to the Fallback contract.\n        address(fallback).transfer(address(this).balance);\n\n        // Calling a function that does not exist in Fallback contract\n        address(fallback).call(abi.encodeWithSignature(\"nonExistingFunction()\"));\n\n        // Check the transaction logs. You will see the event \"EtherReceived\" emitted twice.\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass FallbackGasLimit extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Fallback Gas Limit\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default FallbackGasLimit\n","const html = `<p><code>Fallback</code> functions have a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract FallbackGasLimit {\n    event BurnGas(uint gasLeft);\n\n    // Try:\n    // Send ether to this contract from an account. This should succeed.\n    function () external payable {\n        // Use up gas by emitting events, logging the remaining gas\n        // on each iteration.\n        for (uint i = 0; i &lt; 10; i++) {\n            emit BurnGas(gasleft());\n        }\n    }\n}\n\ncontract TestFallbackGasLimit {\n    // Try:\n    // Execute this function. This function will fail since\n    // the fallback function of FallbackGasLimit is only allowed to use 2300 gas.\n    function test(FallbackGasLimit fallback) public {\n        address(fallback).transfer(0 ether);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Reentrancy extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Re-Entrancy\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Reentrancy\n","const html = `<p>Here is the setup. Contract <code>A</code> calls contract <code>B</code>.</p>\n<p>The <code>re-entracy</code> exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes\nit&#39;s execution.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Bank is a contract vulnerable to re-entrancy attack. Let&#39;s see why.\n// To illustrate this attack, we will use 2 accounts.\n// First account - Innocent user\n// Second account - Attacker\n\ncontract Bank {\n    mapping(address =&gt; uint) public balances;\n\n    // Using the first account, deposit 1 Ether in to this contract\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint amount) public {\n        if(balances[msg.sender] &gt;= amount) {\n            // Send Ether\n            (bool sent, ) = msg.sender.call.value(amount)(\"\");\n            // Throw an error if send fails.\n            require(sent, \"Failed to send ether\");\n\n            balances[msg.sender] -= amount;\n        }\n    }\n\n    // Helper function to check the total Ether stored in this contract\n    function getTotalBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Hack {\n    Bank public bank;\n\n    constructor(Bank _bank) public {\n        bank = _bank;\n    }\n\n    // This fallback is called when the Bank contract sends Ether to this contract.\n    function () external payable {\n        if (address(bank).balance &gt;= msg.value) {\n            bank.withdraw(msg.value);\n        }\n    }\n\n    // Try:\n    // Using the second account, call this function sending 1 Ether.\n    function attack() public payable {\n        bank.deposit.value(msg.value)();\n        bank.withdraw(msg.value);\n        // This contract should now have 2 Ethers:\n        // 1 Ether stolen from the first account and\n        // 1 Ether returned to this contract.\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass SelfDestruct extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Self Destruct\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default SelfDestruct\n","const html = `<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remainig Ether stored in the contract to an\ndesignated address.</p>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// To demonstrate how to force sending Ether to another contract:\n// 1. Deploy the SelfDestruct contract, funding 1 Ether.\n// 2. Deploy the Target contract.\n// 3. Execute kill function in SelfDestruct, passing the address of Target as input.\n// 4. Check the balance of Target contract. It should now have 1 Ether.\n\ncontract SelfDestruct {\n    constructor() public payable {\n    }\n\n    function kill(address payable to) public {\n        selfdestruct(to);\n    }\n}\n\ncontract Target {\n    // Notice this contract does not have a payable fallback,\n    // so we should not be able to send Ether to this contract...\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Events extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Events\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Events\n","const html = `<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cass for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Event {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, \"Hello World!\");\n        emit Log(msg.sender, \"Hello EVM!\");\n        emit AnotherLog();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Error extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Error\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Error\n","const html = `<p>You can throw an error by calling <code>assert</code>, <code>require</code> or <code>revert</code>.</p>\n<p>An error will undo all changes made to the state during a transaction.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Error {\n    uint public i;\n\n    // Require should be used to validate conditions such as:\n    // - inputs\n    // - return values from calls to other functions\n    // - return values from calls to other contracts\n    function testRequire(uint j) public {\n        require(j &gt; 100, \"j must be greater than 100\");\n        i += j;\n    }\n\n    // Assert should only be used to test for internal errors,\n    // and to check invariants.\n    // Try: testAssert(-1)\n    function testAssert(uint j) public {\n        i += j;\n        assert(i &gt;= j);\n    }\n\n    // Revert can be used to throw an error.\n    function testRevert(uint j) public {\n        i += j;\n        revert(\"Undoing state changes\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Events extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Import\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Events\n","const html = `<p>You can import local and external files in Solidity.</p>\n<h3 id=\"local\">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>├── Import.sol\n└── Foo.sol</code></pre><p>Foo.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Foo {\n    string public name = \"Foo\";\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// import Foo.sol from current directory\nimport \"./Foo.sol\";\n\ncontract Import {\n    // Initialize Foo.sol\n    Foo public foo = new Foo();\n\n    // Test Foo.sol by getting it&#39;s name.\n    function getFooName() public view returns (string memory) {\n        return foo.name();\n    }\n}\n</code></pre>\n<h3 id=\"external\">External</h3>\n<p>You can also import from <a href=\"https://github.com\">GitHub</a>, but you need to drop <code>blob/&lt;branch name&gt;</code> from the URL.</p>\n<pre><code class=\"language-solidity\">// https://github.com/owner/repo/blob/master/path/to/Contract.sol\n\nimport \"github.com/owner/repo/path/to/Contract.sol\"</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Function extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Function\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Function\n","const html = `<p>You can interact with a smart contract by calling the functions defined in the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Function {\n    uint counter;\n\n    // This function costs Ether.\n    function increment(uint i) public {\n        counter += i;\n    }\n\n    // This function is free when it is called from an account.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n\n    // Functions can return multiple values.\n    function returnMultipleVals() public pure returns (uint, uint) {\n        return (1, 2);\n    }\n\n    // Return values can be named. This is useful when a contract\n    // interacts with web3.js where you can access the returned\n    // values by name instead of the returned order.\n    function named() public pure returns (uint x, uint y) {\n        return (1, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted;\n    function assigned() public pure returns (uint x, uint y) {\n        x = 1;\n        y = 2;\n    }\n\n    // Use destructing assignment when calling another\n    // function that returns multiple values.\n    function destructingAssigments() public pure returns (uint) {\n        (uint x, uint y) = (1, 2);\n        // Values can be left out.\n        (uint a, , uint b) = (4, 5, 6);\n        (uint i,) =  returnMultipleVals();\n\n        return x + y + a + b + i;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass FunctionModifier extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Function Modifier\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default FunctionModifier\n","const html = `<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Validate inputs</li>\n<li>Check contract state</li>\n<li>Restrict access</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Modifier {\n    // We will use these variables to demonstrate how to use\n    // modifiers.\n    uint public x;\n    address public owner;\n\n    constructor() public {\n        // Set the owner of the contract.\n        owner = msg.sender;\n    }\n\n    // Modifier to check that the caller is the owner of\n    // the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        // Execute the function if the validation above passes.\n        _;\n    }\n\n    // Modifiers can take inputs. This modifier checks that the\n    // address passed in is not the zero address.\n    modifier validAddress(address addr) {\n        require(addr != address(0), \"Invalid address\");\n        _;\n    }\n\n    // Modifiers can be run before and / or after the function.\n    modifier sandwich() {\n        x += 1;\n        _;\n        x += 1;\n    }\n\n    // You can attach multiple modifiers to a function.\n    // In this case the two modifiers onlyOwner and validAddress\n    // will be executed before this function.\n    // Try:\n    // - call this function from an account that did not create\n    //   this contract\n    // - call this function with the zero address:\n    //   0x0000000000000000000000000000000000000000\n    // Both cases will throw an error.\n    function changeOwner(address newOwner)\n        onlyOwner\n        validAddress(newOwner)\n        public\n    {\n        owner = newOwner;\n    }\n\n    // The modifier &#39;sandwich&#39; executes code before and after\n    // this function. As a result, &#39;x&#39; will be incremented by 3.\n    function callMe() sandwich public {\n        x += 1;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Function extends Component {\n  render() {\n    return (\n      <Example\n        title=\"View and Pure Functions\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Function\n","const html = `<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be read.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function increment(uint a) public view returns (uint) {\n        return x + a;\n    }\n\n    // Promise not to read from or modify the state.\n    function add(uint a, uint b) public pure returns (uint) {\n        return a + b;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Inheritance extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Inheritance\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Inheritance\n","const html = `<p>Solidity supports multiple inheritance. Order of inheritance is important.</p>\n<p>Let&#39;s examine.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    function foo() public view returns (string memory) {\n        return \"A\";\n    }\n}\n\n// Contracts can inherit other contracts by using the keyword &#39;is&#39;.\ncontract B is A {\n    // Override A.foo()\n    function foo() public view returns (string memory) {\n        return \"B\";\n    }\n}\n\ncontract C is A {\n    // Override A.foo()\n    function foo() public view returns (string memory) {\n        return \"C\";\n    }\n}\n\n// Contracts can inherit from multiple parent contracts.\ncontract D is B, C {\n    // When a function is called that is defined multiple times in\n    // different contracts, parent contracts are searched from\n    // right to left.\n\n    // D.foo() returns \"C\"\n}\n\ncontract E is C, B {\n    // E.foo() returns \"B\"\n}\n\n// Inheritance must be ordered from “most base-like” to “most derived”.\n// Swapping the order of A and B will throw a compilation error.\ncontract F is A, B {\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\";\nimport Example from \"../../Example\";\nimport html from \"./index.html.js\";\n\nclass Shadow extends Component {\n  render() {\n    return <Example title=\"Shadowing Inherited State Variables\" html={html} />;\n  }\n}\n\nexport default Shadow;\n","const html = `<p>Unlike functions, state variables cannot be overridden by re-declaring it\nin the child contract.</p>\n<p>Let&#39;s learn how to correctly override inherited state variables.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    string public name = \"Contract A\";\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n}\n\ncontract B is A {\n    // This is the incorrect way to override inherited state variables.\n    string public name = \"Contract B\";\n\n    // B.getName returns \"Contract A\"\n\n    // Functions defined in contract A that use the &#39;name&#39; state variable\n    // will access A.name. Functions defined in B that uses &#39;name&#39; will\n    // access B.name.\n}\n\ncontract C is A {\n    // This is the correct way to override inherited state variables.\n    constructor() public {\n        name = \"Contract C\";\n    }\n\n    // C.getName returns \"Contract C\"\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from 'react'\nimport Example from '../../Example'\nimport html from './index.html.js'\n\nclass Constructor extends Component {\n  render() {\n    return (\n      <Example\n        title=\"Constructor\"\n        html={html}\n      />\n    )\n  }\n}\n\nexport default Constructor\n","const html = `<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to parent <code>constructors</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.1;\n\ncontract A {\n    string public name;\n\n    constructor(string memory _name) public {\n        name = _name;\n    }\n}\n\n// There are 2 ways to initialize parent contract with parameters.\n\n// Pass the parameters here in the inheritance list.\ncontract B is A(\"Contract B\") {\n}\n\ncontract C is A {\n    // Pass the parameters here in the constructor, similar to modifiers.\n    constructor(string memory _name) A(_name) public {\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Super extends Component {\n  render() {\n    return <Example title=\"Calling Parent Contracts\" html={html} />\n  }\n}\n\nexport default Super\n","const html = `<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.</p>\n<p>By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    // This is called an event. You can emit events from your function\n    // and they are logged into the transaction log.\n    // In our case, this will be useful for tracing function calls.\n    event Log(string message);\n\n    function doSomething() public {\n        emit Log(\"A.doSomething called\");\n    }\n\n    function doSomethingElse() public {\n        emit Log(\"A.doSomethingElse called\");\n    }\n}\n\ncontract B is A {\n    function doSomething() public {\n        emit Log(\"B.doSomething called\");\n        A.doSomething();\n    }\n    function doSomethingElse() public {\n        emit Log(\"B.doSomethingElse called\");\n        super.doSomethingElse();\n    }\n}\n\ncontract C is A {\n    function doSomething() public {\n        emit Log(\"C.doSomething called\");\n        A.doSomething();\n    }\n\n    function doSomethingElse() public {\n        emit Log(\"C.doSomethingElse called\");\n        super.doSomethingElse();\n    }\n}\n\ncontract D is B, C {\n    // Try:\n    // - Call D.doSomething and check the transaction logs.\n    //   Although D inherits A, B and C, it only called C and then A.\n    // - Call D.doSomethingElse and check the transaction logs\n    //   D called C, then B, and finally A as expected.\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Visibility extends Component {\n  render() {\n    return <Example title=\"Visibility\" html={html} />\n  }\n}\n\nexport default Visibility\n","const html = `<p>Functions have to specified as one of <code>external</code>, <code>public</code>, <code>internal</code> or <code>private</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Base {\n    event Log(string visibility);\n\n    // External functions can only be called by other contract\n    // or accounts.\n    function externalFunc() external {\n        emit Log(\"Called a external function\");\n    }\n\n    // Public functions can be called both internally and externally.\n    function publicFunc() public {\n        emit Log(\"Called a public function\");\n    }\n\n    // Private function can only be called internally by this contract\n    // Other contracts inheritting from this contract cannot\n    // call this function.\n    function privateFunc(string memory message) private {\n        emit Log(message);\n    }\n\n    function testPrivateFunc() public {\n        privateFunc(\"Called a private function from Base contract\");\n    }\n\n    // Internal function can only be called internally by this contract\n    // or by other contracts that inherit from this contract.\n    function internalFunc(string memory message) internal {\n        emit Log(message);\n    }\n\n    function testInternalFunc() public {\n        internalFunc(\"Called an internal function from Base contract\");\n    }\n}\n\ncontract TestInternal is Base {\n    // This function will not compile\n    // function testPrivateFunc() public {\n    //     privateFunc(\"Called private function from TestInternal contract\");\n    // }\n\n    function testInternalFunc() public {\n        internalFunc(\"Called an internal function from TestInternal contract\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Loop extends Component {\n  render() {\n    return <Example title=\"Loop\" html={html} />\n  }\n}\n\nexport default Loop\n","const html = `<p>Looping in Solidity is tricky.</p>\n<p>The number of iteration in a loop can grow and spend more gas than the\ngas limit, causing your contract to stall.</p>\n<p>There are two gas limits to keep in mind.</p>\n<ul>\n<li>Transcation gas limit, set by the caller.</li>\n<li>Block gas limit</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Loop {\n    uint public count;\n\n    // This is a demonstration of transaction gas limit.\n    // Try:\n    // Set the gas limit to 100000 and loop(100).\n    // It should throw an error after spending all the gas.\n    function loop(uint n) public returns (uint) {\n        for (uint i = 0; i &lt; n; i++) {\n            count++;\n        }\n\n        return count;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Enum extends Component {\n  render() {\n    return <Example title=\"Enum\" html={html} />\n  }\n}\n\nexport default Enum\n","const html = `<p>Solidity supports enumerables and they are useful to keep track of state.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Shipping {\n    // Order matters\n    enum Status {\n        Pending,\n        Shipping,\n        Delivered,\n        Cancelled\n    }\n\n    Status public status;\n\n    // Try:\n    // - execute ship() and then confirmDelivery()\n    // - re-deploy the contract and execute cancel()\n    // Any other order of execution fails.\n\n    function ship() public {\n        require(status == Status.Pending);\n        status = Status.Shipping;\n    }\n\n    function confirmDelivery() public {\n        require(status == Status.Shipping);\n        status = Status.Delivered;\n    }\n\n    function cancel() public {\n        require(status == Status.Pending);\n        status = Status.Cancelled;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Mapping extends Component {\n  render() {\n    return <Example title=\"Mapping\" html={html} />\n  }\n}\n\nexport default Mapping\n","const html = `<p>Maps are created with the syntax <code>mapping(keyType =&gt; valueType)</code>.</p>\n<p><code>keyType</code> can be value types such as <code>uint</code>, <code>address</code> or <code>bytes</code>.</p>\n<p><code>valueType</code> can be any type.</p>\n<p>Mappings are not iterable.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.1;\n\ncontract Mapping {\n    // Mapping from address to uint\n    mapping(address =&gt; uint) public balances;\n    // Nested mapping\n    mapping(address =&gt; mapping(address =&gt; uint)) public allowance;\n\n    function mint(uint amount) public {\n        // Updating mapping values\n        balances[msg.sender] += amount;\n    }\n\n    function burn() public {\n        // Deleting mapping values\n        delete balances[msg.sender];\n    }\n\n    function approve(address to, uint amount) public {\n        // Accessing and setting nested map values\n        allowance[msg.sender][to] = amount;\n    }\n\n    function transferFrom(address from, address to, uint amount) public {\n        require(balances[from] &gt;= amount, \"Insufficient funds\");\n        require(allowance[from][to] &gt;= amount, \"Not allowed\");\n\n        balances[from] -= amount;\n        balances[to] += amount;\n\n        allowance[from][to] -= amount;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Array extends Component {\n  render() {\n    return <Example title=\"Array\" html={html} />\n  }\n}\n\nexport default Array\n","const html = `<p>Array can have a compile-time fixed size or a dynamic size.</p>\n<p>Solidity creates a <code>getter</code> for <code>public</code> arrays.</p>\n<p>Deleting an element creates a gap in the array. One trick to keep the array</p>\n<p>compact is to move the last element into the place to delete.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Array {\n    // Several ways to initialize an array\n    uint[] public myArr;\n    uint[] public myArr2 = [1,2,3];\n\n    uint[10] public myFixedArr;\n\n    function arrayFuncs() public returns (uint) {\n        // Append 1 to the array\n        myArr.push(1);\n        return myArr[myArr.length - 1];\n    }\n}\n\ncontract CompactArray {\n    address[] public addresses;\n\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        addresses[index] = addresses[addresses.length - 1];\n\n        // Remove the last element\n        addresses.pop();\n        // This has the same effect has deleting the last element.\n        // addresses.length--;\n    }\n\n    function test() public {\n        addresses.push(address(1));\n        addresses.push(address(2));\n        addresses.push(address(3));\n\n        remove(1);\n\n        assert(addresses.length == 2);\n        assert(addresses[0] == address(1));\n        assert(addresses[1] == address(3));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Structs extends Component {\n  render() {\n    return <Example title=\"Structs\" html={html} />\n  }\n}\n\nexport default Structs\n","const html = `<p>You can define your own type by creating a <code>struct</code>.</p>\n<p>They are useful for grouping togther related data.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Todos {\n    struct Todo {\n        string text;\n        bool completed;\n    }\n\n    // An array of &#39;Todo&#39; structs\n    Todo[] public todos;\n\n    function create(string memory text) public {\n        todos.push(Todo({\n            text: text,\n            completed: false\n        }));\n    }\n\n    function toggleCompleted(uint index) public {\n        Todo storage todo = todos[index];\n        todo.completed = !todo.completed;\n    }\n\n    // Solidity automatically created a getter for&#39; todos&#39; so\n    // you don&#39;t actually need this function.\n    function getTodo(uint index)\n        public\n        view\n        returns (string memory text, bool completed)\n    {\n        Todo storage todo = todos[index];\n        return (todo.text, todo.completed);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass NewContract extends Component {\n  render() {\n    return <Example title=\"Creating Contract from Other Contract\" html={html} />\n  }\n}\n\nexport default NewContract\n","const html = `<p>Contracts can be created by other contracts using the <code>new</code> keyword.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Car {\n    address public owner;\n    string public name;\n\n    constructor(address _owner, string memory _name) public payable {\n        owner = _owner;\n        name = _name;\n    }\n}\n\ncontract CarFactory {\n    Car public car = new Car(msg.sender, \"Carol\");\n\n    Car[] public cars;\n\n    function create(string memory name) public {\n        Car c = new Car(msg.sender, name);\n        cars.push(c);\n    }\n\n    function createAndSendEther(string memory name) public payable {\n        // Send ether along with the creation\n        Car c = (new Car).value(msg.value)(msg.sender, name);\n        cars.push(c);\n    }\n\n    function getCar(uint index)\n      public\n      view\n      returns (address owner, string memory name, uint balance)\n    {\n        Car c = cars[index];\n\n        return (c.owner(), c.name(), address(c).balance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass CallingContract extends Component {\n  render() {\n    return <Example title=\"Calling Other Contract\" html={html} />\n  }\n}\n\nexport default CallingContract\n","const html = `<p>Contract can call other contracts in 2 ways.</p>\n<p>The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.</p>\n<p>Another way to call other contracts is to use the low-level <code>call</code>.</p>\n<p>This method is not recommended.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    uint public x;\n\n    function setX(uint _x) public returns (uint) {\n        x = _x;\n        return x;\n    }\n}\n\ncontract B {\n    function setX(A a, uint x) public returns (uint) {\n        return a.setX(x);\n    }\n\n    function getX(A a) public view returns (uint) {\n        return a.x();\n    }\n}\n\ncontract C {\n  function setX(A a, uint x) public returns (bytes memory) {\n    // low-level way to call another contract\n    // This method is useful when you want to call an arbitrary contract.\n    (bool success, bytes memory returnData) = address(a).call(\n      abi.encodeWithSignature(\"setX(uint256)\", x);\n    );\n    require(success);\n\n    return returnData;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Call extends Component {\n  render() {\n    return <Example title=\"Call\" html={html} />\n  }\n}\n\nexport default Call\n","const html = `<p><code>call</code> is a low level function to interact with other contracts.</p>\n<p>This is not the recommend way, but this might be the only way if your contract</p>\n<p>does not have the ABI for the other contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract A {\n    event Received(address caller, uint amount, string message);\n\n    function () external payable {\n        emit Received(msg.sender, msg.value, \"Called fallback\");\n    }\n\n    function callMe(string memory message) public payable {\n        emit Received(msg.sender, msg.value, message);\n    }\n}\n\ncontract B {\n    event Response(bool success, bytes returnedData);\n\n    // Let&#39;s imagine that contract B does not have the source code for\n    // contract A, but we do know the address of A and the function to call.\n    function callA(address a) public payable {\n        // You can send ether and specify a custom gas amount\n         (bool success, bytes memory returnData) = a.call\n            .value(address(this).balance)\n            .gas(5000)(\n                abi.encodeWithSignature(\"callMe(string)\", \"Call me back\")\n            );\n\n         emit Response(success, returnData);\n    }\n\n    // Calling a function that does not exist triggers the fallback function.\n    function callDoesNotExist(address a) public payable {\n         (bool success, bytes memory returnData) = a.call(\n                abi.encodeWithSignature(\"doesNotExist()\")\n            );\n\n         emit Response(success, returnData);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Delegatecall extends Component {\n  render() {\n    return <Example title=\"Delegatecall\" html={html} />\n  }\n}\n\nexport default Delegatecall\n","const html = `<p><code>delegatecall</code> is a low level function similar to <code>call</code>.</p>\n<p>When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>&#39;s code is excuted</p>\n<p>with contract <code>A</code>&#39;s storage, <code>msg.sender</code> and <code>msg.value</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\n// Firts deploy this contract\ncontract A {\n  uint public n;\n  address public sender;\n  uint public value;\n\n  function setN(uint _n) public payable {\n    n = _n;\n    sender = msg.sender;\n    value = msg.value;\n  }\n}\n\ncontract B {\n  uint public n;\n  address public sender;\n  uint public value;\n\n  function delegatecallSetN(address a, uint _n) public payable {\n    // B&#39;s storage is set, A is not modified.\n    (bool success, bytes memory returnData) = a.delegatecall(\n      abi.encodeWithSignature(\"setN(uint256)\", _n)\n    );\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Library extends Component {\n  render() {\n    return <Example title=\"Library\" html={html} />\n  }\n}\n\nexport default Library\n","const html = `<p>Libraries are similar to contracts, but they are deployed only once at a</p>\n<p>specific address and their code is reused using the <code>delegatecall</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\nlibrary MyLib {\n    function incrementBy(uint i, uint val) public pure returns (uint) {\n        return i + val;\n    }\n\n    // Array function to delete element at index and re-organize the array\n    // so that their are no gaps between the elements.\n    function deleteElement(string[] storage arr, uint index) internal {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n\n        // Remove the last element\n        arr.pop();\n    }\n}\n\ncontract TestMyLib {\n    using MyLib for uint;\n    using MyLib for string[];\n\n    string[] public array = [\"foo\", \"bar\"];\n\n    function testIncrementBy() public pure returns (uint) {\n        uint i = 10;\n\n        return i.incrementBy(10);\n    }\n\n    function testDeleteElement() public {\n        array.push(\"abc\");\n        array.deleteElement(1);\n        // array should now be [\"foo\", \"abc\"]\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Wei extends Component {\n  render() {\n    return <Example title=\"Wei and Ether\" html={html} />\n  }\n}\n\nexport default Wei\n","const html = `<p>Ether can be denominated in smaller units. The smallest unit is <code>wei</code></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Wei {\n  uint public oneEther = 1 ether;\n\n  function test() public pure {\n    assert(1 ether == 1e18 wei);\n    assert(1 wei == 1);\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Gas extends Component {\n  render() {\n    return <Example title=\"Gas\" html={html} />\n  }\n}\n\nexport default Gas\n","const html = `<p>Transactions cost <code>gas</code>. You pay <code>gas price * gas</code> in Ether.</p>\n<p>You specify the gas price. Transactions will be processed faster with higher gas price.</p>\n<p>Unspent gas will be refunded.</p>\n<p>There are two limits to the amount of gas you can spend</p>\n<ul>\n<li>gas limit set by you (how much you are willing to pay for the transaction)</li>\n<li>maximum amount of gas allowed in a block set by the network</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Gas {\n  // Transactions spend gas even if it does nothing.\n  function doNothing() public {}\n\n  // Transaction costs in ether = gas price * gas used\n  function gasPrice() public returns (uint) {\n    return tx.gasprice;\n  }\n\n  // Getter functions cost no gas when called by an external account.\n  function getNothing() public pure {}\n\n  // Using up all the gas throws and reverts state changes.\n  uint public i = 0;\n\n  function gasLimit() public {\n    while(gasleft() &gt; 0) {\n      i += 1;\n    }\n  }\n\n  // Block gas limit\n  function getBlockGasLimit() public view returns (uint) {\n    return block.gaslimit;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport Example from \"../../Example\"\nimport html from \"./index.html.js\"\n\nclass Keccak256 extends Component {\n  render() {\n    return <Example title=\"Hashing with Keccak256\" html={html} />\n  }\n}\n\nexport default Keccak256\n","const html = `<p><code>keccak256</code> computes the Keccak-256 hash of the input.</p>\n<p>Some use cases are:</p>\n<ul>\n<li>Creating an deterministic unique ID from a input</li>\n<li>Commit-Reveal scheme</li>\n<li>Compact cryptographic signature (by signing the hash instead of a larger input)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.3;\n\ncontract Keccak256 {\n  struct Todo {\n    string text;\n    uint createdAt;\n  }\n\n  // Example to create an ID using keccak256\n  function getTodoId() public pure returns (uint) {\n    Todo memory todo = Todo({\n      text: \"Creawte Todo ID\",\n      createdAt:123456\n    });\n\n    return uint(keccak256(abi.encodePacked(todo.text, todo.createdAt)));\n  }\n\n  // Example of commit-reveal scheme\n  // Try:\n  // 1. create a commitment hash by calling getCommitmentHash(your address, \"Trump\")\n  // 2. commit(hash returned from previous step)\n  // 3. revel(your address, \"Trump\", your commitment hash) should return true\n  // You have successfully voted without revealing your choice.\n  struct Vote {\n    address voter;\n    string candidate;\n  }\n\n  mapping(bytes32 =&gt; bool) public voted;\n\n  function getCommitmentHash(address voter, string memory candidate)\n    public\n    view\n    returns (bytes32)\n  {\n    Vote memory vote = Vote({\n      voter: voter,\n      candidate: candidate\n    });\n\n    return keccak256(abi.encodePacked(vote.voter, vote.candidate));\n  }\n\n  function commit(bytes32 commitmentHash) public {\n    voted[commitmentHash] = true;\n  }\n\n  function reveal(\n    address voter, string memory candidate, bytes32 commitmentHash\n  )\n    public\n    view\n    returns (bool)\n  {\n    bytes32 hash = getCommitmentHash(voter, candidate);\n\n    require(voted[hash], \"Voter has not voted\");\n    require(hash == commitmentHash, \"Invalid commitment hash\");\n\n    return true;\n  }\n}\n</code></pre>\n`\n\nexport default html\n","import React, { Component } from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport \"./App.css\"\nimport Header from \"./Header\"\nimport Home from \"./Home\"\nimport HelloWorld from \"./examples/HelloWorld\"\nimport StateVariables from \"./examples/StateVariables\"\nimport SafeMath from \"./examples/SafeMath\"\nimport Payable from \"./examples/Payable\"\nimport SendingEther from \"./examples/SendingEther\"\nimport Fallback from \"./examples/Fallback\"\nimport FallbackGasLimit from \"./examples/FallbackGasLimit\"\nimport ReEntrancy from \"./examples/ReEntrancy\"\nimport SelfDestruct from \"./examples/SelfDestruct\"\nimport Events from \"./examples/Events\"\nimport Error from \"./examples/Error\"\nimport Import from \"./examples/Import\"\nimport Function from \"./examples/Function\"\nimport FunctionModifier from \"./examples/FunctionModifier\"\nimport ViewAndPureFunctions from \"./examples/ViewAndPureFunctions\"\nimport Inheritance from \"./examples/Inheritance\"\nimport Shadow from \"./examples/Shadow\"\nimport Constructor from \"./examples/Constructor\"\nimport Super from \"./examples/Super\"\nimport Visibility from \"./examples/Visibility\"\nimport Loop from \"./examples/Loop\"\nimport Enum from \"./examples/Enum\"\nimport Mapping from \"./examples/Mapping\"\nimport Array from \"./examples/Array\"\nimport Structs from \"./examples/Structs\"\nimport NewContract from \"./examples/NewContract\"\nimport CallingContract from \"./examples/CallingContract\"\nimport Call from \"./examples/Call\"\nimport Delegatecall from \"./examples/Delegatecall\"\nimport Library from \"./examples/Library\"\nimport Wei from \"./examples/Wei\"\nimport Gas from \"./examples/Gas\"\nimport Keccak256 from \"./examples/Keccak256\"\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Header />\n        <div className=\"App-main\">\n          <Router basename={process.env.PUBLIC_URL}>\n            <Switch>\n              <Route path=\"/hello-world\" component={HelloWorld} />\n              <Route path=\"/state-variables\" component={StateVariables} />\n              <Route path=\"/import\" component={Import} />\n              <Route path=\"/safe-math\" component={SafeMath} />\n              <Route path=\"/events\" component={Events} />\n              <Route path=\"/error\" component={Error} />\n              <Route path=\"/sending-ether\" component={SendingEther} />\n              <Route path=\"/payable\" component={Payable} />\n              <Route path=\"/fallback\" component={Fallback} />\n              <Route path=\"/fallback-gas-limit\" component={FallbackGasLimit} />\n              <Route path=\"/re-entrancy\" component={ReEntrancy} />\n              <Route path=\"/self-destruct\" component={SelfDestruct} />\n              <Route path=\"/function\" component={Function} />\n              <Route path=\"/function-modifier\" component={FunctionModifier} />\n              <Route\n                path=\"/view-and-pure-functions\"\n                component={ViewAndPureFunctions}\n              />\n              <Route path=\"/inheritance\" component={Inheritance} />\n              <Route\n                path=\"/shadowing-inherited-state-variables\"\n                component={Shadow}\n              />\n              <Route path=\"/constructor\" component={Constructor} />\n              <Route path=\"/super\" component={Super} />\n              <Route path=\"/visibility\" component={Visibility} />\n              <Route path=\"/loop\" component={Loop} />\n              <Route path=\"/enum\" component={Enum} />\n              <Route path=\"/mapping\" component={Mapping} />\n              <Route path=\"/array\" component={Array} />\n              <Route path=\"/structs\" component={Structs} />\n              <Route path=\"/new-contract\" component={NewContract} />\n              <Route path=\"/calling-contract\" component={CallingContract} />\n              <Route path=\"/call\" component={Call} />\n              <Route path=\"/delegatecall\" component={Delegatecall} />\n              <Route path=\"/library\" component={Library} />\n              <Route path=\"/wei\" component={Wei} />\n              <Route path=\"/gas\" component={Gas} />\n              <Route path=\"/hashing\" component={Keccak256} />\n              <Route component={Home} />\n            </Switch>\n          </Router>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}