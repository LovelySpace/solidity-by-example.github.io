{"version":3,"sources":["App.module.css","components/Header.module.css","components/Example.module.css","components/logo.svg","components/Header.js","components/Footer.js","components/SEO.js","components/Html.js","components/Example.js","constants.js","routes.js","pages/MultiSigWallet/index.js","pages/MultiSigWallet/index.html.js","pages/MerkleTree/index.js","pages/MerkleTree/index.html.js","pages/IterableMapping/index.js","pages/IterableMapping/index.html.js","pages/Create2/index.js","pages/Create2/index.html.js","pages/UniDirectionalPaymentChannel/index.js","pages/UniDirectionalPaymentChannel/index.html.js","pages/BiDirectionalPaymentChannel/index.js","pages/BiDirectionalPaymentChannel/index.html.js","pages/ReEntrancy/index.js","pages/ReEntrancy/index.html.js","pages/SelfDestruct/index.js","pages/SelfDestruct/index.html.js","pages/HelloWorld/index.js","pages/HelloWorld/index.html.js","pages/FirstApp/index.js","pages/FirstApp/index.html.js","pages/Primitives/index.js","pages/Primitives/index.html.js","pages/Variables/index.js","pages/Variables/index.html.js","pages/StateVariables/index.js","pages/StateVariables/index.html.js","pages/EtherUnits/index.js","pages/EtherUnits/index.html.js","pages/Gas/index.js","pages/Gas/index.html.js","pages/IfElse/index.js","pages/IfElse/index.html.js","pages/Loop/index.js","pages/Loop/index.html.js","pages/Mapping/index.js","pages/Mapping/index.html.js","pages/Array/index.js","pages/Array/index.html.js","pages/Enum/index.js","pages/Enum/index.html.js","pages/Structs/index.js","pages/Structs/index.html.js","pages/DataLocations/index.js","pages/DataLocations/index.html.js","pages/Function/index.js","pages/Function/index.html.js","pages/ViewAndPureFunctions/index.js","pages/ViewAndPureFunctions/index.html.js","pages/Error/index.js","pages/Error/index.html.js","pages/FunctionModifier/index.js","pages/FunctionModifier/index.html.js","pages/Events/index.js","pages/Events/index.html.js","pages/Constructor/index.js","pages/Constructor/index.html.js","pages/Inheritance/index.js","pages/Inheritance/index.html.js","pages/Shadow/index.js","pages/Shadow/index.html.js","pages/Super/index.js","pages/Super/index.html.js","pages/Visibility/index.js","pages/Visibility/index.html.js","pages/Payable/index.js","pages/Payable/index.html.js","pages/SendingEther/index.js","pages/SendingEther/index.html.js","pages/Fallback/index.js","pages/Fallback/index.html.js","pages/Call/index.js","pages/Call/index.html.js","pages/Delegatecall/index.js","pages/Delegatecall/index.html.js","pages/CallingContract/index.js","pages/CallingContract/index.html.js","pages/NewContract/index.js","pages/NewContract/index.html.js","pages/Import/index.js","pages/Import/index.html.js","pages/Library/index.js","pages/Library/index.html.js","pages/Keccak256/index.js","pages/Keccak256/index.html.js","pages/Signature/index.js","pages/Signature/index.html.js","pages/Home/index.js","App.js","serviceWorker.js","index.js","components/Footer.module.css","pages/Home/index.module.css"],"names":["module","exports","Header","props","className","styles","component","href","src","logo","alt","Footer","row","target","bar","SEO","title","description","name","content","Html","html","useEffect","navigator","userAgent","document","querySelectorAll","forEach","pre","div","createElement","button","ariaLabel","icon","appendChild","code","firstChild","insertBefore","addEventListener","e","preventDefault","textArea","setAttribute","body","value","innerText","select","execCommand","removeChild","copy","childNodes","hljsDefineSolidity","hljs","initHighlightingOnLoad","dangerouslySetInnerHTML","__html","Example","APP_ROUTES","path","HACK_ROUTES","ROUTES_BY_CATEGORY","routes","map","route","ROUTES","reduce","arr","push","Home","header","main","i","key","list","App","basename","process","footer","Boolean","window","location","hostname","match","rootElement","getElementById","hasChildNodes","hydrate","render","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a1449f33.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"App_component__1dd61\",\"main\":\"App_main__3ZkGI\",\"footer\":\"App_footer__29Fsv\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Header_component__1tkkW\",\"logo\":\"Header_logo__2ins2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Example_component__mzuGC\",\"content\":\"Example_content__3-AiU\"};","module.exports = __webpack_public_path__ + \"static/media/logo.da793b47.svg\";","import React from \"react\"\nimport styles from \"./Header.module.css\"\nimport logo from \"./logo.svg\"\n\nfunction Header(props) {\n  return (\n    <div className={styles.component}>\n      <a href=\"/\">\n        <img src={logo} alt=\"logo\" className={styles.logo} />\n      </a>\n\n      <h3>\n        <a href=\"/\">\n          <div>Solidity by Example</div>\n          <div>version 0.5.16</div>\n        </a>\n      </h3>\n    </div>\n  )\n}\n\nexport default Header\n","import React from \"react\"\nimport styles from \"./Footer.module.css\"\n\nfunction Footer() {\n  return (\n    <div className={styles.component}>\n      <div className={styles.row}>\n        <a\n          href=\"https://etherscan.io/address/0xA8DD4bA80d8904d7cAcE5c3622CCf78bEa5AcFEe\"\n          target=\"__blank\"\n        >\n          Donate: 0xA8DD4bA80d8904d7cAcE5c3622CCf78bEa5AcFEe\n        </a>\n      </div>\n      <div className={styles.row}>\n        <a href=\"mailto:contact@solidity-by-example.org\">\n          contact@solidity-by-example.org\n        </a>\n        <div className={styles.bar}>|</div>\n        <a\n          href=\"https://github.com/solidity-by-example/solidity-by-example.github.io\"\n          target=\"__blank\"\n        >\n          source\n        </a>\n        <div className={styles.bar}>|</div>\n        <a\n          href=\"https://github.com/solidity-by-example/solidity-by-example.github.io/blob/gh-pages/LICENSE\"\n          target=\"__blank\"\n        >\n          license\n        </a>\n      </div>\n    </div>\n  )\n}\n\nexport default Footer\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\n\nfunction SEO({ title, description }) {\n  return (\n    <Helmet>\n      <title>{title}</title>\n      <meta name=\"Description\" content={description} />\n    </Helmet>\n  )\n}\n\nSEO.propTypes = {\n  title: PropTypes.string.isRequired,\n  description: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React, { useEffect } from \"react\"\nimport PropTypes from \"prop-types\"\nimport hljs from \"highlight.js\"\nimport \"highlight.js/styles/foundation.css\"\nimport hljsDefineSolidity from \"highlightjs-solidity\"\n\nfunction Html(props) {\n  const { html } = props\n\n  /* Note: Copy button to render inside pre\n  <div class=\"buttons\">\n    <button class=\"fa fa-copy clip-button\" title=\"Copy to clipboard\" aria-label=\"Copy to clipboard\">\n      <i class=\"tooltiptext\"></i>\n    </button>\n  </div>\n  */\n  useEffect(() => {\n    // Skip creating elements when pre-rendering\n    if (navigator.userAgent === \"ReactSnap\") {\n      return\n    }\n\n    const copy = target => {\n      const textArea = document.createElement(\"textarea\")\n      textArea.setAttribute(\"style\", \"width:1px;border:0;opacity:0;\")\n      document.body.appendChild(textArea)\n\n      textArea.value = target.innerText\n      textArea.select()\n      document.execCommand(\"copy\")\n\n      document.body.removeChild(textArea)\n    }\n\n    const pres = document.querySelectorAll(\"pre\")\n    pres.forEach(pre => {\n      // div\n      const div = document.createElement(\"div\")\n      div.className = \"buttons\"\n\n      // button\n      const button = document.createElement(\"button\")\n      button.className = \"fa fa-copy clip-button\"\n      button.title = \"Copy to clipboard\"\n      button.ariaLabel = \"Copy to clipboard\"\n\n      const icon = document.createElement(\"i\")\n      icon.className = \"tooltiptext\"\n      button.appendChild(icon)\n\n      div.appendChild(button)\n\n      const code = pre.firstChild\n      pre.insertBefore(div, code)\n\n      // button on click\n      button.addEventListener(\"click\", e => {\n        e.preventDefault()\n        // NOTE:\n        // child 0 = <div class=\"buttons\">\n        // child 1 = <code>\n        copy(pre.childNodes[1])\n      })\n    })\n  }, [])\n\n  useEffect(() => {\n    hljsDefineSolidity(hljs)\n    hljs.initHighlightingOnLoad()\n  }, [])\n\n  return <div dangerouslySetInnerHTML={{ __html: html }}></div>\n}\n\nHtml.propTypes = {\n  html: PropTypes.string.isRequired,\n}\n\nexport default Html\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { SOL_VERSION } from \"../constants\"\nimport SEO from \"./SEO\"\nimport Html from \"./Html\"\nimport styles from \"./Example.module.css\"\n\nfunction Example(props) {\n  const { title } = props\n\n  return (\n    <div className={styles.component}>\n      <SEO\n        {...props}\n        title={`${title} | Solidity by Example | ${SOL_VERSION}`}\n      />\n      <div className={styles.content}>\n        <h2>{title}</h2>\n\n        <Html html={props.html} />\n\n        <p>\n          Try on{\" \"}\n          <a href=\"https://remix.ethereum.org\" target=\"__blank\">\n            Remix\n          </a>\n        </p>\n      </div>\n    </div>\n  )\n}\n\nExample.propTypes = {\n  title: PropTypes.string.isRequired,\n  html: PropTypes.string.isRequired,\n}\n\nexport default Example\n","export const SOL_VERSION = \"0.5.16\"\n","import Array from \"./pages/Array\"\nimport BiDirectionalPaymentChannel from \"./pages/BiDirectionalPaymentChannel\"\nimport Call from \"./pages/Call\"\nimport CallingContract from \"./pages/CallingContract\"\nimport Constructor from \"./pages/Constructor\"\nimport Create2 from \"./pages/Create2\"\nimport DataLocations from \"./pages/DataLocations\"\nimport Delegatecall from \"./pages/Delegatecall\"\nimport Enum from \"./pages/Enum\"\nimport Error from \"./pages/Error\"\nimport EtherUnits from \"./pages/EtherUnits\"\nimport Events from \"./pages/Events\"\nimport Fallback from \"./pages/Fallback\"\nimport FirstApp from \"./pages/FirstApp\"\nimport Function from \"./pages/Function\"\nimport FunctionModifier from \"./pages/FunctionModifier\"\nimport Gas from \"./pages/Gas\"\nimport HelloWorld from \"./pages/HelloWorld\"\nimport IfElse from \"./pages/IfElse\"\nimport Import from \"./pages/Import\"\nimport Inheritance from \"./pages/Inheritance\"\nimport IterableMapping from \"./pages/IterableMapping\"\nimport Keccak256 from \"./pages/Keccak256\"\nimport Library from \"./pages/Library\"\nimport Loop from \"./pages/Loop\"\nimport Mapping from \"./pages/Mapping\"\nimport MerkleTree from \"./pages/MerkleTree\"\nimport MultiSigWallet from \"./pages/MultiSigWallet\"\nimport NewContract from \"./pages/NewContract\"\nimport Payable from \"./pages/Payable\"\nimport Primitives from \"./pages/Primitives\"\nimport ReEntrancy from \"./pages/ReEntrancy\"\nimport SelfDestruct from \"./pages/SelfDestruct\"\nimport SendingEther from \"./pages/SendingEther\"\nimport Shadow from \"./pages/Shadow\"\nimport Signature from \"./pages/Signature\"\nimport StateVariables from \"./pages/StateVariables\"\nimport Structs from \"./pages/Structs\"\nimport Super from \"./pages/Super\"\nimport UniDirectionalPaymentChannel from \"./pages/UniDirectionalPaymentChannel\"\nimport Variables from \"./pages/Variables\"\nimport ViewAndPureFunctions from \"./pages/ViewAndPureFunctions\"\nimport Visibility from \"./pages/Visibility\"\n\nconst SOL_ROUTES = [\n  {\n    path: \"hello-world\",\n    component: HelloWorld,\n    title: \"Hello World\",\n  },\n  {\n    path: \"first-app\",\n    component: FirstApp,\n    title: \"First App\",\n  },\n  {\n    path: \"primitives\",\n    component: Primitives,\n    title: \"Primitive Data Types\",\n  },\n  {\n    path: \"variables\",\n    component: Variables,\n    title: \"Variables\",\n  },\n  {\n    path: \"state-variables\",\n    component: StateVariables,\n    title: \"Reading and Writing to a State Variable\",\n  },\n  {\n    path: \"ether-units\",\n    component: EtherUnits,\n    title: \"Ether and Wei\",\n  },\n  {\n    path: \"gas\",\n    component: Gas,\n    title: \"Gas and Gas Price\",\n  },\n  // Flow control\n  {\n    path: \"if-else\",\n    component: IfElse,\n    title: \"If / Else\",\n  },\n  {\n    path: \"loop\",\n    component: Loop,\n    title: \"For and While Loop\",\n  },\n  // collection data types\n  {\n    path: \"mapping\",\n    component: Mapping,\n    title: \"Mapping\",\n  },\n  {\n    path: \"array\",\n    component: Array,\n    title: \"Array\",\n  },\n  // custom data types\n  {\n    path: \"enum\",\n    component: Enum,\n    title: \"Enum\",\n  },\n  {\n    path: \"structs\",\n    component: Structs,\n    title: \"Structs\",\n  },\n  {\n    path: \"data-locations\",\n    component: DataLocations,\n    title: \"Data Locations - Storage, Memory and Calldata\",\n  },\n  // function\n  {\n    path: \"function\",\n    component: Function,\n    title: \"Function\",\n  },\n  {\n    path: \"view-and-pure-functions\",\n    component: ViewAndPureFunctions,\n    title: \"View and Pure Functions\",\n  },\n  {\n    path: \"error\",\n    component: Error,\n    title: \"Error\",\n  },\n  {\n    path: \"function-modifier\",\n    component: FunctionModifier,\n    title: \"Function Modifier\",\n  },\n  {\n    path: \"events\",\n    component: Events,\n    title: \"Events\",\n  },\n  // inheritance\n  {\n    path: \"constructor\",\n    component: Constructor,\n    title: \"Constructor\",\n  },\n  {\n    path: \"inheritance\",\n    component: Inheritance,\n    title: \"Inheritance\",\n  },\n  {\n    path: \"shadowing-inherited-state-variables\",\n    component: Shadow,\n    title: \"Shadowing Inherited State Variables\",\n  },\n  {\n    path: \"super\",\n    component: Super,\n    title: \"Calling Parent Contracts\",\n  },\n  {\n    path: \"visibility\",\n    component: Visibility,\n    title: \"Visibility\",\n  },\n  // send / receive ether\n  {\n    path: \"payable\",\n    component: Payable,\n    title: \"Payable\",\n  },\n  {\n    path: \"sending-ether\",\n    component: SendingEther,\n    title: \"Sending Ether - Transfer, Send, and Call\",\n  },\n  {\n    path: \"fallback\",\n    component: Fallback,\n    title: \"Fallback\",\n  },\n  // contract interaction\n  {\n    path: \"call\",\n    component: Call,\n    title: \"Call\",\n  },\n  {\n    path: \"delegatecall\",\n    component: Delegatecall,\n    title: \"Delegatecall\",\n  },\n  {\n    path: \"calling-contract\",\n    component: CallingContract,\n    title: \"Calling Other Contract\",\n  },\n  {\n    path: \"new-contract\",\n    component: NewContract,\n    title: \"Creating Contracts from a Contract\",\n  },\n  // misc\n  {\n    path: \"import\",\n    component: Import,\n    title: \"Import\",\n  },\n  {\n    path: \"library\",\n    component: Library,\n    title: \"Library\",\n  },\n  // crypto\n  {\n    path: \"hashing\",\n    component: Keccak256,\n    title: \"Hashing with Keccak256\",\n  },\n  {\n    path: \"signature\",\n    component: Signature,\n    title: \"Verifying Signature\",\n  },\n]\n\nconst APP_ROUTES = [\n  {\n    path: \"multi-sig-wallet\",\n    component: MultiSigWallet,\n    title: \"Multi Sig Wallet\",\n  },\n  {\n    path: \"merkle-tree\",\n    component: MerkleTree,\n    title: \"Merkle Tree\",\n  },\n  {\n    path: \"iterable-mapping\",\n    component: IterableMapping,\n    title: \"Iterable Mapping\",\n  },\n  {\n    path: \"create2\",\n    component: Create2,\n    title: \"Precompute Contract Address with Create2\",\n  },\n  {\n    path: \"uni-directional-payment-channel\",\n    component: UniDirectionalPaymentChannel,\n    title: \"Uni-directional Payment Channel\",\n  },\n  {\n    path: \"bi-directional-payment-channel\",\n    component: BiDirectionalPaymentChannel,\n    title: \"Bi-directional Payment Channel\",\n  },\n]\n\nconst HACK_ROUTES = [\n  {\n    path: \"re-entrancy\",\n    component: ReEntrancy,\n    title: \"Re-Entrancy\",\n  },\n  {\n    path: \"self-destruct\",\n    component: SelfDestruct,\n    title: \"Self Destruct\",\n  },\n]\n\nexport const ROUTES_BY_CATEGORY = [\n  {\n    title: \"\",\n    routes: SOL_ROUTES.map((route) => ({\n      ...route,\n      path: `/${route.path}`,\n    })),\n  },\n  {\n    title: \"Applications\",\n    routes: APP_ROUTES.map((route) => ({\n      ...route,\n      path: `/app/${route.path}`,\n    })),\n  },\n  {\n    title: \"Hacks\",\n    routes: HACK_ROUTES.map((route) => ({\n      ...route,\n      path: `/hacks/${route.path}`,\n    })),\n  },\n]\n\nconst ROUTES = ROUTES_BY_CATEGORY.reduce((arr, { routes }) => {\n  arr.push(...routes)\n  return arr\n}, [])\n\nexport default ROUTES\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Multi-Sig Wallet\"\n      description=\"An example of multi-sig wallet in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Let&#39;s create an multi-sig wallet. Here are the specifications.</p>\n<p>The wallet owners can</p>\n<ul>\n<li>submit a transaction</li>\n<li>approve and revoke approval of pending transcations</li>\n<li>anyone can execute a transcation after enough owners has approved it.</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract MultiSigWallet {\n    event Deposit(address indexed sender, uint amount, uint balance);\n    event SubmitTransaction(\n        address indexed owner,\n        uint indexed txIndex,\n        address indexed to,\n        uint value,\n        bytes data\n    );\n    event ConfirmTransaction(address indexed owner, uint indexed txIndex);\n    event RevokeConfirmation(address indexed owner, uint indexed txIndex);\n    event ExecuteTransaction(address indexed owner, uint indexed txIndex);\n\n    address[] public owners;\n    mapping(address =&gt; bool) public isOwner;\n    uint public numConfirmationsRequired;\n\n    struct Transaction {\n        address to;\n        uint value;\n        bytes data;\n        bool executed;\n        mapping(address =&gt; bool) isConfirmed;\n        uint numConfirmations;\n    }\n\n    Transaction[] public transactions;\n\n    modifier onlyOwner() {\n        require(isOwner[msg.sender], \"not owner\");\n        _;\n    }\n\n    modifier txExists(uint _txIndex) {\n        require(_txIndex &lt; transactions.length, \"tx does not exist\");\n        _;\n    }\n\n    modifier notExecuted(uint _txIndex) {\n        require(!transactions[_txIndex].executed, \"tx already executed\");\n        _;\n    }\n\n    modifier notConfirmed(uint _txIndex) {\n        require(!transactions[_txIndex].isConfirmed[msg.sender], \"tx already confirmed\");\n        _;\n    }\n\n    constructor(address[] memory _owners, uint _numConfirmationsRequired) public {\n        require(_owners.length &gt; 0, \"owners required\");\n        require(\n            _numConfirmationsRequired &gt; 0 &amp;&amp; _numConfirmationsRequired &lt;= _owners.length,\n            \"invalid number of required confirmations\"\n        );\n\n        for (uint i = 0; i &lt; _owners.length; i++) {\n            address owner = _owners[i];\n\n            require(owner != address(0), \"invalid owner\");\n            require(!isOwner[owner], \"owner not unique\");\n\n            isOwner[owner] = true;\n            owners.push(owner);\n        }\n\n        numConfirmationsRequired = _numConfirmationsRequired;\n    }\n\n    function () payable external {\n        emit Deposit(msg.sender, msg.value, address(this).balance);\n    }\n\n    function submitTransaction(address _to, uint _value, bytes memory _data)\n        public\n        onlyOwner\n    {\n        uint txIndex = transactions.length;\n\n        transactions.push(Transaction({\n            to: _to,\n            value: _value,\n            data: _data,\n            executed: false,\n            numConfirmations: 0\n        }));\n\n        emit SubmitTransaction(msg.sender, txIndex, _to, _value, _data);\n    }\n\n    function confirmTransaction(uint _txIndex)\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n        notConfirmed(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        transaction.isConfirmed[msg.sender] = true;\n        transaction.numConfirmations += 1;\n\n        emit ConfirmTransaction(msg.sender, _txIndex);\n    }\n\n    function executeTransaction(uint _txIndex)\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(\n            transaction.numConfirmations &gt;= numConfirmationsRequired,\n            \"cannot execute tx\"\n        );\n\n        transaction.executed = true;\n\n        (bool success, ) = transaction.to.call.value(transaction.value)(transaction.data);\n        require(success, \"tx failed\");\n\n        emit ExecuteTransaction(msg.sender, _txIndex);\n    }\n\n    function revokeConfirmation(uint _txIndex)\n        public\n        onlyOwner\n        txExists(_txIndex)\n        notExecuted(_txIndex)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        require(transaction.isConfirmed[msg.sender], \"tx not confirmed\");\n\n        transaction.isConfirmed[msg.sender] = false;\n        transaction.numConfirmations -= 1;\n\n        emit RevokeConfirmation(msg.sender, _txIndex);\n    }\n\n    function getOwners() public view returns (address[] memory) {\n        return owners;\n    }\n\n    function getTransactionCount() public view returns (uint) {\n        return transactions.length;\n    }\n\n    function getTransaction(uint _txIndex)\n        public\n        view\n        returns (address to, uint value, bytes memory data, bool executed, uint numConfirmations)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return (\n            transaction.to,\n            transaction.value,\n            transaction.data,\n            transaction.executed,\n            transaction.numConfirmations\n        );\n    }\n\n    function isConfirmed(uint _txIndex, address _owner)\n        public\n        view\n        returns (bool)\n    {\n        Transaction storage transaction = transactions[_txIndex];\n\n        return transaction.isConfirmed[_owner];\n    }\n}\n</code></pre>\n<p>Here is a contract to test sending transactions from the multi-sig wallet</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract TestContract {\n    uint public i;\n\n    function callMe(uint j) public {\n        i += j;\n    }\n\n    function getData() public view returns (bytes memory) {\n        return abi.encodeWithSignature(\"callMe(uint256)\", 123);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Merkle Tree\"\n      description=\"Learn about Merkle tree in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Merkle tree allows you to cryptographically prove that an element is contained</p>\n<p>in a set without revealing the entire set.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract MerkleProof {\n    function verify(\n        bytes32[] memory proof, bytes32 root, bytes32 leaf, uint index\n    )\n        public pure returns (bool)\n    {\n        bytes32 hash = leaf;\n\n        for (uint i = 0; i &lt; proof.length; i++) {\n            bytes32 proofElement = proof[i];\n\n            if (index % 2 == 0) {\n                hash = keccak256(abi.encodePacked(hash, proofElement));\n            } else {\n                hash = keccak256(abi.encodePacked(proofElement, hash));\n            }\n\n            index = index / 2;\n        }\n\n        return hash == root;\n    }\n}\n\ncontract TestMerkleProof is MerkleProof {\n    bytes32[] public hashes;\n\n    constructor() public {\n        string[4] memory transactions = [\n            \"alice -&gt; bob\",\n            \"bob -&gt; dave\",\n            \"carol -&gt; alice\",\n            \"dave -&gt; bob\"\n        ];\n\n        for (uint i = 0; i &lt; transactions.length; i++) {\n            hashes.push(keccak256(abi.encodePacked(transactions[i])));\n        }\n\n        uint n = transactions.length;\n        uint offset = 0;\n\n        while (n &gt; 0) {\n            for (uint i = 0; i &lt; n - 1; i+=2) {\n                hashes.push(\n                    keccak256(abi.encodePacked(\n                        hashes[offset + i],\n                        hashes[offset + i + 1]\n                    ))\n                );\n            }\n            offset += n;\n            n = n / 2;\n        }\n    }\n\n    function getRoot() public view returns (bytes32) {\n        return hashes[hashes.length - 1];\n    }\n\n    /* verify\n    3rd leaf\n    0x1bbd78ae6188015c4a6772eb1526292b5985fc3272ead4c65002240fb9ae5d13\n\n    root\n    0x074b43252ffb4a469154df5fb7fe4ecce30953ba8b7095fe1e006185f017ad10\n\n    index\n    2\n\n    proof\n    0x948f90037b4ea787c14540d9feb1034d4a5bc251b9b5f8e57d81e4b470027af8\n    0x63ac1b92046d474f84be3aa0ee04ffe5600862228c81803cce07ac40484aee43\n    */\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"Iterable Mapping\"\n      description=\"Iterable Mapping in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You cannot iterate through a <code>mapping</code>. So here is an example of how to create an iterable <code>mapping</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\nlibrary IterableMapping {\n    // Iterable mapping from address to uint;\n    struct Map {\n        address[] keys;\n        mapping(address =&gt; uint) values;\n        mapping(address =&gt; uint) indexOf;\n        mapping(address =&gt; bool) inserted;\n    }\n\n    function get(Map storage map, address key) public view returns (uint) {\n        return map.values[key];\n    }\n\n    function getKeyAtIndex(Map storage map, uint index) public view returns (address) {\n        return map.keys[index];\n    }\n\n    function size(Map storage map) public view returns (uint) {\n        return map.keys.length;\n    }\n\n    function set(Map storage map, address key, uint val) public {\n        if (map.inserted[key]) {\n            map.values[key] = val;\n        } else {\n            map.inserted[key] = true;\n            map.values[key] = val;\n            map.indexOf[key] = map.keys.length;\n            map.keys.push(key);\n        }\n    }\n\n    function remove(Map storage map, address key) public {\n        if (!map.inserted[key]) {\n            return;\n        }\n\n        delete map.inserted[key];\n        delete map.values[key];\n\n        uint index = map.indexOf[key];\n        uint lastIndex = map.keys.length - 1;\n        address lastKey = map.keys[lastIndex];\n\n        map.indexOf[lastKey] = index;\n        delete map.indexOf[key];\n\n        map.keys[index] = lastKey;\n        map.keys.pop();\n    }\n}\n\ncontract TestIterableMap {\n    using IterableMapping for IterableMapping.Map;\n\n    IterableMapping.Map private map;\n\n    function testIterableMap() public {\n        map.set(address(0), 0);\n        map.set(address(1), 100);\n        map.set(address(2), 200); // insert\n        map.set(address(2), 200); // update\n        map.set(address(3), 300);\n\n        for (uint i = 0; i &lt; map.size(); i++) {\n            address key = map.getKeyAtIndex(i);\n\n            assert(map.get(key) == i * 100);\n        }\n\n        map.remove(address(1));\n\n        // keys = [address(0), address(3), address(2)]\n        assert(map.size() == 3);\n        assert(map.getKeyAtIndex(0) == address(0));\n        assert(map.getKeyAtIndex(1) == address(3));\n        assert(map.getKeyAtIndex(2) == address(2));\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Precompute Contract Address with Create2\"\n      description=\"Precompute contract address with create2\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Contract address can be precomputed, before the contract is deployed, using <code>create2</code></p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Factory {\n    event Deployed(address addr, uint256 salt);\n\n    // 1. Get bytecode of contract to be deployed\n    // NOTE: _owner and _foo are arguments of the TestContract&#39;s constructor\n    function getBytecode(address _owner, uint _foo) public pure returns (bytes memory) {\n        bytes memory bytecode = type(TestContract).creationCode;\n\n        return abi.encodePacked(bytecode, abi.encode(_owner, _foo));\n    }\n\n    // 2. Compute the address of the contract to be deployed\n    // NOTE: _salt is a random number used to create an address\n    function getAddress(bytes memory bytecode, uint _salt) public view returns (address) {\n        bytes32 hash = keccak256(\n            abi.encodePacked(\n                byte(0xff),\n                address(this),\n                _salt,\n                keccak256(bytecode)\n            )\n        );\n\n        // NOTE: cast last 20 bytes of hash to address\n        return address(uint160(uint256(hash)));\n    }\n\n    // 3. Deploy the contract\n    // NOTE:\n    // Check the event log Deployed which contains the address of the deployed TestContract.\n    // The address in the log should equal the address computed from above.\n    function deploy(bytes memory bytecode, uint _salt) public payable {\n        address addr;\n\n        /*\n        NOTE: How to call create2\n\n        create2(v, p, n, s)\n        create new contract with code at memory p to p + n\n        and send v wei\n        and return the new address\n        where new address = first 20 bytes of keccak256(0xff + address(this) + s + keccak256(mem[p…(p+n)))\n              s = big-endian 256-bit value\n        */\n        assembly {\n            addr := create2(\n                callvalue, // wei sent with current call\n                // Actual code starts after skipping the first 32 bytes\n                add(bytecode, 0x20),\n                mload(bytecode), // Load the size of code contained in the first 32 bytes\n                _salt // Salt from function arguments\n            )\n\n            if iszero(extcodesize(addr)) {\n                revert(0, 0)\n            }\n        }\n\n        emit Deployed(addr, _salt);\n    }\n}\n\ncontract TestContract {\n    address public owner;\n    uint public foo;\n\n    constructor(address _owner, uint _foo) public payable {\n        owner = _owner;\n        foo = _foo;\n    }\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"Uni-Directional Payment Channel\"\n      description=\"An example of uni-directional payment channels in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Payment channels allow participants to repeatedly transfer Ether off chain.</p>\n<p>Here is how this contract is used:</p>\n<ul>\n<li><code>Alice</code> deploys the contract, funding it with some Ether.</li>\n<li><code>Alice</code> authorizes a payment by signing a message (off chain) and sends the signature to <code>Bob</code>.</li>\n<li><code>Bob</code> claims his payment by presenting the signed message to the smart contract.</li>\n<li>If <code>Bob</code> does not claim his payment, <code>Alice</code> get her Ether back after the contract expires</li>\n</ul>\n<p>This is called a uni-directional payment channel since the payment can go only in a signle direction from <code>Alice</code> to <code>Bob</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/cryptography/ECDSA.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/utils/ReentrancyGuard.sol\";\n\n\ncontract UniDirectionalPaymentChannel is ReentrancyGuard {\n    using SafeMath for uint;\n    using ECDSA for bytes32;\n\n    address payable public payer;\n    address payable public payee;\n\n    uint public expiresAt;\n\n    constructor(address payable _payee, uint _expiresAt) public payable {\n        require(_expiresAt &gt; block.timestamp, \"Expiration must be &gt; now\");\n\n        payer = msg.sender;\n        payee = _payee;\n\n        expiresAt = _expiresAt;\n    }\n\n    function verify(\n        bytes memory _signature,\n        address _payer,\n        address _contract,\n        uint _payeeBalance\n    ) public pure returns (bool) {\n        // NOTE: sign with address of this contract to protect agains\n        // replay attack on other contracts\n        return\n            keccak256(abi.encodePacked(_contract, _payeeBalance))\n                .toEthSignedMessageHash()\n                .recover(_signature) == _payer;\n    }\n\n    modifier checkSignature(bytes memory _signature, uint _payeeBalance) {\n        require(\n            verify(_signature, payer, address(this), _payeeBalance),\n            \"Invalid signature\"\n        );\n        _;\n    }\n\n    function close(uint _payeeBalance, bytes memory _signature)\n        public\n        nonReentrant\n        checkSignature(_signature, _payeeBalance)\n    {\n        require(msg.sender == payee, \"Not payee\");\n\n        (bool sent, ) = payee.call.value(_payeeBalance)(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        selfdestruct(payer);\n    }\n\n    function kill() public {\n        require(msg.sender == payer, \"Not payer\");\n        require(block.timestamp &gt;= expiresAt, \"channel not expired\");\n        selfdestruct(payer);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"Bi-Directional Payment Channel\"\n      description=\"An example of bi-directional payment channels in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Bi-directional payment channels allow participants <code>Alice</code> and <code>Bob</code> to repeatedly transfer Ether off chain.</p>\n<p>Payments can go both ways, <code>Alice</code> pays <code>Bob</code> and <code>Bob</code> pays <code>Alice</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\npragma experimental ABIEncoderV2;\n\n/*\nOpening a channel\n1. Alice and Bob fund a multi-sig wallet\n2. Precompute payment channel address\n3. Alice and Bob exchanges signatures of initial balances\n4. Alice and Bob creates a transaction that can deploy a payment channel from\n   the multi-sig wallet\n\nUpdate channel balances\n1. Repeat steps 1 - 3 from opening a channel\n2. From multi-sig wallet create a transaction that will\n   - delete the transaction that would have deployed the old payment channel\n   - and then create a transaction that can deploy a payment channel with the\n     new balances\n\nClosing a channel when Alice and Bob agree on the final balance\n1. From multi-sig wallet create a transaction that will\n   - send payments to Alice and Bob\n   - and then delete the transaction that would have created the payment channel\n\nClosing a channel when Alice and Bob do not agree on the final balances\n1. Deploy payment channel from multi-sig\n2. call challengeExit() to start the process of closing a channel\n3. Alice and Bob can withdraw funds once the channel is expired\n*/\n\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/math/SafeMath.sol\";\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/cryptography/ECDSA.sol\";\n\ncontract BiDirectionalPaymentChannel {\n    using SafeMath for uint;\n    using ECDSA for bytes32;\n\n    event ChallengeExit(address indexed sender, uint nonce);\n    event Withdraw(address indexed to, uint amount);\n\n    address payable[2] public users;\n    mapping(address =&gt; bool) public isUser;\n\n    mapping(address =&gt; uint) public balances;\n\n    uint public challengePeriod;\n    uint public expiresAt;\n    uint public nonce;\n\n    modifier checkBalances(uint[2] memory _balances) {\n        require(\n            address(this).balance &gt;= _balances[0].add(_balances[1]),\n            \"balance of contract must be &gt;= to the total balance of users\"\n        );\n        _;\n    }\n\n    // NOTE: deposit from multi-sig wallet\n    constructor(\n        address payable[2] memory _users,\n        uint[2] memory _balances,\n        uint _expiresAt,\n        uint _challengePeriod\n    ) public payable checkBalances(_balances) {\n        require(_expiresAt &gt; block.timestamp, \"Expiration must be &gt; now\");\n        require(_challengePeriod &gt; 0, \"Challenge period must be &gt; 0\");\n\n        for (uint i = 0; i &lt; _users.length; i++) {\n            address payable user = _users[i];\n\n            require(!isUser[user], \"user must be unique\");\n            users[i] = user;\n            isUser[user] = true;\n\n            balances[user] = _balances[i];\n        }\n\n        expiresAt = _expiresAt;\n        challengePeriod = _challengePeriod;\n    }\n\n    function verify(\n        bytes[2] memory _signatures,\n        address _contract,\n        address[2] memory _signers,\n        uint[2] memory _balances,\n        uint _nonce\n    ) public pure returns (bool) {\n        for (uint i = 0; i &lt; _signatures.length; i++) {\n            /*\n            NOTE: sign with address of this contract to protect\n                  agains replay attack on other contracts\n            */\n            bool valid = _signers[i] ==\n                keccak256(abi.encodePacked(_contract, _balances, _nonce))\n                    .toEthSignedMessageHash()\n                    .recover(_signatures[i]);\n\n            if (!valid) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    modifier checkSignatures(\n        bytes[2] memory _signatures,\n        uint[2] memory _balances,\n        uint _nonce\n    ) {\n        // NOTE: need to cast payable address to address type (not in 0.6)\n        address[2] memory signers;\n        for (uint i = 0; i &lt; users.length; i++) {\n            signers[i] = address(users[i]);\n        }\n\n        require(\n            verify(_signatures, address(this), signers, _balances, _nonce),\n            \"Invalid signature\"\n        );\n\n        _;\n    }\n\n    modifier onlyUser() {\n        require(isUser[msg.sender], \"Not user\");\n        _;\n    }\n\n    function challengeExit(\n        uint[2] memory _balances,\n        uint _nonce,\n        bytes[2] memory _signatures\n    )\n        public\n        onlyUser\n        checkSignatures(_signatures, _balances, _nonce)\n        checkBalances(_balances)\n    {\n        require(block.timestamp &lt; expiresAt, \"Expired challenge period\");\n        require(_nonce &gt; nonce, \"Nonce must be greater than the current nonce\");\n\n        for (uint i = 0; i &lt; _balances.length; i++) {\n            balances[users[i]] = _balances[i];\n        }\n\n        nonce = _nonce;\n        expiresAt = block.timestamp.add(challengePeriod);\n\n        emit ChallengeExit(msg.sender, nonce);\n    }\n\n    function withdraw() public onlyUser {\n        require(\n            block.timestamp &gt;= expiresAt,\n            \"Challenge period has not expired yet\"\n        );\n\n        uint amount = balances[msg.sender];\n        balances[msg.sender] = 0;\n\n        (bool sent, ) = msg.sender.call.value(amount)(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        emit Withdraw(msg.sender, amount);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Re-Entrancy\"\n      description=\"An example of re-entrancy attack in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<h3 id=\"vulnerability\">Vulnerability</h3>\n<p>Let&#39;s say that contract <code>A</code> calls contract <code>B</code>.</p>\n<p>Reentracy exploit allows <code>B</code> to call back into <code>A</code> before <code>A</code> finishes execution.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// EtherStore is a contract vulnerable to re-entrancy attack. Let&#39;s see why.\n\n/*\n1. Deploy EtherStore\n2. Deposit 1 Ether each from Account 1 (Alice) and Account 2 (Bob) into EtherStore\n3. Deploy Attack with address of EtherStore\n4. Call Attack.attack sending 1 ether (using Account 3 (Eve)).\n   You will get 3 Ethers back (2 Ether stolen from Alice and Bob,\n   plus 1 Ether sent from this contract).\n5. Call Attack.collectEther to withdraw Ether from Attack\n\nWhat happened?\nAttack was able to call EtherStore.withdraw multiple times before\nEtherStore.withdraw finished executing.\n\nHere is how the functions were called\n- Attack.attack\n- EtherStore.deposit\n- EtherStore.withdraw\n- Attack fallback (receives 1 Ether)\n- EtherStore.withdraw\n- Attack.fallback (receives 1 Ether)\n- EtherStore.withdraw\n- Attack fallback (receives 1 Ether)\n*/\n\ncontract EtherStore {\n    // Withdrawal limit = 1 ether / week\n    uint public withdrawalLimit = 1 ether;\n    mapping(address =&gt; uint) public lastWithdrawTime;\n    mapping(address =&gt; uint) public balances;\n\n    function deposit() public payable {\n        balances[msg.sender] += msg.value;\n    }\n\n    function withdraw(uint _amount) public {\n        require(balances[msg.sender] &gt;= _amount);\n        require(_amount &lt;= withdrawalLimit);\n        require(now &gt;= lastWithdrawTime[msg.sender] + 1 weeks);\n\n        (bool sent, ) = msg.sender.call.value(_amount)(\"\");\n        require(sent, \"Failed to send Ether\");\n\n        balances[msg.sender] -= _amount;\n        lastWithdrawTime[msg.sender] = now;\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract Attack {\n    EtherStore public etherStore;\n\n    constructor(address _etherStoreAddress) public {\n        etherStore = EtherStore(_etherStoreAddress);\n    }\n\n    // Fallback is called when EtherStore sends Ether to this contract.\n    function () external payable {\n        if (address(etherStore).balance &gt;= 1 ether) {\n            etherStore.withdraw(1 ether);\n        }\n    }\n\n    function attack() external payable {\n        require(msg.value &gt;= 1 ether);\n        etherStore.deposit.value(1 ether)();\n        etherStore.withdraw(1 ether);\n    }\n\n    function collectEther() public {\n        (bool sent, ) = msg.sender.call.value(address(this).balance)(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n<h3 id=\"preventative-techniques\">Preventative Techniques</h3>\n<ul>\n<li>Ensure all state changes happen before calling external contracts</li>\n<li>Use function modifiers that prevent re-entrancy</li>\n</ul>\n<p>Here is a example of a re-entracy guard</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract ReEntrancyGuard {\n    bool internal locked;\n\n    modifier noReentrant() {\n        require(!locked, \"No re-entrancy\");\n        locked = true;\n        _;\n        locked = false;\n    }\n}</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Self Destruct\"\n      description=\"An example of how to delete your smart contract by calling seldestruct in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Contracts can be deleted from the blockchain by calling <code>selfdestruct</code>.</p>\n<p><code>selfdestruct</code> sends all remainig Ether stored in the contract to an\ndesignated address.</p>\n<p>A malicious contract can use <code>selfdestruct</code> to\nforce send Ether to any contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// To demonstrate how to force sending Ether to another contract:\n// 1. Deploy the SelfDestruct contract, funding 1 Ether.\n// 2. Deploy the Target contract.\n// 3. Execute kill function in SelfDestruct, passing the address of Target as input.\n// 4. Check the balance of Target contract. It should now have 1 Ether.\n\ncontract SelfDestruct {\n    constructor() public payable {\n    }\n\n    function kill(address payable to) public {\n        selfdestruct(to);\n    }\n}\n\ncontract Target {\n    // Notice this contract does not have a payable fallback,\n    // so we should not be able to send Ether to this contract...\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Hello World\"\n      description=\"Hello World in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>pragma</code> specifies the compiler version of Solidity.</p>\n<pre><code class=\"language-solidity\">// compiler version must be greater than or equal to 0.5.16 and less than 0.6.0\npragma solidity ^0.5.16;\n\ncontract HelloWorld {\n    string public greet = \"Hello World!\";\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"First Application\"\n      description=\"First Application - Counter\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Here is a simple contract that you can get, increment and decrement the count store in this contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Counter {\n    uint public count;\n\n    // Function to get the current count\n    function get() public view returns (uint) {\n        return count;\n    }\n\n    // Function to increment count by 1\n    function inc() public {\n        count += 1;\n    }\n\n    // Function to decrement count by 1\n    function dec() public {\n        count -= 1;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Primitive Data Types\"\n      description=\"Primitive data types\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Here we introduce you to some primitive data types available in Solidity.</p>\n<ul>\n<li><code>boolean</code></li>\n<li><code>uint</code></li>\n<li><code>int</code></li>\n<li><code>address</code></li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Primitives {\n    bool boo = true;\n\n    /*\n    uint stands for unsigned integer, meaning non negative integers\n    different sizes are available\n        uint8   ranges from 0 to 2 ** 8 - 1\n        uint16  ranges from 0 to 2 ** 16 - 1\n        ...\n        uint256 ranges from 0 to 2 ** 256 - 1\n    */\n    uint8 u8 = 1;\n    uint256 u256 = 456;\n    uint u = 123; // uint is an alias for uint256\n\n    /*\n    Negative numbers are allowed for int types.\n    Like uint, different ranges are available from uint8 to uint256\n    */\n    int8 i8 = -1;\n    int256 i256 = 456;\n    int i = -123; // int is same as int256\n\n    address addr = 0xCA35b7d915458EF540aDe6068dFe2F44E8fa733c;\n\n    // Default values\n    // Unassigned variables have a default value\n    bool defaultBoo; // false\n    uint defaultUint; // 0\n    int defaultInt; // 0\n    address defaultAddr; // 0x0000000000000000000000000000000000000000\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Variables\"\n      description=\"Local, state and global variables\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>There are 3 types of variables in Solidity</p>\n<ul>\n<li><strong>local</strong><ul>\n<li>declared inside a function</li>\n<li>not stored on the blockchain</li>\n</ul>\n</li>\n<li><strong>state</strong><ul>\n<li>declared outside a function</li>\n<li>stored on the blockchain</li>\n</ul>\n</li>\n<li><strong>global</strong> (provides information about the blockchain)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Variables {\n    // State varaibles are stored on the blockchain.\n    string public text = \"Hello\";\n    uint public num = 123;\n\n    function doSomething() public {\n        // Local variables are not saved to the blockchain.\n        uint i = 456;\n\n        // Here are some global variables\n        uint timestamp = block.timestamp; // Current block timestamp\n        address sender = msg.sender; // address of the caller\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Reading and Writing to a State Variable\"\n      description=\"Reading and Writing to a State Variable\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You need to send a transaction to the blockchain to write or update a state variable.</p>\n<p>This means that you will have to pay a transaction fee.</p>\n<p>On the other hand, you can read a data from a state variable, for free, without sending any transaction.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract SimpleStorage {\n    // State variable to store a number\n    uint public num;\n\n    // You need to send a transaction to write to a state variable.\n    function set(uint _num) public {\n        num = _num;\n    }\n\n    // You can read from a state varaible without sending a transaction.\n    // Actually we don&#39;t need this function. The compiler automatically\n    // creates getter functions for all public variables.\n    function get() public view returns (uint) {\n        return num;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Ether and Wei\"\n      description=\"An example of Ether and Wei in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Transactions are paid with <code>ether</code>.</p>\n<p>Similar to how one dollar is equal to 100 cent, one <code>ether</code> is equal to 10<sup>18</sup> <code>wei</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract EtherUnits {\n    uint public oneWei = 1 wei;\n    // 1 wei is equal to 1\n    bool public isOneWei = 1 wei == 1;\n\n    uint public oneEther = 1 ether;\n    // 1 ether is equal to 10^18\n    bool public isOneEther = 1 ether == 1e18;\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Gas and Gas Price\"\n      description=\"An example of gas and gas limit in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<h3 id=\"how-much-ether-do-you-need-to-pay-for-a-transaction\">How much <code>ether</code> do you need to pay for a transaction?</h3>\n<p>You pay <code>gas spent * gas price</code> amount of <code>ether</code>, where</p>\n<ul>\n<li><code>gas</code> is a unit of computation</li>\n<li><code>gas spent</code> is the total amount of <code>gas</code> used in a transaction</li>\n<li><code>gas price</code> is how much <code>ether</code> you are willing to pay per <code>gas</code></li>\n</ul>\n<p>Transactions with higher gas price have higher priority to be included in a block.</p>\n<p>Unspent gas will be refunded.</p>\n<h3 id=\"gas-limit\">Gas Limit</h3>\n<p>There are 2 upper bounds to the amount of gas you can spend</p>\n<ul>\n<li><code>gas limit</code> (max amount of gas your willing to use for your transaction, set by you)</li>\n<li><code>block gas limit</code> (max amount of gas allowed in a block, set by the network)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Gas {\n    uint public i = 0;\n\n    // Using up all of the gas that you send causes your transaction to fail.\n    // State changes are undone.\n    // Gas spent are not refunded.\n    function forever() public {\n        // Here we run a loop until all of the gas are spent\n        // and the transaction fails\n        while(true) {\n            i += 1;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"If / Else\"\n      description=\"If / Else conditional statement in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Solidity support conditional statements <code>if</code>, <code>else if</code> and <code>else</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract IfElse {\n    function foo(uint x) public pure returns (uint) {\n        if (x &lt; 10) {\n            return 0;\n        } else if (x &lt; 20) {\n            return 1;\n        } else {\n            return 2;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"For and While Loop\"\n      description=\"Example of for and while loop in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Solidity supports <code>for</code>, <code>while</code>, and <code>do while</code> loops.</p>\n<p>Don&#39;t write loops that are unbounded as this can hit the gas limit, causing your transaction to fail.</p>\n<p>For the reason above, <code>while</code> and <code>do while</code> loops are rarely used.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Loop {\n    function loop() public {\n        // for loop\n        for (uint i = 0; i &lt; 10; i++) {\n            if (i == 3) {\n                // Skip to next iteration with continue\n                continue;\n            }\n            if (i == 5) {\n                // Exit loop with break\n                break;\n            }\n        }\n\n        // while loop\n        uint i;\n        while (i &lt; 10) {\n            i++;\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Mapping\"\n      description=\"Example of using mapping in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Maps are created with the syntax <code>mapping(keyType =&gt; valueType)</code>.</p>\n<p><code>keyType</code> can be value types such as <code>uint</code>, <code>address</code> or <code>bytes</code>.</p>\n<p><code>valueType</code> can be any type including another mapping or an array.</p>\n<p>Mappings are not iterable.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Mapping {\n    // Mapping from address to uint\n    mapping(address =&gt; uint) public myMap;\n\n    function get(address _addr) public view returns (uint) {\n         // Mapping always returns a value.\n         // If the value was never set, it will return the default value.\n        return myMap[_addr];\n    }\n\n    function set(address _addr, uint _i) public {\n        // Update the value at this address\n        myMap[_addr] = _i;\n    }\n\n    function remove(address _addr) public {\n        // Reset the value to the default value.\n        delete myMap[_addr];\n    }\n}\n\ncontract NestedMapping {\n    // Nested mapping (mapping from address to another mapping)\n    mapping(address =&gt; mapping(uint =&gt; bool)) public nested;\n\n    function get(address _addr1, uint _i) public view returns (bool) {\n         // You can get values from a nested mapping\n         // even when it is not initialized\n        return  nested[_addr1][_i];\n    }\n\n    function set(address _addr1, uint _i, bool _boo) public {\n        nested[_addr1][_i] = _boo;\n    }\n\n    function remove(address _addr1, uint _i) public {\n        delete nested[_addr1][_i];\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Array\"\n      description=\"Learn about arrays in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Array can have a compile-time fixed size or a dynamic size.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Array {\n    // Several ways to initialize an array\n    uint[] public arr;\n    uint[] public arr2 = [1,2,3];\n    // Fixed sized array, all elements initialize to 0\n    uint[10] public myFixedSizeArr;\n\n    function get(uint i) public view returns (uint) {\n        return arr[i];\n    }\n\n    // Solidity can return the entire array.\n    // But this function should be avoided for\n    // arrays that can grow indefinitely in length.\n    function getArr() public view returns (uint[] memory) {\n        return arr;\n    }\n\n    function push(uint i) public {\n        // Append to array\n        // This will increase the array length by 1.\n        arr.push(i);\n    }\n\n    function pop() public {\n        // Remove last element from array\n        // This will decrease the array length by 1\n        arr.pop();\n    }\n\n    function getLength() public view returns (uint) {\n        return arr.length;\n    }\n\n    function remove(uint index) public {\n        // Delete does not change the array length.\n        // It resets the value at index to it&#39;s default value,\n        // in this case 0\n        delete arr[index];\n    }\n}\n\ncontract CompactArray {\n    uint[] public arr;\n\n    // Deleting an element creates a gap in the array.\n    // One trick to keep the array compact is to\n    // move the last element into the place to delete.\n    function remove(uint index) public {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n        // Remove the last element\n        arr.pop();\n    }\n\n    function test() public {\n        arr.push(1);\n        arr.push(2);\n        arr.push(3);\n        arr.push(4);\n        // [1, 2, 3, 4]\n\n        remove(1);\n        // [1, 4, 3]\n\n        remove(2);\n        // [1, 4]\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Enum\"\n      description=\"Example of enums in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Solidity support enumerables and they are useful to model choice and keep track of state.</p>\n<pre><code class=\"language-solidity\">contract Enum {\n    // Enum representing shipping status\n    enum Status {\n        Pending,\n        Shipped,\n        Accepted,\n        Rejected,\n        Canceled\n    }\n\n    // Default value is the first element listed in\n    // definition of the type, in this case \"Pending\"\n    Status public status;\n\n    // Returns uint\n    // Pending  - 0\n    // Shipped  - 1\n    // Accepted - 2\n    // Rejected - 3\n    // Canceled - 4\n    function get() public view returns (Status) {\n        return status;\n    }\n\n    // Update status by passing uint into input\n    function set(Status _status) public {\n        status = _status;\n    }\n\n    // You can update to a specific enum like this\n    function cancel() public {\n        status = Status.Canceled;\n    }\n\n    // delete resets the enum to it&#39;s first value, 0\n    function reset() public {\n        delete status;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Structs\"\n      description=\"An example of how to use structs in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You can define your own type by creating a <code>struct</code>.</p>\n<p>They are useful for grouping togther related data.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Todos {\n    struct Todo {\n        string text;\n        bool completed;\n    }\n\n    // An array of &#39;Todo&#39; structs\n    Todo[] public todos;\n\n    function create(string memory _text) public {\n        // 3 ways to initialize a struct\n        // - calling it like a function\n        todos.push(Todo(_text, false));\n\n        // key value mapping\n        todos.push(Todo({\n            text: _text,\n            completed: false\n        }));\n\n        // initialize an emoty struct and then update it\n        Todo memory todo;\n        todo.text = _text;\n        // todo.completed initialized to false\n\n        todos.push(todo);\n    }\n\n    // Solidity automatically created a getter for&#39; todos&#39; so\n    // you don&#39;t actually need this function.\n    function get(uint _index) public view\n        returns (string memory text, bool completed)\n    {\n        Todo storage todo = todos[_index];\n        return (todo.text, todo.completed);\n    }\n\n    // update text\n    function update(uint _index, string memory _text) public {\n        Todo storage todo = todos[_index];\n        todo.text = _text;\n    }\n    // update completed\n    function toggleCompleted(uint _index) public {\n        Todo storage todo = todos[_index];\n        todo.completed = !todo.completed;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"Data Locations - Storage, Memory and Calldata\"\n      description=\"Data locations - storage, memory and calldata\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Variables are declared as either <code>storage</code>, <code>memory</code> or <code>calldata</code> to explicitly\nspecify the location of the data.</p>\n<ul>\n<li><code>storage</code> - variable is a state variable (store on blockchain)</li>\n<li><code>memory</code> - variable is in memory and it exists while a function is being called</li>\n<li><code>calldata</code> - special data location that contains function arguments, only available for <code>external</code> functions</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract DataLocations {\n    uint[] public arr;\n    mapping(uint =&gt; address) map;\n    struct MyStruct {\n        uint foo;\n    }\n    mapping(uint =&gt; MyStruct) myStructs;\n\n    function f() public {\n        // call _f with state variables\n        _f(arr, map, myStructs[1]);\n\n        // get a struct from a mapping\n        MyStruct storage myStruct = myStructs[1];\n        // create a struct in memory\n        MyStruct memory myMemStruct = MyStruct(0);\n    }\n\n    function _f(\n        uint[] storage _arr,\n        mapping(uint =&gt; address) storage _map,\n        MyStruct storage _myStruct\n    ) internal {\n        // do something with storage variables\n    }\n\n    // You can return memory variables\n    function g(uint[] memory _arr) public returns (uint[] memory) {\n        // do something with memory array\n    }\n\n    function h(uint[] calldata _arr) external {\n        // do something with calldata array\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Function\"\n      description=\"Example of how to write functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>There are several ways to return outputs from a function.</p>\n<p>Public functions cannot accept certain data types as inputs or outputs</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Function {\n    // Functions can return multiple values.\n    function returnMany() public pure returns (uint, bool, uint) {\n        return (1, true, 2);\n    }\n\n    // Return values can be named.\n    function named() public pure returns (uint x, bool b, uint y) {\n        return (1, true, 2);\n    }\n\n    // Return values can be assigned to their name.\n    // In this case the return statement can be omitted.\n    function assigned() public pure returns (uint x, bool b, uint y) {\n        x = 1;\n        b = true;\n        y = 2;\n    }\n\n    // Use destructing assignment when calling another\n    // function that returns multiple values.\n    function destructingAssigments()\n        public pure returns (uint, bool, uint, uint, uint)\n    {\n        (uint i, bool b, uint j) =  returnMany();\n\n        // Values can be left out.\n        (uint x, , uint y) = (4, 5, 6);\n\n        return (i, b, j, x, y);\n    }\n\n    // Cannot use map for neither input nor output\n\n    // Can use array for input\n    function arrayInput(uint[] memory _arr) public {\n    }\n\n    // Can use array for output\n    uint[] public arr;\n\n    function arrayOutput() public view returns (uint[] memory) {\n        return arr;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"View and Pure Functions\"\n      description=\"An example of view and pure functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Getter functions can be declared <code>view</code> or <code>pure</code>.</p>\n<p><code>View</code> function declares that no state will be changed.</p>\n<p><code>Pure</code> function declares that no state variable will be changed or read.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract ViewAndPure {\n    uint public x = 1;\n\n    // Promise not to modify the state.\n    function addToX(uint y) public view returns (uint) {\n        return x + y;\n    }\n\n    // Promise not to modify or read from the state.\n    function add(uint i, uint j) public pure returns (uint) {\n        return i + j;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Error\"\n      description=\"Example of how to throw errors in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>An error will undo all changes made to the state during a transaction.</p>\n<p>You can throw an error by calling <code>require</code>, <code>revert</code> or <code>assert</code>.</p>\n<ul>\n<li><code>require</code> is used to validate inputs and conditions before execution.</li>\n<li><code>revert</code> is similar to <code>require</code>. See the code below for details.</li>\n<li><code>assert</code> is used to check for code that should never be false. Failing\nassertion probably means that there is a bug.</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Error {\n    function testRequire(uint _i) public {\n        // Require should be used to validate conditions such as:\n        // - inputs\n        // - conditions before execution\n        // - return values from calls to other functions\n        require(_i &gt; 10, \"Input must be greater than 10\");\n    }\n\n    function testRevert(uint _i) public {\n        // Revert is useful when the condition to check is complex.\n        // This code does the exact same thing as the example above\n        if (_i &lt;= 10) {\n            revert(\"Input must be greater than 10\");\n        }\n    }\n\n    uint public num;\n\n    function testAssert() public {\n        // Assert should only be used to test for internal errors,\n        // and to check invariants.\n\n        // Here we assert that num is always equal to 0\n        // since it is impossible to update the value of num\n        assert(num == 0);\n    }\n}\n</code></pre>\n<p>Here is another example</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Account {\n    uint public balance;\n    uint public constant MAX_UINT = 2 ** 256 - 1;\n\n    function deposit(uint _amount) public {\n        uint oldBalance = balance;\n        uint newBalance = balance + _amount;\n\n        // balance + _amount does not overflow if balance + _amount &gt;= balance\n        require(newBalance &gt;= oldBalance, \"Overflow\");\n\n        balance = newBalance;\n\n        assert(balance &gt;= oldBalance);\n    }\n\n    function withdraw(uint _amount) public {\n        uint oldBalance = balance;\n\n        // balance - _amount does not underflow if balance &gt;= _amount\n        require(balance &gt;= _amount, \"Underflow\");\n\n        if (balance &lt; _amount) {\n            revert(\"Underflow\");\n        }\n\n        balance -= _amount;\n\n        assert(balance &lt;= oldBalance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Function Modifier\"\n      description=\"Example of function modifiers in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Modifiers are code that can be run before and / or after a function call.</p>\n<p>Modifiers can be used to:</p>\n<ul>\n<li>Restrict access</li>\n<li>Validate inputs</li>\n<li>Guard against reentrancy hack</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract FunctionModifier {\n    // We will use these variables to demonstrate how to use\n    // modifiers.\n    address public owner;\n    uint public x = 10;\n    bool public locked;\n\n    constructor() public {\n        // Set the transaction sender as the owner of the contract.\n        owner = msg.sender;\n    }\n\n    // Modifier to check that the caller is the owner of\n    // the contract.\n    modifier onlyOwner() {\n        require(msg.sender == owner, \"Not owner\");\n        // Underscore is a special character only used inside\n        // a function modifier and it tells Solidity to\n        // execute the rest of the code.\n        _;\n    }\n\n    // Modifiers can take inputs. This modifier checks that the\n    // address passed in is not the zero address.\n    modifier validAddress(address _addr) {\n        require(_addr != address(0), \"Not valid address\");\n        _;\n    }\n\n    function changeOwner(address _newOwner)\n        public\n        onlyOwner\n        validAddress(_newOwner)\n    {\n        owner = _newOwner;\n    }\n\n    // Modifiers can be called before and / or after a function.\n    // This modifier prevents a function from being called while\n    // it is still executing.\n    modifier noReentrancy() {\n        require(!locked, \"No reentrancy\");\n\n        locked = true;\n        _;\n        locked = false;\n    }\n\n    function decrement(uint i) public noReentrancy {\n        x -= i;\n\n        if (i &gt; 1) {\n            decrement(i - 1);\n        }\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Events\"\n      description=\"Example of how to emit events in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>Events</code> allow logging to the Ethereum blockchain. Some use cass for events are:</p>\n<ul>\n<li>Listening for events and updating user interface</li>\n<li>A cheap form of storage</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Event {\n    // Event declaration\n    // Up to 3 parameters can be indexed.\n    // Indexed parameters helps you filter the logs by the indexed parameter\n    event Log(address indexed sender, string message);\n    event AnotherLog();\n\n    function test() public {\n        emit Log(msg.sender, \"Hello World!\");\n        emit Log(msg.sender, \"Hello EVM!\");\n        emit AnotherLog();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Constructor\"\n      description=\"Learn how to initialize smart contracts in Solidity using a constructor\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>A <code>constructor</code> is an optional function that is executed upon contract creation.</p>\n<p>Here are examples of how to pass arguments to <code>constructors</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// Base contract X\ncontract X {\n    string public name;\n\n    constructor(string memory _name) public {\n        name = _name;\n    }\n}\n\n// Base contract Y\ncontract Y {\n    string public text;\n\n    constructor(string memory _text) public {\n        text = _text;\n    }\n}\n\n// There are 2 ways to initialize parent contract with parameters.\n\n// Pass the parameters here in the inheritance list.\ncontract B is X(\"Input to X\"), Y(\"Input to Y\") {\n}\n\ncontract C is X, Y {\n    // Pass the parameters here in the constructor,\n    // similar to function modifiers.\n    constructor(string memory _name, string memory _text) X(_name) Y(_text) public {\n    }\n}\n\n// Parent constructors are always called in the order of inheritance\n// regardless of the order of parent contracts listed in the\n// constructor of the child contract.\n\n// Order of constructors called:\n// 1. Y\n// 2. X\n// 3. E\ncontract E is X, Y {\n    constructor() X(\"X was called\") Y(\"Y was called\") public {\n    }\n}\n\n// Order of constructors called:\n// 1. Y\n// 2. X\n// 3. E\ncontract F is X, Y {\n    constructor() Y(\"Y was called\") X(\"X was called\") public {\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Inheritance\"\n      description=\"Example of inheritance in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Solidity supports multiple inheritance. Contracts can inherit other contract by using the <code>is</code> keyword.</p>\n<p>Order of inheritance is important.</p>\n<p>You have to list the parent contracts in the order from “most base-like” to “most derived”.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n\n/* Graph of inheritance\n    A\n   / \\\\\n  B   C\n / \\\\ /\nF  D,E\n\n*/\n\ncontract A {\n    function foo() public pure returns (string memory) {\n        return \"A\";\n    }\n}\n\n// Contracts inherit other contracts by using the keyword &#39;is&#39;.\ncontract B is A {\n    // Override A.foo()\n    function foo() public pure returns (string memory) {\n        return \"B\";\n    }\n}\n\ncontract C is A {\n    // Override A.foo()\n    function foo() public pure returns (string memory) {\n        return \"C\";\n    }\n}\n\n// Contracts can inherit from multiple parent contracts.\n// When a function is called that is defined multiple times in\n// different contracts, parent contracts are searched from\n// right to left, and in depth-first manner.\n\ncontract D is B, C {\n    // D.foo() returns \"C\"\n    // since C is the right most parent contract with function foo()\n}\n\ncontract E is C, B {\n    // E.foo() returns \"B\"\n    // since B is the right most parent contract with function foo()\n}\n\n// Inheritance must be ordered from “most base-like” to “most derived”.\n// Swapping the order of A and B will throw a compilation error.\ncontract F is A, B {\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Shadowing Inherited State Variables\"\n      description=\"An example of shadowing state variables by inheritance\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Unlike functions, state variables cannot be overridden by re-declaring it\nin the child contract.</p>\n<p>Let&#39;s learn how to correctly override inherited state variables.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract A {\n    string public name = \"Contract A\";\n\n    function getName() public view returns (string memory) {\n        return name;\n    }\n}\n\ncontract B is A {\n    // This is the incorrect way to override inherited state variables.\n    string public name = \"Contract B\";\n\n    // B.getName returns \"Contract A\"\n\n    // Functions defined in contract A that use the &#39;name&#39; state variable\n    // will access A.name. Functions defined in B that uses &#39;name&#39; will\n    // access B.name.\n}\n\ncontract C is A {\n    // This is the correct way to override inherited state variables.\n    constructor() public {\n        name = \"Contract C\";\n    }\n\n    // C.getName returns \"Contract C\"\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Calling Parent Contracts\"\n      description=\"An example of calling parent contracts in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Parent contracts can be called directly, or by using the keyword <code>super</code>.</p>\n<p>By using the keyword <code>super</code>, all of the immediate parent contracts will be called.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n/* Inheritance tree\n   A\n /  \\\\\nB   C\n \\\\ /\n  D\n*/\n\ncontract A {\n    // This is called an event. You can emit events from your function\n    // and they are logged into the transaction log.\n    // In our case, this will be useful for tracing function calls.\n    event Log(string message);\n\n    function foo() public {\n        emit Log(\"A.foo called\");\n    }\n\n    function bar() public {\n        emit Log(\"A.bar called\");\n    }\n}\n\ncontract B is A {\n    function foo() public {\n        emit Log(\"B.foo called\");\n        A.foo();\n    }\n    function bar() public {\n        emit Log(\"B.bar called\");\n        super.bar();\n    }\n}\n\ncontract C is A {\n    function foo() public {\n        emit Log(\"C.foo called\");\n        A.foo();\n    }\n\n    function bar() public {\n        emit Log(\"C.bar called\");\n        super.bar();\n    }\n}\n\ncontract D is B, C {\n    // Try:\n    // - Call D.foo and check the transaction logs.\n    //   Although D inherits A, B and C, it only called C and then A.\n    // - Call D.bar and check the transaction logs\n    //   D called C, then B, and finally A.\n    //   Although super was called twice (by B and C) it only called A once.\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Visibility\"\n      description=\"An example of external, internal, private and public functions in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Functions and state variables have to declare whether they are accessible by other contracts.</p>\n<p>Fucntions can be declared as</p>\n<ul>\n<li><code>public</code> - any contract and account can call</li>\n<li><code>private</code> - only inside the contract that defines the function</li>\n<li><code>internal</code>- only inside contract that inherits an <code>internal</code> function</li>\n<li><code>external</code> - only other contracts and accounts can call</li>\n</ul>\n<p>State variables can be declared as <code>public</code>, <code>private</code>, or <code>internal</code> but not <code>external</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Base {\n    // Private function can only be called\n    // - inside this contract\n    // Contracts that inherit this contract cannot call this function.\n    function privateFunc() private pure returns (string memory) {\n        return \"private function called\";\n    }\n\n    function testPrivateFunc() public pure returns (string memory) {\n        return privateFunc();\n    }\n\n    // Internal function can be called\n    // - inside this contract\n    // - inside contracts that inherit this contract\n    function internalFunc() internal pure returns (string memory) {\n        return \"internal function called\";\n    }\n\n    function testInternalFunc() public pure returns (string memory) {\n        return internalFunc();\n    }\n\n    // Public functions can be called\n    // - inside this contract\n    // - inside contracts that inherit this contract\n    // - by other contracts and accounts\n    function publicFunc() public pure returns (string memory) {\n        return \"public function called\";\n    }\n\n    // External functions can only be called\n    // - by other contracts and accounts\n    function externalFunc() external pure returns (string memory) {\n        return \"external function called\";\n    }\n\n    // This function will not compile since we&#39;re trying to call\n    // an external function here.\n    // function testExternalFunc() public pure returns (string memory) {\n    //     return externalFunc();\n    // }\n\n    // State variables\n    string private privateVar = \"my private variable\";\n    string internal internalVar = \"my internal variable\";\n    string public publicVar = \"my public variable\";\n    // State variables cannot be external so this code won&#39;t compile.\n    // string external externalVar = \"my external variable\";\n}\n\ncontract Child is Base {\n    // Inherited contracts do not have access to private functions\n    // and state variables.\n    // function testPrivateFunc() public pure returns (string memory) {\n    //     return privateFunc();\n    // }\n\n    // Internal function call be called inside child contracts.\n    function testInternalFunc() public pure returns (string memory) {\n        return internalFunc();\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Payable\"\n      description=\"An example of how to use the keyword payable in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Functions and addresses declared <code>payable</code> can receive <code>ether</code> into the contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Payable {\n    // Payable address can receive Ether\n    address payable public owner;\n\n    // Payable constructor can receive Ether\n    constructor() public payable {\n        owner = msg.sender;\n    }\n\n    // Function to deposit Ether into this contract.\n    // Call this function along with some Ether.\n    // The balance of this contract will be automatically updated.\n    function deposit() public payable {\n    }\n\n    // Call this function along with some Ether.\n    // The function will throw an error since this function is not payable.\n    function notPayable() public {\n    }\n\n    // Function to withdraw all Ether from this contract.\n    function withdraw() public {\n        // get the amount of Ether stored in this contract\n        uint amount = address(this).balance;\n\n        // send all Ether to owner\n        // Owner can receive Ether since the address of owner is payable\n        (bool success,) = owner.call.value(amount)(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n\n    // Function to transfer Ether from this contract to address from input\n    function transfer(address payable _to, uint _amount) public {\n        // Note that \"to\" is declared as payable\n        (bool success,) = _to.call.value(_amount)(\"\");\n        require(success, \"Failed to send Ether\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function (props) {\n  return (\n    <Example\n      title=\"Sending Ether (transfer, send, call)\"\n      description=\"An example of sending Ether in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You can send Ether to other contracts by</p>\n<ul>\n<li><code>transfer</code> (2300 gas, throws error)</li>\n<li><code>send</code> (2300 gas, returns bool)</li>\n<li><code>call</code> (forward all gas or set gas, returns bool)</li>\n</ul>\n<p><code>call</code> in combination with re-entrancy guard is the recommended method to use after December 2019.</p>\n<p>Guard against re-entrancy by</p>\n<ul>\n<li>making all state changes before calling other contracts</li>\n<li>using re-entrancy guard modifier</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract ReceiveEther {\n    // This is a special function called the fallback.\n    // The fallback function declared payable enables other contracts to\n    // send Ether by send, transfer, or call.\n    function () external payable {}\n\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract SendEther {\n    function sendViaTransfer(address payable _to) public payable {\n        // This function is no longer recommended for sending Ether.\n        _to.transfer(msg.value);\n    }\n\n    function sendViaSend(address payable _to) public payable {\n        // Send returns a boolean value indicating success or failure.\n        // This function is not recommended for sending Ether.\n        bool sent = _to.send(msg.value);\n        require(sent, \"Failed to send Ether\");\n    }\n\n    function sendViaCall(address payable _to) public payable {\n        // Call returns a boolean value indicating success or failure.\n        // This is the current recommended method to use.\n        (bool sent, bytes memory data) = _to.call.value(msg.value)(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Fallback\"\n      description=\"Example of how to use fallback in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>A <code>fallback function</code> is an anonymous function that does not take any arguments and does not return anything.</p>\n<p>Fallback functions are executed when</p>\n<ul>\n<li>calling a function that does not exist</li>\n<li>sending Ether directly to a contract</li>\n</ul>\n<p><code>Fallback</code> functions have a 2300 gas limit when called by <code>transfer</code> or <code>send</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Fallback {\n    event Log(uint gas);\n\n    // Fallback function must be declared as external.\n    function () external payable {\n        // send / transfer (forwards 2300 gas to this fallback function)\n        // call (forwards all of the gas)\n        emit Log(gasleft());\n    }\n\n    // Helper function to check the balance of this contract\n    function getBalance() public view returns (uint) {\n        return address(this).balance;\n    }\n}\n\ncontract SendToFallback {\n    function transferToFallback(address payable _to) public payable {\n        _to.transfer(msg.value);\n    }\n\n    function callFallback(address payable _to) public payable {\n        (bool sent,) = _to.call.value(msg.value)(\"\");\n        require(sent, \"Failed to send Ether\");\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Call\"\n      description=\"In Solidity call is a low level function to interact with other contracts.\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>call</code> is a low level function to interact with other contracts.</p>\n<p>This is the recommended method to use when you&#39;re just sending Ether via calling the <code>fallback</code> function.</p>\n<p>However it is not the recommend way to call existing functions.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Receiver {\n    event Received(address caller, uint amount, string message);\n\n    function () external payable {\n        emit Received(msg.sender, msg.value, \"Fallback was called\");\n    }\n\n    function foo(string memory _message, uint _x) public payable returns (uint) {\n        emit Received(msg.sender, msg.value, _message);\n\n        return _x + 1;\n    }\n}\n\ncontract Caller {\n    event Response(bool success, bytes data);\n\n    // Let&#39;s imagine that contract B does not have the source code for\n    // contract A, but we do know the address of A and the function to call.\n    function testCallFoo(address payable _addr) public payable {\n        // You can send ether and specify a custom gas amount\n        (bool success, bytes memory data) = _addr.call.value(msg.value).gas(5000)(\n            abi.encodeWithSignature(\"foo(string,uint256)\", \"call foo\", 123)\n        );\n\n        emit Response(success, data);\n    }\n\n    // Calling a function that does not exist triggers the fallback function.\n    function testCallDoesNotExist(address _addr) public {\n        (bool success, bytes memory data) = _addr.call(\n            abi.encodeWithSignature(\"doesNotExist()\")\n        );\n\n        emit Response(success, data);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Delegatecall\"\n      description=\"Example of how to use deletegatecall in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>delegatecall</code> is a low level function similar to <code>call</code>.</p>\n<p>When contract <code>A</code> executes <code>delegatecall</code> to contract <code>B</code>, <code>B</code>&#39;s code is excuted</p>\n<p>with contract <code>A</code>&#39;s storage, <code>msg.sender</code> and <code>msg.value</code>.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// NOTE: Deploy this contract first\ncontract B {\n    // NOTE: storage layout must be the same as contract A\n    uint public num;\n    address public sender;\n    uint public value;\n\n    function setVars(uint _num) public payable {\n        num = _num;\n        sender = msg.sender;\n        value = msg.value;\n    }\n}\n\ncontract A {\n    uint public num;\n    address public sender;\n    uint public value;\n\n    function setVars(address _contract, uint _num) public payable {\n        // A&#39;s storage is set, B is not modified.\n        (bool success, bytes memory data) = _contract.delegatecall(\n            abi.encodeWithSignature(\"setVars(uint256)\", _num)\n        );\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Calling Other Contract\"\n      description=\"In Solidity, contract can call other contracts in several ways.\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Contract can call other contracts in 2 ways.</p>\n<p>The easiest way to is to just call it, like <code>A.foo(x, y, z)</code>.</p>\n<p>Another way to call other contracts is to use the low-level <code>call</code>.</p>\n<p>This method is not recommended.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Callee {\n    uint public x;\n    uint public value;\n\n    function setX(uint _x) public returns (uint) {\n        x = _x;\n        return x;\n    }\n\n    function setXandSendEther(uint _x) public payable returns (uint, uint) {\n        x = _x;\n        value = msg.value;\n\n        return (x, value);\n    }\n}\n\ncontract Caller {\n    function setX(Callee _callee, uint _x) public {\n        uint x = _callee.setX(_x);\n    }\n\n    function setXFromAddress(address _addr, uint _x) public {\n        Callee callee = Callee(_addr);\n        callee.setX(_x);\n    }\n\n    function setXandSendEther(Callee _callee, uint _x) public payable {\n        (uint x, uint value) = _callee.setXandSendEther.value(msg.value)(_x);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Contract that Create other Contracts\"\n      description=\"Learn how to create new contract from inside a contract with Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Contracts can be created by other contracts using the <code>new</code> keyword.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Car {\n    address public owner;\n    string public model;\n\n    constructor(address _owner, string memory _model) public payable {\n        owner = _owner;\n        model = _model;\n    }\n}\n\ncontract CarFactory {\n    Car[] public cars;\n\n    function create(address _owner, string memory _model) public {\n        Car car = new Car(_owner, _model);\n        cars.push(car);\n    }\n\n    function createAndSendEther(address _owner, string memory _model)\n        public\n        payable\n    {\n        Car car = (new Car).value(msg.value)(_owner, _model);\n        cars.push(car);\n    }\n\n    function getCar(uint _index)\n        public\n        view\n        returns (address owner, string memory model, uint balance)\n    {\n        Car car = cars[_index];\n\n        return (car.owner(), car.model(), address(car).balance);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Import\"\n      description=\"Learn how to import other Solidity files\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>You can import local and external files in Solidity.</p>\n<h3 id=\"local\">Local</h3>\n<p>Here is our folder structure.</p>\n<pre><code>├── Import.sol\n└── Foo.sol</code></pre><p>Foo.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract Foo {\n    string public name = \"Foo\";\n}\n</code></pre>\n<p>Import.sol</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n// import Foo.sol from current directory\nimport \"./Foo.sol\";\n\ncontract Import {\n    // Initialize Foo.sol\n    Foo public foo = new Foo();\n\n    // Test Foo.sol by getting it&#39;s name.\n    function getFooName() public view returns (string memory) {\n        return foo.name();\n    }\n}\n</code></pre>\n<h3 id=\"external\">External</h3>\n<p>You can also import from <a href=\"https://github.com\">GitHub</a> by simply dropping the <code>https://</code> from the url</p>\n<pre><code class=\"language-solidity\">// https://github.com/owner/repo/blob/branch/path/to/Contract.sol\nimport \"github.com/owner/repo/blob/branch/path/to/Contract.sol\";\n\n// Example import ECDSA.sol from openzeppelin-contract repo, release-v2.5.0 branch\n// https://github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/cryptography/ECDSA.sol\nimport \"github.com/OpenZeppelin/openzeppelin-contracts/blob/release-v2.5.0/contracts/cryptography/ECDSA.sol\";</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Library\"\n      description=\"Example of how to write and use libraries in your Solidity code\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Libraries are similar to contracts, but you can&#39;t declare any state variable and\nyou can&#39;t send ether.</p>\n<p>A library is embedded into the contract if all library functions are internal.</p>\n<p>Otherwise the library must be deployed and then linked before the contract is deployed.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\nlibrary SafeMath {\n    function add(uint x, uint y) internal pure returns (uint) {\n        uint z = x + y;\n        require(z &gt;= x, \"uint overflow\");\n\n        return z;\n    }\n}\n\ncontract TestSafeMath {\n    using SafeMath for uint;\n\n    uint public MAX_UINT = 2 ** 256 - 1;\n\n    function testAdd(uint x, uint y) public pure returns (uint) {\n        return x.add(y);\n    }\n}\n\n// Array function to delete element at index and re-organize the array\n// so that their are no gaps between the elements.\nlibrary Array {\n    function remove(uint[] storage arr, uint index) public {\n        // Move the last element into the place to delete\n        arr[index] = arr[arr.length - 1];\n        arr.pop();\n    }\n}\n\ncontract TestArray {\n    using Array for uint[];\n\n    uint[] public arr;\n\n    function testArrayRemove() public {\n        for (uint i = 0; i &lt; 3; i++) {\n            arr.push(i);\n        }\n\n        arr.remove(1);\n\n        assert(arr.length == 2);\n        assert(arr[0] == 0);\n        assert(arr[1] == 2);\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Hashing with Keccak256\"\n      description=\"Example of hashing using Keccak256 in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p><code>keccak256</code> computes the Keccak-256 hash of the input.</p>\n<p>Some use cases are:</p>\n<ul>\n<li>Creating an deterministic unique ID from a input</li>\n<li>Commit-Reveal scheme</li>\n<li>Compact cryptographic signature (by signing the hash instead of a larger input)</li>\n</ul>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\ncontract HashFunction {\n    function hash(string memory _text, uint _num, address _addr)\n        public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_text, _num, _addr));\n    }\n\n    // Example of hash collision\n    // Hash collision can occur when you pass more than one dynamic data type\n    // to abi.encodePacked. In such case, you should use abi.encode instead.\n    function collision(string memory _text, string memory _anotherText)\n        public pure returns (bytes32)\n    {\n        // encodePacked(AAA, BBB) -&gt; AAABBB\n        // encodePacked(AA, ABBB) -&gt; AAABBB\n        return keccak256(abi.encodePacked(_text, _anotherText));\n    }\n}\n\ncontract GuessTheMagicWord {\n    bytes32 public answer =\n        0x60298f78cc0b47170ba79c10aa3851d7648bd96f2f8e46a19dbc777c36fb0c00;\n\n    // Magic word is \"Solidity\"\n    function guess(string memory _word) public view returns (bool) {\n        return keccak256(abi.encodePacked(_word)) == answer;\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport Example from \"../../components/Example\"\nimport html from \"./index.html.js\"\n\nexport default function(props) {\n  return (\n    <Example\n      title=\"Verifying Signature\"\n      description=\"An example of how to verify signatures in Solidity\"\n      html={html}\n    />\n  )\n}\n","const html = `<p>Messages can be signed off chain and then verified on chain using a smart contract.</p>\n<pre><code class=\"language-solidity\">pragma solidity ^0.5.16;\n\n/* Signature Verification\n\nHow to Sign and Verify\n# Signing\n1. Create message to sign\n2. Hash the message\n3. Sign the hash (off chain, keep your private key secret)\n\n# Verify\n1. Recreate hash from the original message\n2. Recover signer from signature and hash\n3. Compare recovered signer to claimed signer\n\n*/\n\ncontract VerifySignature {\n    /* 1. Unlock MetaMask account\n    ethereum.enable()\n    */\n\n    /* 2. Get message hash to sign\n    getMessageHash(\n        0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C,\n        123,\n        \"coffee and donuts\",\n        1\n    )\n\n    hash = 0xcf36ac4f97dc10d91fc2cbb20d718e94a8cbfe0f82eaedc6a4aa38946fb797cd\n    */\n    function getMessageHash(\n        address _to, uint _amount, string memory _message, uint _nonce\n    )\n        public pure returns (bytes32)\n    {\n        return keccak256(abi.encodePacked(_to, _amount, _message, _nonce));\n    }\n\n    /* 3. Sign message hash\n    web3.personal.sign(hash, web3.eth.defaultAccount, console.log)\n\n    Signature will be different for different accounts\n    0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function getEthSignedMessageHash(bytes32 _messageHash) public pure returns (bytes32) {\n        /*\n        Signature is produced by signing a keccak256 hash with the following format:\n        \"\\\\x19Ethereum Signed Message\\\\n\" + len(msg) + msg\n        */\n        return keccak256(abi.encodePacked(\"\\\\x19Ethereum Signed Message:\\\\n32\", _messageHash));\n    }\n\n    /* 4. Verify signature\n    signer = 0xB273216C05A8c0D4F0a4Dd0d7Bae1D2EfFE636dd\n    to = 0x14723A09ACff6D2A60DcdF7aA4AFf308FDDC160C\n    amount = 123\n    message = \"coffee and donuts\"\n    nonce = 1\n    signature =\n        0x993dab3dd91f5c6dc28e17439be475478f5635c92a56e17e82349d3fb2f166196f466c0b4e0c146f285204f0dcb13e5ae67bc33f4b888ec32dfe0a063e8f3f781b\n    */\n    function verify(\n        address _signer,\n        address _to, uint _amount, string memory _message, uint _nonce,\n        bytes memory signature\n    )\n        public pure returns (bool)\n    {\n        bytes32 messageHash = getMessageHash(_to, _amount, _message, _nonce);\n        bytes32 ethSignedMessageHash = getEthSignedMessageHash(messageHash);\n\n        return recoverSigner(ethSignedMessageHash, signature) == _signer;\n    }\n\n    function recoverSigner(bytes32 _ethSignedMessageHash, bytes memory _signature)\n        public pure returns (address)\n    {\n        (bytes32 r, bytes32 s, uint8 v) = splitSignature(_signature);\n\n        return ecrecover(_ethSignedMessageHash, v, r, s);\n    }\n\n    function splitSignature(bytes memory sig)\n        public pure returns (bytes32 r, bytes32 s, uint8 v)\n    {\n        require(sig.length == 65, \"invalid signature length\");\n\n        assembly {\n            /*\n            First 32 bytes stores the length of the signature\n\n            add(sig, 32) = pointer of sig + 32\n            effectively, skips first 32 bytes of signature\n\n            mload(p) loads next 32 bytes starting at the memory address p into memory\n            */\n\n            // first 32 bytes, after the length prefix\n            r := mload(add(sig, 32))\n            // second 32 bytes\n            s := mload(add(sig, 64))\n            // final byte (first byte of the next 32 bytes)\n            v := byte(0, mload(add(sig, 96)))\n        }\n\n        // implicitly return (r, s, v)\n    }\n}\n</code></pre>\n`\n\nexport default html\n","import React from \"react\"\nimport SEO from \"../../components/SEO\"\nimport { SOL_VERSION } from \"../../constants\"\nimport styles from \"./index.module.css\"\nimport { ROUTES_BY_CATEGORY } from \"../../routes\"\n\nfunction Home() {\n  return (\n    <div className={styles.component}>\n      <SEO\n        title={`Solidity by Example | ${SOL_VERSION}`}\n        description=\"Learn smart contract programming using Solidity\"\n      />\n      <h1 className={styles.header}>\n        <a href=\"/\">Solidity by Example</a>\n      </h1>\n      <div className={styles.main}>\n        <p>\n          an introduction to{\" \"}\n          <a href=\"https://solidity.readthedocs.io\">Solidity</a> with simple\n          examples\n        </p>\n\n        {ROUTES_BY_CATEGORY.map(({ routes, title }, i) => (\n          <div key={i}>\n            {title && <h3>{title}</h3>}\n\n            <ul className={styles.list}>\n              {routes.map(({ path, title }) => (\n                <li key={path}>\n                  <a href={path}>{title}</a>\n                </li>\n              ))}\n            </ul>\n          </div>\n        ))}\n      </div>\n    </div>\n  )\n}\n\nexport default Home\n","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\nimport styles from \"./App.module.css\"\nimport Header from \"./components/Header\"\nimport Footer from \"./components/Footer\"\nimport Home from \"./pages/Home\"\nimport routes from \"./routes\"\n\nfunction App(props) {\n  return (\n    <div className={styles.component}>\n      <Header />\n      <div className={styles.main}>\n        <Router basename={process.env.PUBLIC_URL}>\n          <Switch>\n            {routes.map(route => (\n              <Route\n                key={route.path}\n                path={route.path}\n                component={route.component}\n              />\n            ))}\n            <Route component={Home} />\n          </Switch>\n        </Router>\n      </div>\n      <div className={styles.footer}>\n        <Footer />\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nconst rootElement = document.getElementById(\"root\");\nif (rootElement.hasChildNodes()) {\n  hydrate(<App />, rootElement);\n} else {\n  render(<App />, rootElement);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Footer_component__2wm-B\",\"row\":\"Footer_row__3cluQ\",\"bar\":\"Footer_bar__93usQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"component\":\"Home_component__3V2hY\",\"header\":\"Home_header__Olcyu\"};"],"sourceRoot":""}